// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name wallet_ios_sdk
import DeveloperToolsSupport
import Foundation
import Network
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import wallet_ios_sdk
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetMonthlyBalanceOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var openingBalance: Swift.Double?
  public var periodEndBalance: Swift.Double?
  @available(*, deprecated, renamed: "openingBalance", message: "Use openingBalance variable")
  public func getOpeningBalance() -> Swift.Double
  @available(*, deprecated, renamed: "openingBalance", message: "Use openingBalance variable")
  public func setOpeningBalance(openingBalance: Swift.Double)
  @available(*, deprecated, renamed: "periodEndBalance", message: "Use periodEndBalance variable")
  public func getPeriodEndBalance() -> Swift.Double
  @available(*, deprecated, renamed: "periodEndBalance", message: "Use periodEndBalance variable")
  public func setPeriodEndBalance(periodEndBalance: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetMonthlyBalanceInputParams : wallet_ios_sdk.BaseRequestModel {
  public var OpeningBalanceDate: Swift.Int
  public var PeriodEndBalanceDate: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "OpeningBalanceDate", message: "Use OpeningBalanceDate variable")
  public func getOpeningBalanceDate() -> Swift.Int
  @available(*, deprecated, renamed: "OpeningBalanceDate", message: "Use OpeningBalanceDate variable")
  public func setOpeningBalanceDate(OpeningBalanceDate: Swift.Int)
  @available(*, deprecated, renamed: "PeriodEndBalanceDate", message: "Use PeriodEndBalanceDate variable")
  public func getPeriodEndBalanceDate() -> Swift.Int
  @available(*, deprecated, renamed: "PeriodEndBalanceDate", message: "Use PeriodEndBalanceDate variable")
  public func setPeriodEndBalanceDate(PeriodEndBalanceDate: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TurkcellInvoiceGetInstitutionListInputParams : wallet_ios_sdk.BaseRequestModel {
  public var typeNumber: Swift.String
  public var searchText: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  public func setTypeNumber(typeNumber: Swift.String)
  public func setSearchText(searchText: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetPendingOrderTypesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var pendingOrderTypeList: [wallet_ios_sdk.DictionaryModel]?
  @available(*, deprecated, renamed: "pendingOrderTypeList", message: "Use pendingOrderTypeList variable")
  public func getGetPendingOrderTypeList() -> [wallet_ios_sdk.DictionaryModel]
  @available(*, deprecated, renamed: "pendingOrderTypeList", message: "Use pendingOrderTypeList variable")
  public func setGetPendingOrderTypeList(getPendingOrderTypeList: [wallet_ios_sdk.DictionaryModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ChildSplitTheBillListModel : Swift.Codable {
  public var id: Swift.Int64?
  public var phoneNumber: Swift.String?
  public var customerFullName: Swift.String?
  public var amount: Swift.Double?
  public var splitTheBillStatus: Swift.Int?
  public var creaDate: Swift.String?
  @available(*, deprecated, renamed: "getId", message: "Use getId variable")
  public func getId() -> Swift.Int64
  @available(*, deprecated, renamed: "setId", message: "Use setId variable")
  public mutating func setId(id: Swift.Int64)
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func getPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public mutating func setPhoneNumber(phoneNumber: Swift.String)
  @available(*, deprecated, renamed: "customerFullName", message: "Use customerFullName variable")
  public func getCustomerFullName() -> Swift.String
  @available(*, deprecated, renamed: "customerFullName", message: "Use customerFullName variable")
  public mutating func setCustomerFullName(customerFullName: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public mutating func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "splitTheBillStatus", message: "Use splitTheBillStatus variable")
  public func getSplitTheBillStatus() -> Swift.Int
  @available(*, deprecated, renamed: "splitTheBillStatus", message: "Use splitTheBillStatus variable")
  public mutating func setSplitTheBillStatus(splitTheBillStatus: Swift.Int)
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public func getCreaDate() -> Swift.String
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public mutating func setCreaDate(creaDate: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetCustomerPrepaidCardListInputParams : wallet_ios_sdk.BaseRequestModel {
  public var accountId: Swift.Int64?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func setAccountId(accountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CommitPurchaseInputParams : wallet_ios_sdk.BaseRequestModel {
  public var commitToken: Swift.String
  public var orderId: Swift.String
  public var masterpassCardId: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "commitToken", message: "Use commitToken variable")
  public func getCommitToken() -> Swift.String
  @available(*, deprecated, renamed: "commitToken", message: "Use commitToken variable")
  public func setCommitToken(commitToken: Swift.String)
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func setOrderId(_ orderId: Swift.String)
  @available(*, deprecated, renamed: "masterpassCardId", message: "Use masterpassCardId variable")
  public func getMasterpassCardId() -> Swift.String
  @available(*, deprecated, renamed: "masterpassCardId", message: "Use masterpassCardId variable")
  public func setMasterpassCardId(_ masterpassCardId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct LanguageListModel : Swift.Codable {
  public var languageName: Swift.String?
  public var languageCode: Swift.String?
  public var languageDirection: Swift.String?
  @available(*, deprecated, renamed: "languageName", message: "Use languageName variable")
  public func getLanguageName() -> Swift.String
  @available(*, deprecated, renamed: "languageName", message: "Use languageName variable")
  public mutating func setLanguageName(languageName: Swift.String)
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public mutating func setLanguageCode(languageCode: Swift.String)
  @available(*, deprecated, renamed: "languageDirection", message: "Use languageDirection variable")
  public func getLanguageDirection() -> Swift.String
  @available(*, deprecated, renamed: "languageDirection", message: "Use languageDirection variable")
  public mutating func setLanguageDirection(languageDirection: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class TurkcellInvoicePaymentInputParams : wallet_ios_sdk.BaseRequestModel {
  public var typeName: Swift.String
  public var invoiceAmount: Foundation.Decimal
  public var expenseAmount: Foundation.Decimal
  public var customerName: Swift.String
  public var parameters: [wallet_ios_sdk.InvoiceInquiryModel]
  public var institutionNumber: Swift.String, institutionName: Swift.String
  public var invoice: wallet_ios_sdk.TurkcellInvoiceInquiryModel
  public var SourceAccountId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  public func setTypeName(typeName: Swift.String)
  public func setInvoiceAmount(invoiceAmount: Swift.Double)
  public func setExpenseAmount(expenseAmount: Swift.Double)
  public func setCustomerName(customerName: Swift.String)
  public func setParameters(parameters: [wallet_ios_sdk.InvoiceInquiryModel])
  public func setInstitutionNumber(institutionNumber: Swift.String)
  public func setInstitutionName(institutionName: Swift.String)
  public func setInvoice(invoice: wallet_ios_sdk.TurkcellInvoiceInquiryModel)
  @objc override dynamic public init()
  @objc deinit
}
public struct DictionaryModel : Swift.Codable {
  public var key: Swift.String?
  public var value: Swift.String?
  public init()
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public func getKey() -> Swift.String
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public mutating func setKey(key: Swift.String)
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public func getValue() -> Swift.String
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public mutating func setValue(value: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetOpenConsentPreferencesInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAllBuildingWithStreetCodeInKpsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var buildingResultList: [wallet_ios_sdk.BuildingResultListModel]?
  @available(*, deprecated, renamed: "buildingResultList", message: "Use buildingResultList variable")
  public func getBuildingResultList() -> [wallet_ios_sdk.BuildingResultListModel]
  @available(*, deprecated, renamed: "buildingResultList", message: "Use buildingResultList variable")
  public func setBuildingResultList(buildingResultList: [wallet_ios_sdk.BuildingResultListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CorporationDefinitionsModel : Swift.Codable {
  public var code: Swift.String?
  public var collectionType: Swift.String?
  public var corporationOid: Swift.String?
  public var districtName: Swift.String?
  public var shortTitle: Swift.String?
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public func getCode() -> Swift.String
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public mutating func setCode(code: Swift.String)
  @available(*, deprecated, renamed: "collectionType", message: "Use collectionType variable")
  public func getCollectionType() -> Swift.String
  @available(*, deprecated, renamed: "collectionType", message: "Use collectionType variable")
  public mutating func setCollectionType(collectionType: Swift.String)
  @available(*, deprecated, renamed: "corporationOid", message: "Use corporationOid variable")
  public func getCorporationOid() -> Swift.String
  @available(*, deprecated, renamed: "corporationOid", message: "Use corporationOid variable")
  public mutating func setCorporationOid(corporationOid: Swift.String)
  @available(*, deprecated, renamed: "districtName", message: "Use districtName variable")
  public func getDistrictName() -> Swift.String
  @available(*, deprecated, renamed: "districtName", message: "Use districtName variable")
  public mutating func setDistrictName(districtName: Swift.String)
  @available(*, deprecated, renamed: "shortTitle", message: "Use shortTitle variable")
  public func getShortTitle() -> Swift.String
  @available(*, deprecated, renamed: "shortTitle", message: "Use shortTitle variable")
  public mutating func setShortTitle(shortTitle: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CreateAccountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var accountId: Swift.Int64?
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func setAccountId(accountId: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct DebtListModel : Swift.Codable {
  public var debtInqOprRefNo: Swift.String?
  public var invoiceNumber: Swift.String?
  public var invoiceAmount: Swift.String?
  public var lastPaymentDate: Swift.String?
  public var lastPaymentDateFormatted: Swift.String?
  public var subscriberFullName: Swift.String?
  public var maskedSubscriberFullName: Swift.String?
  public var invoiceCurrencyCode: Swift.String?
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public func getDebtInqOprRefNo() -> Swift.String
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public mutating func setDebtInqOprRefNo(debtInqOprRefNo: Swift.String)
  @available(*, deprecated, renamed: "invoiceNumber", message: "Use invoiceNumber variable")
  public func getInvoiceNumber() -> Swift.String
  @available(*, deprecated, renamed: "invoiceNumber", message: "Use invoiceNumber variable")
  public mutating func setInvoiceNumber(invoiceNumber: Swift.String)
  @available(*, deprecated, renamed: "invoiceAmount", message: "Use invoiceAmount variable")
  public func getInvoiceAmount() -> Swift.String
  @available(*, deprecated, renamed: "invoiceAmount", message: "Use invoiceAmount variable")
  public mutating func setInvoiceAmount(invoiceAmount: Swift.String)
  @available(*, deprecated, renamed: "lastPaymentDate", message: "Use lastPaymentDate variable")
  public func getLastPaymentDate() -> Swift.String
  @available(*, deprecated, renamed: "lastPaymentDate", message: "Use lastPaymentDate variable")
  public mutating func setLastPaymentDate(lastPaymentDate: Swift.String)
  @available(*, deprecated, renamed: "lastPaymentDateFormatted", message: "Use lastPaymentDateFormatted variable")
  public func getLastPaymentDateFormatted() -> Swift.String
  @available(*, deprecated, renamed: "lastPaymentDateFormatted", message: "Use lastPaymentDateFormatted variable")
  public mutating func setLastPaymentDateFormatted(lastPaymentDateFormatted: Swift.String)
  @available(*, deprecated, renamed: "subscriberFullName", message: "Use subscriberFullName variable")
  public func getSubscriberFullName() -> Swift.String
  @available(*, deprecated, renamed: "subscriberFullName", message: "Use subscriberFullName variable")
  public mutating func setSubscriberFullName(subscriberFullName: Swift.String)
  @available(*, deprecated, renamed: "maskedSubscriberFullName", message: "Use maskedSubscriberFullName variable")
  public func getMaskedSubscriberFullName() -> Swift.String
  @available(*, deprecated, renamed: "maskedSubscriberFullName", message: "Use maskedSubscriberFullName variable")
  public mutating func setMaskedSubscriberFullName(maskedSubscriberFullName: Swift.String)
  @available(*, deprecated, renamed: "invoiceCurrencyCode", message: "Use invoiceCurrencyCode variable")
  public func getInvoiceCurrencyCode() -> Swift.String
  @available(*, deprecated, renamed: "invoiceCurrencyCode", message: "Use invoiceCurrencyCode variable")
  public mutating func setInvoiceCurrencyCode(invoiceCurrencyCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetDigitalSlipPreferenceOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var digitalSlipPreferenceId: Swift.Int64?
  @available(*, deprecated, renamed: "digitalSlipPreferenceId", message: "Use digitalSlipPreferenceId variable")
  public func getDigitalSlipPreferenceId() -> Swift.Int64
  @available(*, deprecated, renamed: "digitalSlipPreferenceId", message: "Use digitalSlipPreferenceId variable")
  public func setDigitalSlipPreferenceId(digitalSlipPreferenceId: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetMfsTokenInputParams : wallet_ios_sdk.BaseRequestModel {
  public var userValidationType: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "userValidationType", message: "Use userValidationType variable")
  public func getUserValidationType() -> Swift.String
  @available(*, deprecated, renamed: "userValidationType", message: "Use userValidationType variable")
  public func setUserValidationType(userValidationType: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct ActionDetailModel : Swift.Codable {
  public var sourceAccountId: Swift.Int64?, destinationAccountId: Swift.Int64?
  public var amount: Swift.Double?, currentBalance: Swift.Double?, newBalance: Swift.Double?
  public var currency: Swift.String?
  public var loadMoneyIsRefund: Swift.Bool?
  public var description: Swift.String?, orderId: Swift.String?, vposOrderId: Swift.String?, txnStatus: Swift.String?
  public var refundTxnId: Swift.Int64?, cashbackType: Swift.Int64?
  public var txnIsRefund: Swift.Bool?
  public var merchantCategoryGroupId: Swift.Int16?
  public var merchantCategoryGroupName: Swift.String?
  public var merchantCategoryCode: Swift.Int16?
  public var expenseAmount: Swift.Double?
  public var resultCode: Swift.Int?, transactionType: Swift.Int?
  public var resultDescription: Swift.String?, destinationBankAccountNumber: Swift.String?, merchantName: Swift.String?, paymentPurposeCode: Swift.String?
  public var paymentPurpose: Swift.String?, cardToken: Swift.String?, sourcePhoneNumber: Swift.String?, destinationPhoneNumber: Swift.String?
  public var isContacless: Swift.Bool?
  public var detail: [wallet_ios_sdk.DetailModel]?
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func getSourceAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "destinationAccountId", message: "Use destinationAccountId variable")
  public func getDestinationAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "currentBalance", message: "Use currentBalance variable")
  public func getCurrentBalance() -> Swift.Double
  @available(*, deprecated, renamed: "newBalance", message: "Use newBalance variable")
  public func getNewBalance() -> Swift.Double
  @available(*, deprecated, renamed: "currency", message: "Use currency variable")
  public func getCurrency() -> Swift.String
  @available(*, deprecated, renamed: "loadMoneyIsRefund", message: "Use loadMoneyIsRefund variable")
  public func getLoadMoneyIsRefund() -> Swift.Bool
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "vposOrderId", message: "Use vposOrderId variable")
  public func getVposOrderId() -> Swift.String
  @available(*, deprecated, renamed: "txnStatus", message: "Use txnStatus variable")
  public func getTxnStatus() -> Swift.String
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func getTransactionType() -> Swift.Int
  @available(*, deprecated, renamed: "refundTxnId", message: "Use refundTxnId variable")
  public func getRefundTxnId() -> Swift.Int64
  @available(*, deprecated, renamed: "cashbackType", message: "Use cashbackType variable")
  public func getCashbackType() -> Swift.Int64
  @available(*, deprecated, renamed: "txnIsRefund", message: "Use txnIsRefund variable")
  public func getTxnIsRefund() -> Swift.Bool
  @available(*, deprecated, renamed: "merchantCategoryGroupId", message: "Use merchantCategoryGroupId variable")
  public func getMerchantCategoryGroupId() -> Swift.Int16
  @available(*, deprecated, renamed: "merchantCategoryCode", message: "Use merchantCategoryCode variable")
  public func getMerchantCategoryCode() -> Swift.Int16
  @available(*, deprecated, renamed: "resultCode", message: "Use resultCode variable")
  public func getResultCode() -> Swift.Int
  @available(*, deprecated, renamed: "resultDescription", message: "Use resultDescription variable")
  public func getResultDescription() -> Swift.String
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "merchantName", message: "Use merchantName variable")
  public func getMerchantName() -> Swift.String
  @available(*, deprecated, renamed: "paymentPurpose", message: "Use paymentPurpose variable")
  public func getPaymentPurpose() -> Swift.String
  @available(*, deprecated, renamed: "paymentPurposeCode", message: "Use paymentPurposeCode variable")
  public func getPaymentPurposeCode() -> Swift.String
  @available(*, deprecated, renamed: "paymentPurposeCode", message: "Use paymentPurposeCode variable")
  public mutating func setPaymentPurposeCode(PaymentPurposeCode: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public mutating func setCardToken(CardToken: Swift.String)
  @available(*, deprecated, renamed: "sourcePhoneNumber", message: "Use sourcePhoneNumber variable")
  public func getActionSourcePhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "sourcePhoneNumber", message: "Use sourcePhoneNumber variable")
  public mutating func setActionSourcePhoneNumber(SourcePhoneNumber: Swift.String)
  @available(*, deprecated, renamed: "destinationPhoneNumber", message: "Use destinationPhoneNumber variable")
  public func getActionDestinationPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "destinationPhoneNumber", message: "Use destinationPhoneNumber variable")
  public mutating func setActionDestinationPhoneNumber(DestinationPhoneNumber: Swift.String)
  @available(*, deprecated, renamed: "merchantCategoryGroupName", message: "Use merchantCategoryGroupName variable")
  public func getMerchantCategoryGroupName() -> Swift.String
  @available(*, deprecated, renamed: "merchantCategoryGroupName", message: "Use merchantCategoryGroupName variable")
  public mutating func setMerchantCategoryGroupName(MerchantCategoryGroupName: Swift.String)
  @available(*, deprecated, renamed: "destinationBankAccountNumber", message: "Use destinationBankAccountNumber variable")
  public func getDestinationBankAccountNumber() -> Swift.String
  public mutating func setIsContacless(isContacless: Swift.Bool)
  public func getIsContacless() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class AddCustomerInputParams : wallet_ios_sdk.BaseRequestModel {
  public var nationalityCode: Swift.String?
  public var cityCode: Swift.Int16?
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var tckn: Swift.Int64
  public var birthDate: Swift.String
  public var phone: Swift.String
  public var email: Swift.String
  public var password: Swift.String
  public var loyaltySegmentName: Swift.String
  public var passportNumber: Swift.String?
  public var genderId: Swift.Int16
  public var identityNumber: Swift.String
  public var passportExpireDate: Swift.String?
  public var languageCode: Swift.String
  public var confirmAgreements: [wallet_ios_sdk.ConfirmAgreementListInputModel]
  public var communicationPreferences: wallet_ios_sdk.CommunicationPreferenceObjModel
  public var openConsentPreferences: wallet_ios_sdk.OpenConsentPreferencesModel
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "nationalityCode", message: "Use nationalityCode variable")
  public func getNationalityCode() -> Swift.String
  @available(*, deprecated, renamed: "nationalityCode", message: "Use nationalityCode variable")
  public func setNationalityCode(nationalityCode: Swift.String)
  @available(*, deprecated, renamed: "cityCode", message: "Use cityCode variable")
  public func getCityCode() -> Swift.Int16
  @available(*, deprecated, renamed: "cityCode", message: "Use cityCode variable")
  public func setCityCode(cityCode: Swift.Int16)
  @available(*, deprecated, renamed: "firstName", message: "Use firstName variable")
  public func getFirstName() -> Swift.String
  @available(*, deprecated, renamed: "firstName", message: "Use firstName variable")
  public func setFirstName(firstName: Swift.String)
  @available(*, deprecated, renamed: "lastName", message: "Use lastName variable")
  public func getLastName() -> Swift.String
  @available(*, deprecated, renamed: "lastName", message: "Use lastName variable")
  public func setLastName(lastName: Swift.String)
  @available(*, deprecated, renamed: "tckn", message: "Use tckn variable")
  public func getTckn() -> Swift.Int64
  @available(*, deprecated, renamed: "tckn", message: "Use tckn variable")
  public func setTckn(tckn: Swift.Int64)
  @available(*, deprecated, renamed: "birthDate", message: "Use birthDate variable")
  public func getBirthDate() -> Swift.String
  @available(*, deprecated, renamed: "birthDate", message: "Use birthDate variable")
  public func setBirthDate(birthDate: Swift.String)
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func getPhone() -> Swift.String
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func setPhone(phone: Swift.String)
  @available(*, deprecated, renamed: "email", message: "Use email variable")
  public func getEmail() -> Swift.String
  @available(*, deprecated, renamed: "email", message: "Use email variable")
  public func setEmail(email: Swift.String)
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func getPassword() -> Swift.String
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func setPassword(password: Swift.String)
  @available(*, deprecated, renamed: "loyaltySegmentName", message: "Use loyaltySegmentName variable")
  public func getLoyaltySegmentName() -> Swift.String
  @available(*, deprecated, renamed: "loyaltySegmentName", message: "Use loyaltySegmentName variable")
  public func setLoyaltySegmentName(loyaltySegmentName: Swift.String)
  @available(*, deprecated, renamed: "passportNumber", message: "Use passportNumber variable")
  public func getPassportNumber() -> Swift.String?
  @available(*, deprecated, renamed: "passportNumber", message: "Use passportNumber variable")
  public func setPassportNumber(passportNumber: Swift.String?)
  @available(*, deprecated, renamed: "genderId", message: "Use genderId variable")
  public func getGenderId() -> Swift.Int16
  @available(*, deprecated, renamed: "genderId", message: "Use genderId variable")
  public func setGenderId(genderId: Swift.Int16)
  @available(*, deprecated, renamed: "identityNumber", message: "Use identityNumber variable")
  public func getIdentityNumber() -> Swift.String
  @available(*, deprecated, renamed: "identityNumber", message: "Use identityNumber variable")
  public func setIdentityNumber(identityNumber: Swift.String)
  @available(*, deprecated, renamed: "passportExpireDate", message: "Use passportExpireDate variable")
  public func getPassportExpireDate() -> Swift.String?
  @available(*, deprecated, renamed: "passportExpireDate", message: "Use passportExpireDate variable")
  public func setPassportExpireDate(passportExpireDate: Swift.String?)
  @available(*, deprecated, renamed: "confirmAgreements", message: "Use confirmAgreements variable")
  public func getConfirmAgreements() -> [wallet_ios_sdk.ConfirmAgreementListInputModel]
  @available(*, deprecated, renamed: "confirmAgreements", message: "Use confirmAgreements variable")
  public func setConfirmAgreements(confirmAgreements: [wallet_ios_sdk.ConfirmAgreementListInputModel])
  @available(*, deprecated, renamed: "communicationPreferences", message: "Use communicationPreferences variable")
  public func getCommunicationPreferences() -> wallet_ios_sdk.CommunicationPreferenceObjModel
  @available(*, deprecated, renamed: "communicationPreferences", message: "Use communicationPreferences variable")
  public func setCommunicationPreferences(communicationPreferences: wallet_ios_sdk.CommunicationPreferenceObjModel)
  @available(*, deprecated, renamed: "openConsentPreferences", message: "Use openConsentPreferences variable")
  public func getOpenConsentPreferences() -> wallet_ios_sdk.OpenConsentPreferencesModel
  @available(*, deprecated, renamed: "openConsentPreferences", message: "Use openConsentPreferences variable")
  public func setOpenConsentPreferences(openConsentPreferences: wallet_ios_sdk.OpenConsentPreferencesModel)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DenyAskForMoneyInputParams : wallet_ios_sdk.BaseRequestModel {
  public var askForMoneyId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "askForMoneyId", message: "Use askForMoneyId variable")
  public func getAskForMoneyId() -> Swift.Int64
  @available(*, deprecated, renamed: "askForMoneyId", message: "Use askForMoneyId variable")
  public func setAskForMoneyId(askForMoneyId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BalanceGetExpenseAmountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var amount: Foundation.Decimal?
  public var txnTypeId: Swift.Int16?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double?
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double?)
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int16?
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func setTxnTypeId(txnTypeId: Swift.Int16?)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WalletPaymentOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var htmlForm: Swift.String?
  public var token: Swift.String?
  public var orderId: Swift.String?
  @available(*, deprecated, renamed: "htmlForm", message: "Use htmlForm variable")
  public func getHtmlForme() -> Swift.String
  @available(*, deprecated, renamed: "htmlForm", message: "Use htmlForm variable")
  public func setHtmlForm(htmlForm: Swift.String)
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func getToken() -> Swift.String
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func setToken(token: Swift.String)
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func setOrderId(orderId: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerData : Swift.Codable {
  public func getTCKN() -> Swift.String
  public func getFirstName() -> Swift.String
  public func getPassportNumber() -> Swift.String
  public func getIdentityTypeId() -> Swift.Int
  public func getCustomerId() -> Swift.Int64
  public func getLastName() -> Swift.String
  public func getBirthDate() -> Swift.String
  public func getPhone() -> Swift.String
  public func getEmail() -> Swift.String
  public func getCustomerNo() -> Swift.String
  public func getIsSessionCheckActive() -> Swift.String
  public func getCustomerSegmentId() -> Swift.String
  public func getIsPasswordExpired() -> Swift.Bool
  public mutating func setIsPasswordExpired(isPasswordExpired: Swift.Bool)
  public func getIsUserMailAddressVerified() -> Swift.Bool
  public mutating func setIsUserMailAddressVerified(isUserMailAddressVerified: Swift.Bool)
  public func getGender() -> Swift.String
  public mutating func setGender(gender: Swift.String)
  public func getHasSecretQuestionAnswer() -> Swift.String
  public mutating func setHasSecretQuestionAnswer(hasSecretQuestionAnswer: Swift.String)
  public func getJob() -> Swift.String
  public func getCustomerReferenceCode() -> Swift.String
  public mutating func setJob(job: Swift.String)
  public func getBirthPlace() -> Swift.String
  public mutating func setBirthPlace(birthPlace: Swift.String)
  public func getMonthlyNetIncome() -> Swift.Double
  public mutating func setMonthlyNetIncome(monthlyNetIncome: Swift.Double)
  public func getEstimatedWalletBalance() -> Swift.Double
  public mutating func setEstimatedWalletBalance(estimatedWalletBalance: Swift.Double)
  public func getMonthlyTransactionCount() -> Swift.Int
  public mutating func setMonthlyTransactionCount(monthlyTransactionCount: Swift.Int)
  public func getProducts() -> [Swift.String]
  public mutating func setProducts(products: [Swift.String])
  public func getSourceOfIncome() -> [Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TxnListModel : Swift.Codable {
  public var accountId: Swift.Int64?, refNumber: Swift.Int64?
  public var dateTime: Swift.String?
  public var amount: Swift.Double?, balance: Swift.Double?
  public var txnTypeId: Swift.Int?
  public var txnName: Swift.String?
  public var txnCategoryId: Swift.Int64?
  public var txnCategoryName: Swift.String?
  public var instrumentId: Swift.Int?
  public var instrumentName: Swift.String?, actionType: Swift.String?, holdByFraud: Swift.String?, targetFullName: Swift.String?
  public var showDigitalSlip: Swift.Bool?
  public var actionDetail: wallet_ios_sdk.ActionDetailModel?
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "dateTime", message: "Use dateTime variable")
  public func getDateTime() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "balance", message: "Use balance variable")
  public func getBalance() -> Swift.Double
  @available(*, deprecated, renamed: "txnCategoryId", message: "Use txnCategoryId variable")
  public func getTxnCategoryId() -> Swift.Int64
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "instrumentId", message: "Use instrumentId variable")
  public func getInstrumentId() -> Swift.Int
  @available(*, deprecated, renamed: "actionType", message: "Use actionType variable")
  public func getActionType() -> Swift.String
  @available(*, deprecated, renamed: "targetFullName", message: "Use targetFullName variable")
  public func getTargetFullName() -> Swift.String
  @available(*, deprecated, renamed: "showDigitalSlip", message: "Use showDigitalSlip variable")
  public func getShowDigitalSlip() -> Swift.Bool
  @available(*, deprecated, renamed: "actionDetail", message: "Use actionDetail variable")
  public func getActionDetail() -> wallet_ios_sdk.ActionDetailModel
  @available(*, deprecated, renamed: "holdByFraud", message: "Use holdByFraud variable")
  public func getHoldByFraud() -> Swift.String
  @available(*, deprecated, renamed: "holdByFraud", message: "Use holdByFraud variable")
  public mutating func setHoldByFraud(HoldByFraud: Swift.String)
  @available(*, deprecated, renamed: "txnName", message: "Use txnName variable")
  public func getTxnName() -> Swift.String
  @available(*, deprecated, renamed: "txnName", message: "Use txnName variable")
  public mutating func setTxnName(txnName: Swift.String)
  @available(*, deprecated, renamed: "txnCategoryName", message: "Use txnCategoryName variable")
  public func getTxnCategoryName() -> Swift.String
  @available(*, deprecated, renamed: "txnCategoryName", message: "Use txnCategoryName variable")
  public mutating func setTxnCategoryName(txnCategoryName: Swift.String)
  @available(*, deprecated, renamed: "instrumentName", message: "Use instrumentName variable")
  public func getInstrumentName() -> Swift.String
  @available(*, deprecated, renamed: "instrumentName", message: "Use instrumentName variable")
  public mutating func setInstrumentName(instrumentName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceInstitutionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var totalInstitutionCount: Swift.Int?
  public var institutionVersion: Swift.Int?
  public var institutions: [wallet_ios_sdk.InstitutionsModel]?
  @available(*, deprecated, renamed: "totalInstitutionCount", message: "Use totalInstitutionCount variable")
  public func getTotalInstitutionCount() -> Swift.Int
  @available(*, deprecated, renamed: "totalInstitutionCount", message: "Use totalInstitutionCount variable")
  public func setTotalInstitutionCount(totalInstitutionCount: Swift.Int)
  @available(*, deprecated, renamed: "institutionVersion", message: "Use institutionVersion variable")
  public func getInstitutionVersion() -> Swift.Int
  @available(*, deprecated, renamed: "institutionVersion", message: "Use institutionVersion variable")
  public func setInstitutionVersion(institutionVersion: Swift.Int)
  @available(*, deprecated, renamed: "institutions", message: "Use institutions variable")
  public func getInstitutions() -> [wallet_ios_sdk.InstitutionsModel]
  @available(*, deprecated, renamed: "institutions", message: "Use institutions variable")
  public func setInstitutions(institutions: [wallet_ios_sdk.InstitutionsModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetExpenseAmountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var amount: Foundation.Decimal?
  public var txnTypeId: Swift.Int16?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double?
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double?)
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int16?
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func setTxnTypeId(txnTypeId: Swift.Int16?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserVerificationStatusInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phone: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func getPhone() -> Swift.String
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func setPhone(phone: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct InvoiceInquiryModel : Swift.Codable {
  public var parameter: Swift.String?
  public var orderNo: Swift.Int?
  public init()
  public func getParameters() -> Swift.String
  public func getOrderNo() -> Swift.Int
  public mutating func setParameter(parameter: Swift.String)
  public mutating func setOrderNo(orderNo: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AcceptAskForMoneyOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.String?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class PaymentWalletMobileInputParams : wallet_ios_sdk.BaseRequestModel {
  public var transactCode: Swift.Int?
  public var phoneNumber: Swift.String?
  public var amount: Swift.Double?
  public var referenceNumber: Swift.Int?
  public var originalReferenceNumber: Swift.Int?
  public var descriptionText: Swift.String?
  public var userName: Swift.String?
  public var guidReferenceNumber: Foundation.UUID?
  public var merchantId: Swift.Int?
  public var stationId: Swift.Int?
  public var transactionType: Swift.Int?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "transactCode", message: "Use transactCode variable")
  public func gettransactCode() -> Swift.Int
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func getphoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getamount() -> Swift.Double
  @available(*, deprecated, renamed: "referenceNumber", message: "Use referenceNumber variable")
  public func getreferenceNumber() -> Swift.Int
  @available(*, deprecated, renamed: "originalReferenceNumber", message: "Use originalReferenceNumber variable")
  public func getoriginalReferenceNumber() -> Swift.Int
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getdescription() -> Swift.String
  @available(*, deprecated, renamed: "userName", message: "Use userName variable")
  public func getuserName() -> Swift.String
  @available(*, deprecated, renamed: "transactCode", message: "Use transactCode variable")
  public func settransactCode(transactCode: Swift.Int)
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func setphoneNumber(phoneNumber: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setamount(amount: Swift.Double)
  @available(*, deprecated, renamed: "referenceNumber", message: "Use referenceNumber variable")
  public func setreferenceNumber(referenceNumber: Swift.Int)
  @available(*, deprecated, renamed: "originalReferenceNumber", message: "Use originalReferenceNumber variable")
  public func setoriginalReferenceNumber(originalReferenceNumber: Swift.Int)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func setdescription(description: Swift.String)
  @available(*, deprecated, renamed: "userName", message: "Use userName variable")
  public func setuserName(userName: Swift.String)
  @available(*, deprecated, renamed: "guidReferenceNumber", message: "Use guidReferenceNumber variable")
  public func getguidReferenceNumber() -> Foundation.UUID?
  @available(*, deprecated, renamed: "guidReferenceNumber", message: "Use guidReferenceNumber variable")
  public func setguidReferenceNumber(guidReferenceNumber: Foundation.UUID)
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func getMerchantId() -> Swift.Int
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func setMerchantId(merchantId: Swift.Int)
  @available(*, deprecated, renamed: "stationId", message: "Use stationId variable")
  public func getStationId() -> Swift.Int
  @available(*, deprecated, renamed: "stationId", message: "Use stationId variable")
  public func setStationId(stationId: Swift.Int)
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func getTransactionType() -> Swift.Int
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func setTransactionType(transactionType: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetWalletVirtualCardTxnsMonthlyByAccountIdOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var txns: [wallet_ios_sdk.WalletVirtualCardTxnsMonthlyByAccountIdModel]?
  @available(*, deprecated, renamed: "txns", message: "Use txns variable")
  public func geTxns() -> [wallet_ios_sdk.WalletVirtualCardTxnsMonthlyByAccountIdModel]
  @available(*, deprecated, renamed: "txns", message: "Use txns variable")
  public func setTxns(txns: [wallet_ios_sdk.WalletVirtualCardTxnsMonthlyByAccountIdModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCommunicationPreferencesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var isCallAllowed: Swift.Bool?
  public var isEmailAllowed: Swift.Bool?
  public var isSmsAllowed: Swift.Bool?
  @available(*, deprecated, renamed: "isCallAllowed", message: "Use isCallAllowed variable")
  public func getIsCallAllowed() -> Swift.Bool
  @available(*, deprecated, renamed: "isCallAllowed", message: "Use isCallAllowed variable")
  public func setIsCallAllowed(isCallAllowed: Swift.Bool)
  @available(*, deprecated, renamed: "isEmailAllowed", message: "Use isEmailAllowed variable")
  public func getIsEmailAllowed() -> Swift.Bool
  @available(*, deprecated, renamed: "isEmailAllowed", message: "Use isEmailAllowed variable")
  public func setIsEmailAllowed(isEmailAllowed: Swift.Bool)
  @available(*, deprecated, renamed: "isSmsAllowed", message: "Use isSmsAllowed variable")
  public func getIsSmsAllowed() -> Swift.Bool
  @available(*, deprecated, renamed: "isSmsAllowed", message: "Use isSmsAllowed variable")
  public func setIsSmsAllowed(isSmsAllowed: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class DgFinGetCustomerInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phoneNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetPaymentPurposeOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var paymentPurposeTypeList: [wallet_ios_sdk.DictionaryModel]?
  @available(*, deprecated, renamed: "paymentPurposeTypeList", message: "Use paymentPurposeTypeList variable")
  public func getpaymentPurposeTypeList() -> [wallet_ios_sdk.DictionaryModel]
  @available(*, deprecated, renamed: "paymentPurposeTypeList", message: "Use paymentPurposeTypeList variable")
  public func setpaymentPurposeTypeList(paymentPurposeTypeList: [wallet_ios_sdk.DictionaryModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetDigitalSlipInputParams : wallet_ios_sdk.BaseRequestModel {
  public var refNumber: Swift.Int64
  public var actionType: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DeleteAccountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetDigitalSlipPreferenceInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UpdatePrepaidCardStatusOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetTransactionRestrictionsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var transactionRestrictionList: [wallet_ios_sdk.TransactionRestrictionList]?
  public func getTransactionRestrictionList() -> [wallet_ios_sdk.TransactionRestrictionList]
  public func setTransactionRestrictionList(transactionRestrictionList: [wallet_ios_sdk.TransactionRestrictionList])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TurkcellInvoiceGetInstitutionTypeOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var types: [wallet_ios_sdk.TypesModel]?
  public func getTypes() -> [wallet_ios_sdk.TypesModel]
  public func setTypes(types: [wallet_ios_sdk.TypesModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SendMoneyToMyAccountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var sourceWalletID: Swift.String
  public var amount: Swift.String
  public var targetAccountID: Swift.String
  public var descriptionSendMoneyToMyAccount: Swift.String
  public var IBAN: Swift.String
  public var bankCode: Swift.String
  public var branchCode: Swift.String
  public var accountNumber: Swift.String
  public var saveAccount: Swift.Bool
  public var accountName: Swift.String
  public func SendMoneyToMyAccountInputParams()
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "accountNumber", message: "Use accountNumber variable")
  public func getAccountNumber() -> Swift.String
  @available(*, deprecated, renamed: "accountNumber", message: "Use accountNumber variable")
  public func setAccountNumber(accountNumber: Swift.String)
  @available(*, deprecated, renamed: "branchCode", message: "Use branchCode variable")
  public func getBranchCode() -> Swift.String
  @available(*, deprecated, renamed: "branchCode", message: "Use branchCode variable")
  public func setBranchCode(branchCode: Swift.String)
  @available(*, deprecated, renamed: "bankCode", message: "Use bankCode variable")
  public func getBankCode() -> Swift.String
  @available(*, deprecated, renamed: "bankCode", message: "Use bankCode variable")
  public func setBankCode(bankCode: Swift.String)
  @available(*, deprecated, renamed: "IBAN", message: "Use IBAN variable")
  public func getIBAN() -> Swift.String
  @available(*, deprecated, renamed: "IBAN", message: "Use IBAN variable")
  public func setIBAN(IBAN: Swift.String)
  @available(*, deprecated, renamed: "sourceWalletID", message: "Use sourceWalletID variable")
  public func getSourceWalletID() -> Swift.String
  @available(*, deprecated, renamed: "sourceWalletID", message: "Use sourceWalletID variable")
  public func setSourceWalletID(SourceWalletID: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(Amount: Swift.String)
  @available(*, deprecated, renamed: "descriptionSendMoneyToMyAccount", message: "Use descriptionSendMoneyToMyAccount variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "descriptionSendMoneyToMyAccount", message: "Use descriptionSendMoneyToMyAccount variable")
  public func setDescription(Description: Swift.String)
  @available(*, deprecated, renamed: "targetAccountID", message: "Use targetAccountID variable")
  public func getTargetAccountID() -> Swift.String
  @available(*, deprecated, renamed: "targetAccountID", message: "Use targetAccountID variable")
  public func setTargetAccountID(targetAccountID: Swift.String)
  @available(*, deprecated, renamed: "saveAccount", message: "Use saveAccount variable")
  public func setSaveAccount(isSaveAccount: Swift.Bool)
  @available(*, deprecated, renamed: "saveAccount", message: "Use saveAccount variable")
  public func getSaveAccount() -> Swift.Bool
  @available(*, deprecated, renamed: "accountName", message: "Use accountName variable")
  public func getAccountName() -> Swift.String
  @available(*, deprecated, renamed: "accountName", message: "Use accountName variable")
  public func setAccountName(accountName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PaymentWalletMobileOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var cardExpense: Swift.Double?
  public var cashExpense: Swift.Double?
  public var cashbackExpense: Swift.Double?
  @available(*, deprecated, renamed: "cardExpense", message: "Use cardExpense variable")
  public func getCardExpense() -> Swift.Double
  @available(*, deprecated, renamed: "cardExpense", message: "Use cardExpense variable")
  public func setCardExpense(cardExpense: Swift.Double)
  @available(*, deprecated, renamed: "cashExpense", message: "Use cashExpense variable")
  public func getCashExpense() -> Swift.Double
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getAllBuildingWithStreetCodeInKpsInterface(getAllBuildingWithStreetCodeInKpsInputParams: wallet_ios_sdk.GetAllBuildingWithStreetCodeInKpsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetAllBuildingWithStreetCodeInKpsOutputParams) -> ())
  public func getAllCityWithKpsEncInterface(completion: @escaping (_ result: wallet_ios_sdk.GetAllCityWithKpsOutputParams) -> ())
  public func getAllDistrictWithCityCodeInKpsInterface(getAllDistrictWithCityCodeInKpsInputParams: wallet_ios_sdk.GetAllDistrictWithCityCodeInKpsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetAllDistrictWithCityCodeInKpsOutputParams) -> ())
  public func getAllSectionWithBuildingCodeInKpsInterface(getAllSectionWithBuildingCodeInKpsInputParams: wallet_ios_sdk.GetAllSectionWithBuildingCodeInKpsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetAllSectionWithBuildingCodeInKpsOutputParams) -> ())
  public func getAllStreetWithVillageCodeInKpsInterface(getAllStreetWithVillageCodeInKpsInputParams: wallet_ios_sdk.GetAllStreetWithVillageCodeInKpsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetAllStreetWithVillageCodeInKpsOutputParams) -> ())
  public func getAllVillageWithDistrictCodeInKpsInterface(getAllVillageWithDistrictCodeInKpsInputParams: wallet_ios_sdk.GetAllVillageWithDistrictCodeInKpsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetAllVillageWithDistrictCodeInKpsOutputParams) -> ())
  public func getKpsAddressVerifyInterface(getKpsAddressVerifyInputParams: wallet_ios_sdk.GetKpsAddressVerifyInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetKpsAddressVerifyOutputParams) -> ())
  public func getKpsAddressInquiryInterface(getKpsAddressInquiryInputParams: wallet_ios_sdk.KpsAddressInquiryInputParams, completion: @escaping (_ result: wallet_ios_sdk.KpsAddressInquiryOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerSegmentsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerSegmentList: [wallet_ios_sdk.DictionaryModel]?
  @available(*, deprecated, renamed: "customerSegmentList", message: "Use customerSegmentList variable")
  public func getGetcustomerSegmentList() -> [wallet_ios_sdk.DictionaryModel]
  @available(*, deprecated, renamed: "customerSegmentList", message: "Use customerSegmentList variable")
  public func setGetcustomerSegmentList(getcustomerSegmentList: [wallet_ios_sdk.DictionaryModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SendMoneyInputParams : wallet_ios_sdk.BaseRequestModel {
  public var amount: Foundation.Decimal
  public var orderId: Swift.String
  public var customerListInputModelDescription: Swift.String
  public var targetPhoneNumber: Swift.String
  public var expenseAmount: Foundation.Decimal
  public var sourceAccountId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getAmount() -> Swift.Double
  public func setAmount(amount: Swift.Double)
  public func getOrderId() -> Swift.String
  public func setOrderId(orderId: Swift.String)
  public func getDescription() -> Swift.String
  public func setDescription(Description: Swift.String)
  public func getTargetPhoneNumber() -> Swift.String
  public func setTargetPhoneNumber(targetPhoneNumber: Swift.String)
  public func getExpenseAmount() -> Swift.Double
  public func setExpenseAmount(expenseAmount: Swift.Double)
  public func getSourceAccountId() -> Swift.Int64
  public func setSourceAccountId(sourceAccountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetCustomerCashbackDataInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetPendingOrdersInputParams : wallet_ios_sdk.BaseRequestModel {
  public var actionTypeId: Swift.Int
  public var index: Swift.Int
  public var size: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public func getActionTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public func setActionTypeId(actionTypeId: Swift.Int)
  @available(*, deprecated, renamed: "index", message: "Use index variable")
  public func getIndex() -> Swift.Int
  @available(*, deprecated, renamed: "index", message: "Use index variable")
  public func setIndex(index: Swift.Int)
  @available(*, deprecated, renamed: "size", message: "Use size variable")
  public func getSize() -> Swift.Int
  @available(*, deprecated, renamed: "size", message: "Use size variable")
  public func setSize(size: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AddEnquraIntegrationInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public struct LimitValuesModel : Swift.Codable {
  public var limitValueTypeName: Swift.String?
  public var limitValueTypeId: Swift.Int?
  public var value: Swift.Double?
  public var limitCode: Swift.String?
  public var limitDescription: Swift.String?
  public var visible: Swift.Bool?
  public func getValue() -> Swift.Double
  public mutating func setValue(value: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BeginOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var accountId: Swift.Int64?
  public var sendOtp: Swift.Bool?, phoneChangedSendOtp: Swift.Bool?
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func setAccountId(accountId: Swift.Int64)
  @available(*, deprecated, renamed: "sendOtp", message: "Use sendOtp variable")
  public func getSendOtp() -> Swift.Bool
  @available(*, deprecated, renamed: "sendOtp", message: "Use sendOtp variable")
  public func setSendOtp(sendOtp: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct StreetResultListModel : Swift.Codable {
  public var ad: Swift.String?
  public var kod: Swift.Int?
  public var mahalleKod: Swift.Int?
  public var sabitTanitimNumarasi: Swift.Double?
  public var gelismislikDurum: wallet_ios_sdk.AdresTip?
  public var tipi: wallet_ios_sdk.AdresTip?
  public var hataBilgisi: wallet_ios_sdk.AdresTip?
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public func getAd() -> Swift.String
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public mutating func setAd(ad: Swift.String)
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public func getKod() -> Swift.Int
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public mutating func setKod(kod: Swift.Int)
  @available(*, deprecated, renamed: "mahalleKod", message: "Use mahalleKod variable")
  public func getMahalleKod() -> Swift.Int
  @available(*, deprecated, renamed: "mahalleKod", message: "Use mahalleKod variable")
  public mutating func setMahalleKod(mahalleKod: Swift.Int)
  @available(*, deprecated, renamed: "sabitTanitimNumarasi", message: "Use sabitTanitimNumarasi variable")
  public func getSabitTanitimNumarasi() -> Swift.Double
  @available(*, deprecated, renamed: "sabitTanitimNumarasi", message: "Use sabitTanitimNumarasi variable")
  public mutating func setSabitTanitimNumarasi(sabitTanitimNumarasi: Swift.Double)
  @available(*, deprecated, renamed: "gelismislikDurum", message: "Use gelismislikDurum variable")
  public func getgelismislikDurum() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "gelismislikDurum", message: "Use gelismislikDurum variable")
  public mutating func setgelismislikDurum(gelismislikDurum: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "tipi", message: "Use tipi variable")
  public func getTipi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "tipi", message: "Use tipi variable")
  public mutating func setTipi(tipi: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public func getHataBilgisi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public mutating func setHataBilgisi(hataBilgisi: wallet_ios_sdk.AdresTip)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ApplyPrepaidCardInputParams : wallet_ios_sdk.BaseRequestModel {
  public var prepaidProductId: Swift.Int
  public var accountId: Swift.Int64
  public var birthPlace: Swift.String
  public var address: wallet_ios_sdk.AdressModel
  override public func encode(to encoder: any Swift.Encoder) throws
  public func setPrepaidProductId(prepaidProductId: Swift.Int)
  public func setAccountId(accountId: Swift.Int64)
  public func setBirthPlace(birthPlace: Swift.String)
  public func setAddress(address: wallet_ios_sdk.AdressModel)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DgFinGetTokenLoanCreateOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var accessToken: Swift.String?
  public var refreshToken: Swift.String?
  public var tokenType: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SecurityQuestionResetOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ConfigModel : Swift.Codable {
  public func getForeignMembershipIsActive() -> Swift.Bool
  public mutating func setForeignMembershipIsActive(foreignMembershipIsActive: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MasterpassUnlinkCustomerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceGetInstitutionTypeOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var typesList: [wallet_ios_sdk.TypesListModel]?
  @available(*, deprecated, renamed: "typesList", message: "Use typesList variable")
  public func getTypesList() -> [wallet_ios_sdk.TypesListModel]
  @available(*, deprecated, renamed: "typesList", message: "Use typesList variable")
  public func setTypesList(typesList: [wallet_ios_sdk.TypesListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct FaqDtosModel : Swift.Codable {
  public var questionCode: Swift.Int32?
  public var questionDescription: Swift.String?
  public var answerDescription: Swift.String?
  public var languageCode: Swift.String?
  public var addStatus: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getAvailableCashBalanceUsedTransaction(completion: @escaping (_ result: wallet_ios_sdk.GetAvailableCashBalanceUsedTransactionOutputParams) -> ())
  public func getCustomerLabels(getCustomerLabelsInputParams: wallet_ios_sdk.GetCustomerLabelsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCustomerLabelsOutputParams) -> ())
  public func getCustomerSegments(getCustomerSegmentsInputParams: wallet_ios_sdk.GetCustomerSegmentsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCustomerSegmentsOutputParams) -> ())
  public func getInstitutionNameByIbanInterface(getInstitutionNameByIbanInputParams: wallet_ios_sdk.GetInstitutionNameByIbanInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetInstitutionNameByIbanOutputParams) -> ())
  public func getInstrumentsInterface(getInstrumentsInputParams: wallet_ios_sdk.GetInstrumentsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetInstrumentsOutputParams) -> ())
  public func getNationalitiesInterface(completion: @escaping (_ result: wallet_ios_sdk.GetNationalitiesOutputParams) -> ())
  public func getPaymentPurposeInterface(getPaymentPurposeInputParams: wallet_ios_sdk.GetPaymentPurposeInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetPaymentPurposeOutputParams) -> ())
  public func getResponseMessagesInterface(getResponseMessagesInputParams: wallet_ios_sdk.GetResponseMessagesInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetResponseMessagesOutputParams) -> ())
  public func getTxnTypeCategoryInterface(getTxnTypeCategoryInputParams: wallet_ios_sdk.GetTxnTypeCategoryInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetTxnTypeCategoryOutputParams) -> ())
  public func getTxnTypeInterface(getTxnTypeInputParams: wallet_ios_sdk.GetTxnTypeInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetTxnTypeOutputParams) -> ())
  public func getTransactionRestrictionsInterface(getTransactionRestrictionsInputParams: wallet_ios_sdk.GetTransactionRestrictionsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetTransactionRestrictionsOutputParams) -> ())
  public func getPendingOrderTypesInterface(getPendingOrderTypesInputParams: wallet_ios_sdk.GetPendingOrderTypesInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetPendingOrderTypesOutputParams) -> ())
  public func getCitiesInterface(completion: @escaping (_ result: wallet_ios_sdk.GetCitiesOutputParams) -> ())
  public func getNationalities(completion: @escaping (_ result: wallet_ios_sdk.GetNationalitiesOutputParams) -> ())
  public func getAddressTypes(getAddressTypesInputParams: wallet_ios_sdk.GetAddressTypesInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetAddressTypesOutputParams) -> ())
  public func getCampaignsInterface(getCampaignsInputParams: wallet_ios_sdk.GetCampaignsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCampaignsOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetKpsAddressVerifyOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var addressVerifyResult: wallet_ios_sdk.AddressVerifyResultModel?
  @available(*, deprecated, renamed: "addressVerifyResult", message: "Use addressVerifyResult variable")
  public func getAddressVerifyResult() -> wallet_ios_sdk.AddressVerifyResultModel
  @available(*, deprecated, renamed: "addressVerifyResult", message: "Use addressVerifyResult variable")
  public func setAddressVerifyResult(addressVerifyResult: wallet_ios_sdk.AddressVerifyResultModel)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class TopupPayStartInputParams : wallet_ios_sdk.BaseRequestModel {
  public var amount: Swift.Double?
  public var expenseAmount: Swift.Double?
  public var userValidationType: Swift.String?
  public var destinationAccountID: Swift.Int?
  public var descriptionText: Swift.String?
  public var referenceNumber: Swift.Int?
  public var guidReferenceNumber: Foundation.UUID?
  public var merchantId: Swift.Int?
  public var stationId: Swift.Int?
  public var transactionType: Swift.Int?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "userValidationType", message: "Use userValidationType variable")
  public func getUserValidationType() -> Swift.String
  @available(*, deprecated, renamed: "userValidationType", message: "Use userValidationType variable")
  public func setUserValidationType(userValidationType: Swift.String)
  @available(*, deprecated, renamed: "destinationAccountID", message: "Use destinationAccountID variable")
  public func getDestinationAccountID() -> Swift.Int
  @available(*, deprecated, renamed: "destinationAccountID", message: "Use destinationAccountID variable")
  public func setDestinationAccountID(destinationAccountID: Swift.Int)
  @available(*, deprecated, renamed: "descriptionText", message: "Use descriptionText variable")
  public func getDescriptionText() -> Swift.String
  @available(*, deprecated, renamed: "descriptionText", message: "Use descriptionText variable")
  public func setDescriptionText(descriptionText: Swift.String)
  @available(*, deprecated, renamed: "referenceNumber", message: "Use referenceNumber variable")
  public func getReferenceNumber() -> Swift.Int
  @available(*, deprecated, renamed: "referenceNumber", message: "Use referenceNumber variable")
  public func setReferenceNumber(referenceNumber: Swift.Int)
  @available(*, deprecated, renamed: "guidReferenceNumber", message: "Use guidReferenceNumber variable")
  public func getGuidReferenceNumber() -> Foundation.UUID?
  @available(*, deprecated, renamed: "guidReferenceNumber", message: "Use guidReferenceNumber variable")
  public func setGuidReferenceNumber(guidReferenceNumber: Foundation.UUID)
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func getMerchantId() -> Swift.Int
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func setMerchantId(merchantId: Swift.Int)
  @available(*, deprecated, renamed: "stationId", message: "Use stationId variable")
  public func getStationId() -> Swift.Int
  @available(*, deprecated, renamed: "stationId", message: "Use stationId variable")
  public func setStationId(stationId: Swift.Int)
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func getTransactionType() -> Swift.Int
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func setTransactionType(transactionType: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public struct GetCustomerPrepaidCardListModel : Swift.Codable {
  public var cardToken: Swift.String?
  public var cardStatus: Swift.String?
  public var maskedCardNumber: Swift.String?
  public var creaDate: Swift.String?
  public var statusId: Swift.Int?
  public var accountId: Swift.Int64?
  public var isVirtualCard: Swift.Bool?
  public var cardProcessStatusName: Swift.String?
  public var cardProcessStatusId: Swift.Int?
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public mutating func setCardToken(cardToken: Swift.String)
  @available(*, deprecated, renamed: "cardStatus", message: "Use cardStatus variable")
  public func getCardStatus() -> Swift.String
  @available(*, deprecated, renamed: "cardStatus", message: "Use cardStatus variable")
  public mutating func setCardStatus(cardStatus: Swift.String)
  @available(*, deprecated, renamed: "maskedCardNumber", message: "Use maskedCardNumber variable")
  public func getMaskedCardNumber() -> Swift.String
  @available(*, deprecated, renamed: "maskedCardNumber", message: "Use maskedCardNumber variable")
  public mutating func setMaskedCardNumber(maskedCardNumber: Swift.String)
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public func getCreaDate() -> Swift.String
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public mutating func setCreaDate(creaDate: Swift.String)
  @available(*, deprecated, renamed: "statusId", message: "Use statusId variable")
  public func getStatusId() -> Swift.Int
  @available(*, deprecated, renamed: "statusId", message: "Use statusId variable")
  public mutating func setStatusId(statusId: Swift.Int)
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public mutating func setAccountId(accountId: Swift.Int64)
  @available(*, deprecated, renamed: "isVirtualCard", message: "Use isVirtualCard variable")
  public func getIsVirtualCard() -> Swift.Bool
  @available(*, deprecated, renamed: "isVirtualCard", message: "Use isVirtualCard variable")
  public mutating func setIsVirtualCard(isVirtualCard: Swift.Bool)
  @available(*, deprecated, renamed: "cardProcessStatusName", message: "Use cardProcessStatusName variable")
  public func getCardProcessStatusName() -> Swift.String
  @available(*, deprecated, renamed: "cardProcessStatusName", message: "Use cardProcessStatusName variable")
  public mutating func setCardProcessStatusName(cardProcessStatusName: Swift.String)
  @available(*, deprecated, renamed: "cardProcessStatusId", message: "Use cardProcessStatusId variable")
  public func getCardProcessStatusId() -> Swift.Int
  @available(*, deprecated, renamed: "cardProcessStatusId", message: "Use cardProcessStatusId variable")
  public mutating func setCardProcessStatusId(cardProcessStatusId: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetMobileComponentsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var keyValues: [Swift.String : [Swift.String : Swift.String]]
  public func getKeyValues() -> [Swift.String : [Swift.String : Swift.String]]
  public func setKeyValues(keyValues: [Swift.String : [Swift.String : Swift.String]])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct InstitutionModel : Swift.Codable {
  public var invoiceInfoList: [wallet_ios_sdk.InvoiceInfoModel]?
  public init()
  public func getInvoiceInfoList() -> [wallet_ios_sdk.InvoiceInfoModel]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CardAndBankOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var cardType: Swift.String?
  public var bankCode: Swift.String?
  public var bankName: Swift.String?
  @available(*, deprecated, renamed: "cardType", message: "Use cardType variable")
  public func getCardType() -> Swift.String
  @available(*, deprecated, renamed: "cardType", message: "Use cardType variable")
  public func setCardType(cardType: Swift.String)
  @available(*, deprecated, renamed: "bankCode", message: "Use bankCode variable")
  public func setBankCode(bankCode: Swift.String)
  @available(*, deprecated, renamed: "bankCode", message: "Use bankCode variable")
  public func getBankCode() -> Swift.String
  @available(*, deprecated, renamed: "bankName", message: "Use bankName variable")
  public func setBankName(bankName: Swift.String)
  @available(*, deprecated, renamed: "bankName", message: "Use bankName variable")
  public func getBankName() -> Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetOpenConsentPreferencesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var walletOwnerPersonalizedAdvertising: Swift.Bool?
  public var walletPersonalizedAdvertising: Swift.Bool?
  public var walletDataEnrichment: Swift.Bool?
  public var walletOwnerDataEnrichment: Swift.Bool?
  @available(*, deprecated, renamed: "walletOwnerPersonalizedAdvertising", message: "Use walletOwnerPersonalizedAdvertising variable")
  public func getWalletOwnerPersonalizedAdvertising() -> Swift.Bool
  @available(*, deprecated, renamed: "walletOwnerPersonalizedAdvertising", message: "Use walletOwnerPersonalizedAdvertising variable")
  public func setWalletOwnerPersonalizedAdvertising(walletOwnerPersonalizedAdvertising: Swift.Bool)
  @available(*, deprecated, renamed: "walletPersonalizedAdvertising", message: "Use walletPersonalizedAdvertising variable")
  public func getWalletPersonalizedAdvertising() -> Swift.Bool
  @available(*, deprecated, renamed: "walletPersonalizedAdvertising", message: "Use walletPersonalizedAdvertising variable")
  public func setWalletPersonalizedAdvertising(walletPersonalizedAdvertising: Swift.Bool)
  @available(*, deprecated, renamed: "walletDataEnrichment", message: "Use walletDataEnrichment variable")
  public func getWalletDataEnrichment() -> Swift.Bool
  @available(*, deprecated, renamed: "walletDataEnrichment", message: "Use walletDataEnrichment variable")
  public func setWalletDataEnrichment(walletDataEnrichment: Swift.Bool)
  @available(*, deprecated, renamed: "walletOwnerDataEnrichment", message: "Use walletOwnerDataEnrichment variable")
  public func getWalletOwnerDataEnrichment() -> Swift.Bool
  @available(*, deprecated, renamed: "walletOwnerDataEnrichment", message: "Use walletOwnerDataEnrichment variable")
  public func setWalletOwnerDataEnrichment(walletOwnerDataEnrichment: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAllDistrictWithCityCodeInKpsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var districtResultList: [wallet_ios_sdk.DistrictResultListModel]?
  public func getDistrictResultList() -> [wallet_ios_sdk.DistrictResultListModel]
  public func setDistrictResultList(districtResultList: [wallet_ios_sdk.DistrictResultListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceListCorporationDefinitionsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var corporationDefinitions: [wallet_ios_sdk.CorporationDefinitionsModel]?
  @available(*, deprecated, renamed: "corporationDefinitions", message: "Use corporationDefinitions variable")
  public func getCorporationDefinitions() -> [wallet_ios_sdk.CorporationDefinitionsModel]
  @available(*, deprecated, renamed: "corporationDefinitions", message: "Use corporationDefinitions variable")
  public func setCorporationDefinitions(corporationDefinitions: [wallet_ios_sdk.CorporationDefinitionsModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceCollectOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.String?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum Utils {
  public static func lastIndexOf(text: Swift.String, of: Swift.String) -> Swift.Int?
  public static func AesEncryptWithWB(encParameters: Swift.String) -> Swift.String
  public static func AsciiToHex(hex: Swift.String) -> Swift.String
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class GetCustomerSecretQuestionInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public struct DistrictResultListModel : Swift.Codable {
  public var ad: Swift.String?
  public var kod: Swift.Int?
  public var ilKod: Swift.Int?
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public func getAd() -> Swift.String
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public mutating func setAd(ad: Swift.String)
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public func getKod() -> Swift.Int
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public mutating func setKod(kod: Swift.Int)
  @available(*, deprecated, renamed: "ilKod", message: "Use ilKod variable")
  public func getIlKod() -> Swift.Int
  @available(*, deprecated, renamed: "ilKod", message: "Use ilKod variable")
  public mutating func setIlKod(ilKod: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetUserCommunicationPreferenceInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getUserName() -> Swift.String
  public func setUserName(userName: Swift.String)
  public func getRequestId() -> Swift.String
  public func setRequestId(requestId: Swift.String)
  public func getTimespan() -> Swift.String
  public func setTimespan(timespan: Swift.String)
  public func getRandomNumber() -> Swift.String
  public func setRandomNumber(randomNumber: Swift.String)
  public func getHashCommunication() -> Swift.String
  public func setHashCommunication(hashCommunication: Swift.String)
  public func getWalletId() -> Swift.Int64
  public func setWalletId(walletId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TurkcellInvoiceGetInstitutionListOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var totalInstitutionCount: Swift.Int?, institutionVersion: Swift.Int?
  public var institutions: [wallet_ios_sdk.GetInstitutionListInstitutionModel]?
  public func getTotalInstitutionCount() -> Swift.Int
  public func getInstitutionVersion() -> Swift.Int
  public func getInstitutions() -> [wallet_ios_sdk.GetInstitutionListInstitutionModel]
  public func setTotalInstitutionCount(totalInstitutionCount: Swift.Int)
  public func setInstitutionVersion(institutionVersion: Swift.Int)
  public func setInstitutions(institutions: [wallet_ios_sdk.GetInstitutionListInstitutionModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct FailLoginsListModel : Swift.Codable {
  public var date: Swift.String?
  @available(*, deprecated, renamed: "date", message: "Use date variable")
  public func getDate() -> Swift.String
  @available(*, deprecated, renamed: "date", message: "Use date variable")
  public mutating func setDate(date: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BankAccountListOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var targetAccountList: [wallet_ios_sdk.TargetAccountListModel]?
  @available(*, deprecated, renamed: "targetAccountList", message: "Use targetAccountList variable")
  public func getTargetAccountList() -> [wallet_ios_sdk.TargetAccountListModel]
  @available(*, deprecated, renamed: "targetAccountList", message: "Use targetAccountList variable")
  public func setTargetAccountList(targetAccountList: [wallet_ios_sdk.TargetAccountListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetSupportedLanguagesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var languageList: [wallet_ios_sdk.LanguageListModel]?
  @available(*, deprecated, renamed: "languageList", message: "Use languageList variable")
  public func getLanguageList() -> [wallet_ios_sdk.LanguageListModel]
  @available(*, deprecated, renamed: "languageList", message: "Use languageList variable")
  public func setLanguageList(languageList: [wallet_ios_sdk.LanguageListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ForgotPasswordWithParametersInputParams : wallet_ios_sdk.BaseRequestModel {
  public var parameters: Swift.String
  public var password: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "parameters", message: "Use parameters variable")
  public func getParameters() -> Swift.String
  @available(*, deprecated, renamed: "parameters", message: "Use parameters variable")
  public func setParameters(parameters: Swift.String)
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func getPassword() -> Swift.String
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func setPassword(password: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct GetInstitutionListInstitutionModel : Swift.Codable {
  public var institutionNumber: Swift.String?
  public var processType: Swift.Int?
  public var type: Swift.String?, name: Swift.String?
  public var status: Swift.Int?
  public var institutionDescription: Swift.String?, startTime: Swift.String?, endTime: Swift.String?, workingDays: Swift.String?
  public var partialPayment: Swift.Int?
  public var values: [wallet_ios_sdk.ValueModel]?
  public init()
  public mutating func setInstitutionNumber(institutionNumber: Swift.String)
  public mutating func setProcessType(processType: Swift.Int)
  public mutating func setType(type: Swift.String)
  public mutating func setName(name: Swift.String)
  public mutating func setStatus(status: Swift.Int)
  public mutating func setInstitutionDescription(institutionDescription: Swift.String)
  public mutating func setStartTime(startTime: Swift.String)
  public mutating func setEndTime(endTime: Swift.String)
  public mutating func setWorkingDays(workingDays: Swift.String)
  public mutating func setPartialPayment(partialPayment: Swift.Int)
  public mutating func setValues(values: [wallet_ios_sdk.ValueModel])
  public func getProcessType() -> Swift.Int
  public func getStatus() -> Swift.Int
  public func getPartialPayment() -> Swift.Int
  public func getInstitutionNumber() -> Swift.String
  public func getType() -> Swift.String
  public func getName() -> Swift.String
  public func getInstitutionDescription() -> Swift.String
  public func getStartTime() -> Swift.String
  public func getEndTime() -> Swift.String
  public func getWorkingDays() -> Swift.String
  public func getValues() -> [wallet_ios_sdk.ValueModel]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TopupPayCommitOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var cardExpense: Swift.Double?
  public var cashExpense: Swift.Double?
  public var cashbackExpense: Swift.Double?
  @available(*, deprecated, renamed: "cardExpense", message: "Use cardExpense variable")
  public func getCardExpense() -> Swift.Double
  @available(*, deprecated, renamed: "cardExpense", message: "Use cardExpense variable")
  public func setCardExpense(cardExpense: Swift.Double)
  @available(*, deprecated, renamed: "cashExpense", message: "Use cashExpense variable")
  public func getCashExpense() -> Swift.Double
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TurkcellInvoicePaymentOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.Int64?
  public func getRefNumber() -> Swift.Int64
  public func setRefNumber(refNumber: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func turkcellInvoiceInquiryInterface(turkcellInvoiceInquiryInputParams: wallet_ios_sdk.TurkcellInvoiceInquiryInputParams, completion: @escaping (_ result: wallet_ios_sdk.TurkcellInvoiceInquiryOutputParams) -> ())
  public func turkcellInvoiceGetInstitutionTypeInterface(completion: @escaping (_ result: wallet_ios_sdk.TurkcellInvoiceGetInstitutionTypeOutputParams) -> ())
  public func turkcellInvoicePaymentInterface(turkcellInvoicePaymentInputParams: wallet_ios_sdk.TurkcellInvoicePaymentInputParams, completion: @escaping (_ result: wallet_ios_sdk.TurkcellInvoicePaymentOutputParams) -> ())
  public func turkcellInvoiceGetInstitutionListInterface(turkcellInvoiceGetInstitutionListInputParams: wallet_ios_sdk.TurkcellInvoiceGetInstitutionListInputParams, completion: @escaping (_ result: wallet_ios_sdk.TurkcellInvoiceGetInstitutionListOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetMerchantCategoryGroupListOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var merchantCategoryList: [wallet_ios_sdk.MerchantCategoryListModel]?
  @available(*, deprecated, renamed: "merchantCategoryList", message: "Use merchantCategoryList variable")
  public func getMerchantCategoryList() -> [wallet_ios_sdk.MerchantCategoryListModel]
  @available(*, deprecated, renamed: "merchantCategoryList", message: "Use merchantCategoryList variable")
  public func setMerchantCategoryList(merchantCategoryList: [wallet_ios_sdk.MerchantCategoryListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerLabelListModel : Swift.Codable {
  public var key: Swift.String?
  public var value: Swift.String?
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public func getKey() -> Swift.String
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public mutating func setKey(key: Swift.String)
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public func getValue() -> Swift.String
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public mutating func setValue(value: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetFailLoginAttemptOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var failLogins: [wallet_ios_sdk.FailLoginsListModel]?
  @available(*, deprecated, renamed: "failLogins", message: "Use failLogins variable")
  public func getFailLoginsList() -> [wallet_ios_sdk.FailLoginsListModel]
  @available(*, deprecated, renamed: "failLogins", message: "Use failLogins variable")
  public func setFailLoginsList(failLoginsList: [wallet_ios_sdk.FailLoginsListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct InvoiceInfoModel : Swift.Codable {
  public var invoiceAmount: Swift.Double?
  public var invoiceDueDate: Swift.Int?, bankRefNo: Swift.Int?
  public var invoiceInfo1: Swift.String?, invoiceInfo2: Swift.String?, invoiceInfo3: Swift.String?
  public var invoiceNo: Swift.Int?, invoiceRefNo: Swift.Int?, invoiceSeqNo: Swift.Int?
  public var invoiceStatus: Swift.String?
  public var newInstallmentAmount: Swift.Double?
  public var paymentAmount: Swift.Double?
  public var currency: Swift.String?
  public var invoiceIndex: Swift.String?
  public var commissionAmount: Swift.Double?
  public init()
  public func getInvoiceAmount() -> Swift.Double
  public func getInvoiceDueDate() -> Swift.Int
  public func getBankRefNo() -> Swift.Int
  public func getInvoiceInfo1() -> Swift.String
  public func getInvoiceInfo2() -> Swift.String
  public func getInvoiceInfo3() -> Swift.String
  public func getNewInstallmentAmount() -> Swift.Double
  public func getPaymentAmount() -> Swift.Double
  public func getCommissionAmount() -> Swift.Double
  public func getInvoiceNo() -> Swift.Int
  public func getInvoiceRefNo() -> Swift.Int
  public func getInvoiceSeqNo() -> Swift.Int
  public func getInvoiceStatus() -> Swift.String
  public func getCurrency() -> Swift.String
  public func getInvoiceIndex() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BankExchangeModel : Swift.Codable {
  public func getBuyingExchangeRate() -> Swift.String
  public func getBuyingParity() -> Swift.String
  public func getCurrencyName() -> Swift.String
  public func getCurrencyType() -> Swift.String
  public func getEffectiveBuyingExchangeRate() -> Swift.String
  public func getEffectiveBuyingParity() -> Swift.String
  public func getParity() -> Swift.String
  public func getSellingExchangeRate() -> Swift.String
  public func getSellingParity() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MasterpassPaymentCompleteInputParams : wallet_ios_sdk.BaseRequestModel {
  public var commitToken: Swift.String
  public var OrderId: Swift.String
  public var MasterpassCardId: Swift.String
  public var masterpassToken: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "commitToken", message: "Use commitToken variable")
  public func getCommitToken() -> Swift.String
  @available(*, deprecated, renamed: "commitToken", message: "Use commitToken variable")
  public func setCommitToken(commitToken: Swift.String)
  @available(*, deprecated, renamed: "OrderId", message: "Use OrderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "OrderId", message: "Use OrderId variable")
  public func setOrderId(OrderId: Swift.String)
  @available(*, deprecated, renamed: "MasterpassCardId", message: "Use MasterpassCardId variable")
  public func getMasterpassCardId() -> Swift.String
  @available(*, deprecated, renamed: "MasterpassCardId", message: "Use MasterpassCardId variable")
  public func setMasterpassCardId(MasterpassCardId: Swift.String)
  @available(*, deprecated, renamed: "masterpassToken", message: "Use masterpassToken variable")
  public func getMasterpassToken() -> Swift.String
  @available(*, deprecated, renamed: "masterpassToken", message: "Use masterpassToken variable")
  public func setMasterpassToken(masterpassToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetDefaultAccountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceCalculateCommissionFeeOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var totalAmount: Swift.String?
  public var overdueAmount: Swift.String?
  public var invoiceAmount: Swift.String?
  public var bsmvAmount: Swift.String?
  public var earlyPaymentAmount: Swift.String?
  public var commissionAmount: Swift.String?
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func getTotalAmount() -> Swift.String
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func setTotalAmount(totalAmount: Swift.String)
  @available(*, deprecated, renamed: "overdueAmount", message: "Use overdueAmount variable")
  public func getOverdueAmount() -> Swift.String
  @available(*, deprecated, renamed: "overdueAmount", message: "Use overdueAmount variable")
  public func setOverdueAmount(overdueAmount: Swift.String)
  @available(*, deprecated, renamed: "invoiceAmount", message: "Use invoiceAmount variable")
  public func getInvoiceAmount() -> Swift.String
  @available(*, deprecated, renamed: "invoiceAmount", message: "Use invoiceAmount variable")
  public func setInvoiceAmount(invoiceAmount: Swift.String)
  @available(*, deprecated, renamed: "bsmvAmount", message: "Use bsmvAmount variable")
  public func getBsmvAmount() -> Swift.String
  @available(*, deprecated, renamed: "bsmvAmount", message: "Use bsmvAmount variable")
  public func setBsmvAmount(bsmvAmount: Swift.String)
  @available(*, deprecated, renamed: "earlyPaymentAmount", message: "Use earlyPaymentAmount variable")
  public func getEarlyPaymentAmount() -> Swift.String
  @available(*, deprecated, renamed: "earlyPaymentAmount", message: "Use earlyPaymentAmount variable")
  public func setEarlyPaymentAmount(earlyPaymentAmount: Swift.String)
  @available(*, deprecated, renamed: "commissionAmount", message: "Use commissionAmount variable")
  public func getCommissionAmount() -> Swift.String
  @available(*, deprecated, renamed: "commissionAmount", message: "Use commissionAmount variable")
  public func setCommissionAmount(commissionAmount: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetTxnTypeCategoryInputParams : wallet_ios_sdk.BaseRequestModel {
  public var instrumentIdList: [Swift.Int16]
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "instrumentIdList", message: "Use instrumentIdList variable")
  public func getInstrumentIdList() -> [Swift.Int16]
  @available(*, deprecated, renamed: "instrumentIdList", message: "Use instrumentIdList variable")
  public func setInstrumentIdList(instrumentIdList: [Swift.Int16])
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InvoiceCollectInputParams : wallet_ios_sdk.BaseRequestModel {
  public var bsmvAmount: Swift.String
  public var commissionAmount: Swift.String
  public var corporationCode: Swift.String
  public var debtInqOprRefNo: Swift.String
  public var paymentAmount: Swift.String
  public var collectionTypeCode: Swift.String
  public var referenceValue: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @available(*, deprecated, renamed: "paymentAmount", message: "Use paymentAmount variable")
  public func getPaymentAmount() -> Swift.String
  @available(*, deprecated, renamed: "paymentAmount", message: "Use paymentAmount variable")
  public func setPaymentAmount(paymentAmount: Swift.String)
  @available(*, deprecated, renamed: "commissionAmount", message: "Use commissionAmount variable")
  public func getCommissionAmount() -> Swift.String
  @available(*, deprecated, renamed: "commissionAmount", message: "Use commissionAmount variable")
  public func setCommissionAmount(commissionAmount: Swift.String)
  @available(*, deprecated, renamed: "bsmvAmount", message: "Use bsmvAmount variable")
  public func getBsmvAmount() -> Swift.String
  @available(*, deprecated, renamed: "bsmvAmount", message: "Use bsmvAmount variable")
  public func setBsmvAmount(bsmvAmount: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getCollectionTypeCode() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setCollectionTypeCode(collectionTypeCode: Swift.String)
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public func getDebtInqOprRefNo() -> Swift.String
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public func setDebtInqOprRefNo(debtInqOprRefNo: Swift.String)
  @available(*, deprecated, renamed: "referenceValue", message: "Use referenceValue variable")
  public func getReferenceValue() -> Swift.String
  @available(*, deprecated, renamed: "referenceValue", message: "Use referenceValue variable")
  public func setReferenceValue(referenceValue: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerifyOTPOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var verificationToken: Swift.String?
  @available(*, deprecated, renamed: "verificationToken", message: "Use verificationToken variable")
  public func getVerificationToken() -> Swift.String
  @available(*, deprecated, renamed: "verificationToken", message: "Use verificationToken variable")
  public func setVerificationToken(verificationToken: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UpdateAccountSessionTimeOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BalanceGetExpenseAmountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var txnTypeId: Swift.Int?
  public var amount: Swift.Double?
  public var expenseAmount: Swift.Double?
  public var totalAmount: Swift.Double?
  public var visible: Swift.Bool?
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func setTxnTypeId(txnTypeId: Swift.Int)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func getTotalAmount() -> Swift.Double
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func setTotalAmount(totalAmount: Swift.Double)
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public func getvisible() -> Swift.Bool
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public func setVisible(visible: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WalletCoreSDK : ObjectiveC.NSObject {
  public static let shared: wallet_ios_sdk.WalletCoreSDK
  public var properties: wallet_ios_sdk.WalletCoreSDKProperties?
  public func start(properties: wallet_ios_sdk.WalletCoreSDKProperties)
  public func interfaceInit(initParam: wallet_ios_sdk.InitParam, completion: @escaping (_ result: wallet_ios_sdk.InitResponse) -> ())
  public func NotifyInterface(notifyInputParams: wallet_ios_sdk.NotifyInputParams, completion: @escaping (_ result: wallet_ios_sdk.NotifyOutputParams) -> ())
  @available(iOS 12.0, *)
  public func fetchRemoteIpAddress(completion: @escaping (Swift.Bool) -> ())
  public func setRemoteIpAddress(_ ipAddress: Swift.String)
  public func getCurrentRemoteIpAddress() -> Swift.String
  @available(iOS 12.0, *)
  public func clearRemoteIpAddressCache()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceInquiryOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerName: Swift.String?
  public var value1: Swift.String?
  public var value2: Swift.String?
  public var value3: Swift.String?
  public var institutionNumber: Swift.Int?
  public var invoices: [wallet_ios_sdk.InvoicesModel]?
  @available(*, deprecated, renamed: "customerName", message: "Use customerName variable")
  public func getCustomerName() -> Swift.String
  @available(*, deprecated, renamed: "customerName", message: "Use customerName variable")
  public func setCustomerName(customerName: Swift.String)
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public func getValue1() -> Swift.String
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public func setValue1(value1: Swift.String)
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public func getValue2() -> Swift.String
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public func setValue2(value2: Swift.String)
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public func getValue3() -> Swift.String
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public func setValue3(value3: Swift.String)
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public func getInstitutionNumber() -> Swift.Int
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public func setInstitutionNumber(institutionNumber: Swift.Int)
  @available(*, deprecated, renamed: "invoices", message: "Use invoices variable")
  public func getInvoicesList() -> [wallet_ios_sdk.InvoicesModel]
  @available(*, deprecated, renamed: "invoices", message: "Use invoices variable")
  public func setInvoicesList(invoices: [wallet_ios_sdk.InvoicesModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct WalletVirtualCardTxnsMonthlyByAccountIdModel : Swift.Codable {
  public var totalAmount: Swift.Double?
  public var month: Swift.Int?
  public var year: Swift.Int?
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func getTotalAmount() -> Swift.Double
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public mutating func setTotalAmount(totalAmount: Swift.Double)
  @available(*, deprecated, renamed: "month", message: "Use month variable")
  public func getMonth() -> Swift.Int
  @available(*, deprecated, renamed: "month", message: "Use month variable")
  public mutating func setMonth(month: Swift.Int)
  @available(*, deprecated, renamed: "year", message: "Use year variable")
  public func getYear() -> Swift.Int
  @available(*, deprecated, renamed: "year", message: "Use year variable")
  public mutating func setYear(year: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UserVerificationStatusOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var verificationStatus: Swift.String?
  @available(*, deprecated, renamed: "verificationStatus", message: "Use verificationStatus variable")
  public func getVerificationStatus() -> Swift.String
  @available(*, deprecated, renamed: "verificationStatus", message: "Use verificationStatus variable")
  public func setVerificationStatus(verificationStatus: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DenySplitTheBillOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetPendingOrderDetailInputParams : wallet_ios_sdk.BaseRequestModel {
  public var actionTypeId: Swift.Int
  public var refNumber: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.Int64)
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public func getActionTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public func setActionTypeId(actionTypeId: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public struct WalletCoreSDKProperties {
  public var coreURL: Swift.String
  public var secureURL: Swift.String
  public var apiKey: Swift.String
  public var clientId: Swift.String
  public var cloudPublicKey: Swift.String
  public var isSSLPinningEnabled: Swift.Bool
  public var mpa: Swift.String?
  public init(coreURL: Swift.String, secureURL: Swift.String, apiKey: Swift.String, clientId: Swift.String, cloudPublicKey: Swift.String, isSSLPinningEnabled: Swift.Bool, mpa: Swift.String? = nil)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoicePaymentOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.Int64)
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func getToken() -> Swift.String
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func setToken(token: Swift.String)
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func setOrderId(orderId: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetExchangeRatesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var exchangeRates: [wallet_ios_sdk.ExchangeRates]?
  @available(*, deprecated, renamed: "exchangeRates", message: "Use exchangeRates variable")
  public func getexchangeRates() -> [wallet_ios_sdk.ExchangeRates]
  @available(*, deprecated, renamed: "exchangeRates", message: "Use exchangeRates variable")
  public func setExchangeRates(exchangeRates: [wallet_ios_sdk.ExchangeRates])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetTxnTypeInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LoginWithPasswordInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phone: Swift.String
  public var password: Swift.String
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func getPhone() -> Swift.String
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func setPhone(phone: Swift.String)
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func getPassword() -> Swift.String
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func setPassword(password: Swift.String)
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UpdateCustomerAddressInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  public var addressType: Swift.Int
  public var countryCode: Swift.String
  public var city: Swift.String
  public var district: Swift.String
  public var neighborhood: Swift.String
  public var detail: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetKpsAddressVerifyInputParams : wallet_ios_sdk.BaseRequestModel {
  public var addressNumber: Swift.Int64
  public var verifyIdentityNumber: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "addressNumber", message: "Use addressNumber variable")
  public func getAddressNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "addressNumber", message: "Use addressNumber variable")
  public func setAddressNumber(addressNumber: Swift.Int64)
  @available(*, deprecated, renamed: "verifyIdentityNumber", message: "Use verifyIdentityNumber variable")
  public func getVerifyIdentityNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "verifyIdentityNumber", message: "Use verifyIdentityNumber variable")
  public func setVerifyIdentityNumber(verifyIdentityNumber: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetPendingOrdersOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var totalOrderCount: Swift.Int?
  public var pendingOrderList: [wallet_ios_sdk.PendingOrderListModel]?
  @available(*, deprecated, renamed: "pendingOrderList", message: "Use pendingOrderList variable")
  public func getPendingOrderList() -> [wallet_ios_sdk.PendingOrderListModel]
  @available(*, deprecated, renamed: "pendingOrderList", message: "Use pendingOrderList variable")
  public func setPendingOrderList(pendingOrderList: [wallet_ios_sdk.PendingOrderListModel])
  @available(*, deprecated, renamed: "totalOrderCount", message: "Use totalOrderCount variable")
  public func setTotalOrderCount(totalOrderCount: Swift.Int)
  @available(*, deprecated, renamed: "totalOrderCount", message: "Use totalOrderCount variable")
  public func getTotalOrderCount() -> Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetReceiptInfo : wallet_ios_sdk.BaseRequestModel {
  public var productTrxRefNo: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "productTrxRefNo", message: "Use productTrxRefNo variable")
  public func getProductTrxRefNo() -> Swift.String
  @available(*, deprecated, renamed: "productTrxRefNo", message: "Use productTrxRefNo variable")
  public func setProductTrxRefNo(productTrxRefNo: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CommunicationPreferenceObjModel : wallet_ios_sdk.BaseRequestModel {
  public var isCallAllowed: Swift.Bool
  public var isEmailAllowed: Swift.Bool
  public var isSmsAllowed: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "isCallAllowed", message: "Use isCallAllowed variable")
  public func getIsCallAllowed() -> Swift.Bool
  @available(*, deprecated, renamed: "isCallAllowed", message: "Use isCallAllowed variable")
  public func setIsCallAllowed(isCallAllowed: Swift.Bool)
  @available(*, deprecated, renamed: "isEmailAllowed", message: "Use isEmailAllowed variable")
  public func getIsEmailAllowed() -> Swift.Bool
  @available(*, deprecated, renamed: "isEmailAllowed", message: "Use isEmailAllowed variable")
  public func setIsEmailAllowed(isEmailAllowed: Swift.Bool)
  @available(*, deprecated, renamed: "isSmsAllowed", message: "Use isSmsAllowed variable")
  public func getIsSmsAllowed() -> Swift.Bool
  @available(*, deprecated, renamed: "isSmsAllowed", message: "Use isSmsAllowed variable")
  public func setIsSmsAllowed(isSmsAllowed: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetWalletVirtualCardTxnsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletID: Swift.Int64
  public var index: Swift.Int
  public var size: Swift.Int
  public var startDate: Swift.String
  public var endDate: Swift.String
  public var merchantCategoryGroupId: Swift.Int
  public var cardToken: Swift.String?
  public var txnCategoryIdList: [Swift.Int64]
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "txnCategoryIdList", message: "Use txnCategoryIdList variable")
  public func getTxnCategoryIdlist() -> [Swift.Int64]
  @available(*, deprecated, renamed: "txnCategoryIdList", message: "Use txnCategoryIdList variable")
  public func setTxnCategoryIdlist(txnCategoryIdList: [Swift.Int64])
  @available(*, deprecated, renamed: "size", message: "Use size variable")
  public func getSize() -> Swift.Int
  @available(*, deprecated, renamed: "size", message: "Use size variable")
  public func setSize(size: Swift.Int)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String?
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @available(*, deprecated, renamed: "index", message: "Use index variable")
  public func getIndex() -> Swift.Int
  @available(*, deprecated, renamed: "index", message: "Use index variable")
  public func setIndex(index: Swift.Int)
  @available(*, deprecated, renamed: "walletID", message: "Use walletID variable")
  public func getWalletID() -> Swift.Int64
  @available(*, deprecated, renamed: "walletID", message: "Use walletID variable")
  public func setWalletID(WalletID: Swift.Int64)
  @available(*, deprecated, renamed: "merchantCategoryGroupId", message: "Use merchantCategoryGroupId variable")
  public func getMerchantCategoryGroupId() -> Swift.Int
  @available(*, deprecated, renamed: "merchantCategoryGroupId", message: "Use merchantCategoryGroupId variable")
  public func setMerchantCategoryGroupId(merchantCategoryGroupId: Swift.Int)
  @available(*, deprecated, renamed: "startDate", message: "Use startDate variable")
  public func getStartDate() -> Swift.String
  @available(*, deprecated, renamed: "startDate", message: "Use startDate variable")
  public func setStartDate(StartDate: Swift.String)
  @available(*, deprecated, renamed: "endDate", message: "Use endDate variable")
  public func getEndDate() -> Swift.String
  @available(*, deprecated, renamed: "endDate", message: "Use endDate variable")
  public func setEndDate(EndDate: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RequestBuilder {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ReferenceListModel : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getReferenceValue() -> Swift.String
  public func setReferenceValue(referenceValue: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConfirmAgreementListInputModel : wallet_ios_sdk.BaseRequestModel {
  public var agreementType: Swift.String
  public var agreementVersion: Swift.String
  public var agreementStatus: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "agreementType", message: "Use agreementType variable")
  public func getAgreementType() -> Swift.String
  @available(*, deprecated, renamed: "agreementType", message: "Use agreementType variable")
  public func setAgreementType(agreementType: Swift.String)
  @available(*, deprecated, renamed: "agreementVersion", message: "Use agreementVersion variable")
  public func getAgreementVersion() -> Swift.String
  @available(*, deprecated, renamed: "agreementVersion", message: "Use agreementVersion variable")
  public func setAgreementVersion(agreementVersion: Swift.String)
  @available(*, deprecated, renamed: "agreementStatus", message: "Use agreementStatus variable")
  public func getAgreementStatu() -> Swift.String
  @available(*, deprecated, renamed: "agreementStatus", message: "Use agreementStatus variable")
  public func setAgreementStatus(agreementStatus: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SupportV2OutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerAdressInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerAddresses: [wallet_ios_sdk.CustomerAdressesModel]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class PermissionListModel : Swift.Codable {
  public var trnPermission: Swift.Int?
  public var hasPermission: Swift.Bool?
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "trnPermission", message: "Use trnPermission variable")
  public func getTrnPermission() -> Swift.Int
  @available(*, deprecated, renamed: "trnPermission", message: "Use trnPermission variable")
  public func setTrnPermission(trnPermission: Swift.Int)
  @available(*, deprecated, renamed: "hasPermission", message: "Use hasPermission variable")
  public func getHasPermission() -> Swift.Bool
  @available(*, deprecated, renamed: "hasPermission", message: "Use hasPermission variable")
  public func setHasPermission(hasPermission: Swift.Bool)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetLatestAgreementInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phone: Swift.String
  public var languageCode: Swift.String
  public var applicationlocation: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func getPhone() -> Swift.String
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func setPhone(phone: Swift.String)
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @available(*, deprecated, renamed: "applicationLocation", message: "Use applicationLocation variable")
  public func getApplicationLocation() -> Swift.Int64
  @available(*, deprecated, renamed: "applicationLocation", message: "Use applicationLocation variable")
  public func setApplicationLocation(applicationlocation: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetQrInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  public var qrCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "qrCode", message: "Use qrCode variable")
  public func getQrCode() -> Swift.String
  @available(*, deprecated, renamed: "qrCode", message: "Use qrCode variable")
  public func setQrCode(qrCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetPendingOrderDetailOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.Int64?
  public var amount: Swift.Double?
  public var phoneNumber: Swift.String?
  public var customerFullName: Swift.String?
  public var description: Swift.String?
  public var actionTypeName: Swift.String?
  public var actionTypeId: Swift.Int?
  public var creaDate: Swift.String?
  public var expenseAmount: Swift.Double?
  public var txnDescription: Swift.String?
  public var txnAmount: Swift.Double?
  public var txnCategoryId: Swift.Int?
  public var txnCreaDate: Swift.String?
  public var childSplitTheBillList: [wallet_ios_sdk.ChildSplitTheBillListModel]?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.Int64)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func getPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func setPhoneNumber(phoneNumber: Swift.String)
  @available(*, deprecated, renamed: "customerFullName", message: "Use customerFullName variable")
  public func getCustomerFullName() -> Swift.String
  @available(*, deprecated, renamed: "customerFullName", message: "Use customerFullName variable")
  public func setCustomerFullName(customerFullName: Swift.String)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "actionTypeName", message: "Use actionTypeName variable")
  public func getActionTypeName() -> Swift.String
  @available(*, deprecated, renamed: "actionTypeName", message: "Use actionTypeName variable")
  public func setActionTypeName(actionTypeName: Swift.String)
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public func getActionTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public func setActionTypeId(actionTypeId: Swift.Int)
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public func getCreaDate() -> Swift.String
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public func setCreaDate(creaDate: Swift.String)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "txnAmount", message: "Use txnAmount variable")
  public func getTxnAmount() -> Swift.Double
  @available(*, deprecated, renamed: "txnAmount", message: "Use txnAmount variable")
  public func setTxnAmount(txnAmount: Swift.Double)
  @available(*, deprecated, renamed: "txnCreaDate", message: "Use txnCreaDate variable")
  public func getTxnCreaDate() -> Swift.String
  @available(*, deprecated, renamed: "txnCreaDate", message: "Use txnCreaDate variable")
  public func setTxnCreaDate(txnCreaDate: Swift.String)
  @available(*, deprecated, renamed: "txnDescription", message: "Use txnDescription variable")
  public func getTxnDescription() -> Swift.String
  @available(*, deprecated, renamed: "txnDescription", message: "Use txnDescription variable")
  public func setTxnDescription(txnDescription: Swift.String)
  @available(*, deprecated, renamed: "txnCategoryId", message: "Use txnCategoryId variable")
  public func getTxnCategoryId() -> Swift.Int
  @available(*, deprecated, renamed: "txnCategoryId", message: "Use txnCategoryId variable")
  public func setTxnCategoryId(txnCategoryId: Swift.Int)
  @available(*, deprecated, renamed: "childSplitTheBillList", message: "Use childSplitTheBillList variable")
  public func getChildSplitTheBillList() -> [wallet_ios_sdk.ChildSplitTheBillListModel]
  @available(*, deprecated, renamed: "childSplitTheBillList", message: "Use childSplitTheBillList variable")
  public func setChildSplitTheBillList(childSplitTheBillList: [wallet_ios_sdk.ChildSplitTheBillListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CityModel : Swift.Codable {
  public var name: Swift.String?
  public var code: Swift.Int16?
  public func getName() -> Swift.String
  public mutating func setName(name: Swift.String)
  public func getCode() -> Swift.Int16
  public mutating func setCode(code: Swift.Int16)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ConfirmPasswordInputParams : wallet_ios_sdk.BaseRequestModel {
  public var password: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func getPassword() -> Swift.String
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func setPassword(Password: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Methods {
  public var M_INIT: Swift.Int
  public var M_CREATE_ACCOUNT: Swift.Int
  public var M_CREATE_ACCOUNT_ENC: Swift.Int
  public var M_UPDATE_ACCOUNT: Swift.Int
  public var M_UPDATE_ACCOUNT_ENC: Swift.Int
  public var M_BALANCE_INQUIRY: Swift.Int
  public var M_BALANCE_INQUIRY_ENC: Swift.Int
  public var M_ACCOUNT_ACTIONS_INQUIRY: Swift.Int
  public var M_ACCOUNT_ACTIONS_INQUIRY_ENC: Swift.Int
  public var M_SEND_MONEY_TO_MYACCOUNT: Swift.Int
  public var M_SEND_MONEY_TO_MYACCOUNT_ENC: Swift.Int
  public var M_SEND_MONEY: Swift.Int
  public var M_SEND_MONEY_ENC: Swift.Int
  public var M_ATM_WITHDRAWAL: Swift.Int
  public var M_ATM_WITHDRAWAL_ENC: Swift.Int
  public var M_ADD_CUSTOMER: Swift.Int
  public var M_UPDATE_CUSTOMER_INFO: Swift.Int
  public var M_UPDATE_CUSTOMER_INFO_ENC: Swift.Int
  public var M_CHANGE_PASSWORD: Swift.Int
  public var M_CHANGE_PASSWORD_ENC: Swift.Int
  public var M_FORGOT_PASSWORD: Swift.Int
  public var M_FORGOT_PASSWORD_ENC: Swift.Int
  public var M_LOGIN_WITH_PASSWORD: Swift.Int
  public var M_LOGIN_WITH_PASSWORD_ENC: Swift.Int
  public var M_SET_PASSWORD: Swift.Int
  public var M_SET_PASSWORD_AND_SET_QUESTION: Swift.Int
  public var M_SET_PASSWORD_ENC: Swift.Int
  public var M_LOGOUT: Swift.Int
  public var M_LOGOUT_ENC: Swift.Int
  public var M_VERIFY_OTP: Swift.Int
  public var M_VERIFY_OTP_ENC: Swift.Int
  public var M_BANKACCOUNT_CREATE: Swift.Int
  public var M_BANKACCOUNT_CREATE_ENC: Swift.Int
  public var M_BANKACCOUNT_UPDATE: Swift.Int
  public var M_BANKACCOUNT_UPDATE_ENC: Swift.Int
  public var M_BANKACCOUNT_DELETE: Swift.Int
  public var M_BANKACCOUNT_DELETE_ENC: Swift.Int
  public var M_ADD_BALANCETOWALLET_BYVPOS: Swift.Int
  public var M_ADD_BALANCETOWALLET_BYVPOS_ENC: Swift.Int
  public var M_GET_EXCHANGE_RATES: Swift.Int
  public var M_GET_EXCHANGE_RATES_ENC: Swift.Int
  public var M_BANK_ACCOUNT_LIST: Swift.Int
  public var M_BANK_ACCOUNT_LIST_ENC: Swift.Int
  public var M_RE_OTP: Swift.Int
  public var M_RE_OTP_ENC: Swift.Int
  public var M_GET_CUSTOMER_INFO: Swift.Int
  public var M_GETCUSTOMER_INFO_ENC: Swift.Int
  public var M_NOTIFY: Swift.Int
  public var M_GET_RAND: Swift.Int
  public var M_GET_RAND_ENC: Swift.Int
  public var M_ADD_CUSTOMER_ENC: Swift.Int
  public var M_DELETE_ACCOUNT: Swift.Int
  public var M_DELETE_ACCOUNT_ENC: Swift.Int
  public var M_SUPPORT: Swift.Int
  public var M_SUPPORT_V2: Swift.Int
  public var M_SUPPORT_V2_ENC: Swift.Int
  public var M_SUPPORT_ENC: Swift.Int
  public var M_GET_ATM_TOKEN: Swift.Int
  public var M_GETATM_TOKEN_ENC: Swift.Int
  public var M_CONFIRM_AGREMENT: Swift.Int
  public var M_CONFIRM_AGREMENT_ENC: Swift.Int
  public var M_LATEST_AGREEMENT: Swift.Int
  public var M_LATEST_AGREEMENT_ENC: Swift.Int
  public var M_CANCEL_ATM_TOKEN: Swift.Int
  public var M_CANCEL_ATM_TOKEN_ENC: Swift.Int
  public var M_CONFIRM_PASSWORD: Swift.Int
  public var M_CONFIRM_PASSWORD_ENC: Swift.Int
  public var M_SWITCH_SESSION_CHECK: Swift.Int
  public var M_SWITCH_SESSION_CHECK_ENC: Swift.Int
  public var M_GET_RECEIPT: Swift.Int
  public var M_GET_RECEIPT_ENC: Swift.Int
  public var M_CREATE_UNIC_MPANUMBER: Swift.Int
  public var M_GET_CUSTOMER_NUMBER: Swift.Int
  public var M_REQUEST_PUBLIC_KEY: Swift.Int
  public var M_GET_MPA_NUMBER: Swift.Int
  public var M_GET_HASH: Swift.Int
  public var M_SET_APPLICATION_PATH: Swift.Int
  public var M_CREATE_FINGERPRINT: Swift.Int
  public var M_GETMPA_FINGERPRINT: Swift.Int
  public var M_ENCRYPT: Swift.Int
  public var M_REGISTER_DEVICE: Swift.Int
  public var M_REQUEST_SCSESSION: Swift.Int
  public var M_CREATE_SECURE_SESSION: Swift.Int
  public var M_CREATE_SSL_SECURE_FACTORY: Swift.Int
  public var M_REFUND_TOPUP: Swift.Int
  public var M_REFUND_TOPUP_ENC: Swift.Int
  public var M_GET_MFS_TOKEN: Swift.Int
  public var M_GET_MFS_TOKEN_ENC: Swift.Int
  public var M_CHECK_ONLINE_PAYMENT_LIMIT: Swift.Int
  public var M_CHECK_ONLINE_PAYMENT_LIMIT_ENC: Swift.Int
  public var M_COMMIT_PURCHASE: Swift.Int
  public var M_COMMIT_PURCHASE_ENC: Swift.Int
  public var M_GET_CARD_AND_BANK_INFO_ENC: Swift.Int
  public var M_INVOICE_LIST_COLLECTION_TYPES: Swift.Int
  public var M_INVOICE_LIST_COLLECTION_TYPES_ENC: Swift.Int
  public var M_INVOICE_LIST_CORPORATION_DEFINITIONS: Swift.Int
  public var M_INVOICE_LIST_CORPORATION_DEFINITIONS_ENC: Swift.Int
  public var M_INVOICE_GET_CORPORATION_OPERATION_PARAMETERS: Swift.Int
  public var M_INVOICE_GET_CORPORATION_OPERATION_PARAMETERS_ENC: Swift.Int
  public var M_INVOICE_GET_PREPAID_INFORMATION: Swift.Int
  public var M_INVOICE_GET_PREPAID_INFORMATION_ENC: Swift.Int
  public var M_INVOICE_GET_PREPAID_PREQUERY_MESSAGE: Swift.Int
  public var M_INVOICE_GET_PREPAID_PREQUERY_MESSAGE_ENC: Swift.Int
  public var M_INVOICE_CALCULATE_COMMISSION_FEE: Swift.Int
  public var M_INVOICE_CALCULATE_COMMISSION_FEE_ENC: Swift.Int
  public var M_INVOICE_PREPAID_PAYMENT_CONFIRM_MESSAGE: Swift.Int
  public var M_INVOICE_PREPAID_PAYMENT_CONFIRM_MESSAGE_ENC: Swift.Int
  public var M_INVOICE_COLLECT: Swift.Int
  public var M_INVOICE_COLLECT_ENC: Swift.Int
  public var M_INVOICE_GET_DEBT_INFO: Swift.Int
  public var M_INVOICE_GET_DEBT_INFO_ENC: Swift.Int
  public var M_INVOICE_TRANSPORT_CARD_COLLECT: Swift.Int
  public var M_INVOICE_TRANSPORT_CARD_COLLECT_ENC: Swift.Int
  public var M_InvoiceGetReceiptInfo: Swift.Int
  public var M_INVOICE_GET_EPIN_DEBT_INFO: Swift.Int
  public var M_BEGIN: Swift.Int
  public var M_BEGIN_ENC: Swift.Int
  public var M_GET_SECRET_QUESTION: Swift.Int
  public var M_GET_SECRET_QUESTION_ENC: Swift.Int
  public var M_SET_SECRET_ANSWER: Swift.Int
  public var M_SET_SECRET_ANSWER_ENC: Swift.Int
  public var M_CARD_LIST: Swift.Int
  public var M_CARD_LIST_ENC: Swift.Int
  public var M_SEND_OTPT_FOR_CARD_SAVE_ENC: Swift.Int
  public var M_SEND_OTP_FOR_CARD_RETRIEVE_ENC: Swift.Int
  public var M_RETRIEVE_CARDS_ENC: Swift.Int
  public var M_DELETE_CARD_ENC: Swift.Int
  public var M_SAVE_CARD_ENC: Swift.Int
  public var M_UPDATE_CARD_EXPİRY_ENC: Swift.Int
  public var M_DELETE_ALL_CARDS_OF_CUSTOMER_ENC: Swift.Int
  public var M_CARD_TO_TOKEN_INGUIRY_ENC: Swift.Int
  public var M_TOKEN_TO_CARD_INFO_INGUIRY_ENC: Swift.Int
  public var M_ADD_BALANCE_TO_WALLET_BY_STORED_CARD_ENC: Swift.Int
  public var M_CUSTOM_OTP_VERIFICATION: Swift.Int
  public var M_VERIFY_USER_MAIL_ADDRESS: Swift.Int
  public var M_GET_FAIL_LOGIN_ATTEMPT: Swift.Int
  public var M_FAIL_LOGIN_ATTEMPT_SEEN: Swift.Int
  public var M_GET_MONTHLY_BALANCE_ENC: Swift.Int
  public var M_GET_WALLET_VIRTUAL_CARD_TXNS_ENC: Swift.Int
  public var M_GET_WALLET_VIRTUAL_CARD_TXNS_DAILY_BY_ACCOUNT_ID_ENC: Swift.Int
  public var M_GET_WALLET_VIRTUAL_CARD_TXNS_MONTHLY_BY_ACCOUNT_ID_ENC: Swift.Int
  public var M_SEND_ACCOUNT_ACTIONS_WITH_EMAIL_ENC: Swift.Int
  public var M_GET_ACCOUNT_ACTIONS_RECEIPT_ENC: Swift.Int
  public var M_INVOICE_PAYMENT_ENC: Swift.Int
  public var M_INVOICE_GET_INSTITUTION_TYPE_ENC: Swift.Int
  public var M_INVOICE_INSTITUTION_ENC: Swift.Int
  public var M_INVOICE_INGUIRY_ENC: Swift.Int
  public var M_GET_MERCHANT_CATEGORY_GROUP_LIST: Swift.Int
  public var M_GET_EXPENSE_AMOUNT_LIST_ENC: Swift.Int
  public var M_GET_LIMIT_DEFINITION_ENC: Swift.Int
  public var M_GET_EXPENSES_ENC: Swift.Int
  public var M_REQUEST_SESSION_ID: Swift.Int
  public var M_ACCEPT_ASK_FOR_MONEY: Swift.Int
  public var M_DENY_ASK_FOR_MONEY: Swift.Int
  public var M_ASK_FOR_MONEY: Swift.Int
  public var M_GET_CUSTOMER_SECRET_QUESTION: Swift.Int
  public var M_CHECK_CUSTOMER_SECRET_QUESTION_ANSWER: Swift.Int
  public var M_SPLIT_THE_BILL: Swift.Int
  public var M_CANCEL_SPLIT_THE_BILL: Swift.Int
  public var M_DENY_SPLIT_THE_BILL: Swift.Int
  public var M_ACCEPT_SPLIT_THE_BILL: Swift.Int
  public var M_CANCEL_ASK_FOR_MONEY: Swift.Int
  public var M_CANCEL_ARAF_ENC: Swift.Int
  public var M_SECURITY_QUESTION_RESET_ENC: Swift.Int
  public var M_PHONE_NUMBER_UPDATE_ENC: Swift.Int
  public var M_SET_MONTHLY_ATM_WITH_DRAW_AMOUNT: Swift.Int
  public var M_GET_CUSTOMER_LIMIT_INFO_ENC: Swift.Int
  public var M_SET_MONTHLY_PAYMENT_AMOUNT: Swift.Int
  public var M_VERIFY_CUSTOMER_BY_KPS_ENC: Swift.Int
  public var M_FORGOT_PASSWORD_WITH_PARAMETERS_ENC: Swift.Int
  public var M_PENDING_ORDERS_ENC: Swift.Int
  public var M_GET_PENDING_ORDERS_DETAIL_ENC: Swift.Int
  public var M_GET_CUSTOMER_REMAINING_LIMIT_INFO_ENC: Swift.Int
  public var M_UNLINK_CUSTOMER: Swift.Int
  public var M_TRANSFER_MONEY_TO_BANK_ACCOUNT: Swift.Int
  public var M_GET_PAYMENT_PURPOSE: Swift.Int
  public var M_RENEW_SESSION: Swift.Int
  public var M_GET_TXN_TYPE_CATEGORY: Swift.Int
  public var M_GET_TXN_TYPE: Swift.Int
  public var M_GET_PREPAID_CARD_TRN_PERMISSION_ENC: Swift.Int
  public var M_CREATE_PREPAID_CARD_TRN_PERMISSION_ENC: Swift.Int
  public var M_GET_INSTUTION_NAME_BY_IBAN: Swift.Int
  public var M_SET_COMMUNICATION_PREFERENCES_ENC: Swift.Int
  public var M_GET_USER_COMMUNICATION_PREFERENCE: Swift.Int
  public var M_WALLET_PAYMENT: Swift.Int
  public var M_UPDATE_ACCOUNT_SESSION_TIME: Swift.Int
  public var M_GET_CUSTOMER_PREPAID_CARD_LIST_ENC: Swift.Int
  public var M_GET_INSTRUMENTS: Swift.Int
  public var M_GET_QR_INFO: Swift.Int
  public var M_QR_START_TRANSACTION: Swift.Int
  public var M_APPLY_PREPAID_CARD_ENC: Swift.Int
  public var M_UPDATE_PREPAID_CARD_STATUS: Swift.Int
  public var M_ADD_PREPAID_CARD_MASTER_PASS: Swift.Int
  public var M_GET_CARD_BIN_INFO_ENC: Swift.Int
  public var M_GET_RESPONSE_MESSAGES: Swift.Int
  public var M_ADD_ENQURA_INTEGRATION_ENC: Swift.Int
  public var M_GET_OPEN_CONSENT_PREFERENCES: Swift.Int
  public var M_SET_OPEN_CONSENT_PREFERENCES: Swift.Int
  public var M_GET_DIGITAL_SLIP: Swift.Int
  public var M_GET_DIGITAL_SLIP_PREFERENCE: Swift.Int
  public var M_UPDATE_DIGITAL_SLIP_PREFERENCE: Swift.Int
  public var M_GET_CUSTOMER_CASHBACK_DATA: Swift.Int
  public var M_GET_CUSTOMER_REMAINING_LIMIT_INFO_V2_ENC: Swift.Int
  public var M_GET_COMMUNICATION_PREFERENCES: Swift.Int
  public var M_GET_ALL_DISTRICT_WITH_CITY_CODE_IN_KPS: Swift.Int
  public var M_GET_ALL_CITY_WITH_KPS: Swift.Int
  public var M_GET_ALL_BUILDING_WITH_STREET_CODE_IN_KPS: Swift.Int
  public var M_GET_ALL_STREET_WITH_VILLAGE_CODE_IN_KPS: Swift.Int
  public var M_GET_KPS_ADDRESS_VERIFY: Swift.Int
  public var M_KPS_ADDRESS_INQUIRY: Swift.Int
  public var M_USER_VERIFICATION_STATUS: Swift.Int
  public var M_GET_ALL_VILLAGE_WITH_DISTRICT_CODE_INKPS: Swift.Int
  public var M_GET_ALL_SECTION_WITH_BUILDING_CODE_INKPS: Swift.Int
  public var M_GET_CUSTOMER_SEGMENTS: Swift.Int
  public var M_GET_CUSTOMER_LABELS: Swift.Int
  public var M_ADD_ENQURA_INTEGRATION: Swift.Int
  public var M_FORGOT_PASSWORD_WITH_PARAMETERS: Swift.Int
  public var M_GET_LATEST_AGREEMENT: Swift.Int
  public var M_GET_LIMIT_DEFINITION: Swift.Int
  public var M_GET_LIMIT_DEFINITION_V2: Swift.Int
  public var M_PHONE_NUMBER_UPDATE: Swift.Int
  public var M_SECURITY_QUESTION_RESET: Swift.Int
  public var M_SET_COMMUNICATION_PREFERENCES: Swift.Int
  public var M_SWITCH_SESSION: Swift.Int
  public var M_VERIFY_CUSTOMER_BY_KPS: Swift.Int
  public var M_GET_CARD_AND_BANK_INFO: Swift.Int
  public var M_GET_MONTHLY_BALANCE: Swift.Int
  public var M_ADD_BALANCE_TO_WALLET_BY_STORED_CARD: Swift.Int
  public var M_APPLY_PREPAID_CARD: Swift.Int
  public var M_CANCEL_ARAF: Swift.Int
  public var M_CREATE_PREPAID_CARD_TRN_PERMISSION: Swift.Int
  public var M_GET_ACCOUNT_ACTIONS_RECEIPT: Swift.Int
  public var M_GET_CARD_BIN_INFO: Swift.Int
  public var M_GET_CUSTOMER_LIMIT_INFO: Swift.Int
  public var M_GET_CUSTOMER_PREPAID_CARD_LIST: Swift.Int
  public var M_GET_CUSTOMER_REMAINING_LIMIT_INFO: Swift.Int
  public var M_GET_CUSTOMER_REMAINING_LIMIT_INFO_V2: Swift.Int
  public var M_GET_CUSTOMER_REMAINING_LIMIT_INFO_V3: Swift.Int
  public var M_GET_EXPENSE_AMOUNT: Swift.Int
  public var M_GET_EXPENSES: Swift.Int
  public var M_GET_PENDING_ORDERS_DETAIL: Swift.Int
  public var M_GET_PENDING_ORDERS: Swift.Int
  public var M_GET_PREPAID_CARD_TRN_PERMISSION: Swift.Int
  public var M_GET_WALLET_VIRTUAL_CARD_TXNS_DAILY_BY_ACCOUNT_ID: Swift.Int
  public var M_GET_WALLET_VIRTUAL_CARD_TXNS: Swift.Int
  public var M_GET_WALLET_VIRTUAL_CARD_TXNS_MONTHLY_BY_ACCOUNT_ID: Swift.Int
  public var M_INVOICE_INSTITUTION: Swift.Int
  public var M_INVOICE_GET_INSTITUTION_TYPE: Swift.Int
  public var M_INVOICE_GET_RECEIPT_INFO: Swift.Int
  public var M_INVOICE_INQUIRY: Swift.Int
  public var M_INVOICE_PAYMENT: Swift.Int
  public var M_SEND_ACCOUNT_ACTIONS_WITH_EMAIL: Swift.Int
  public var M_UPDATE_ACCOUNT_INFO: Swift.Int
  public var M_GET_BALANCE: Swift.Int
  public var M_GET_PENDING_ORDER_TYPES: Swift.Int
  public var M_GET_INVOICE_INQUIRY: Swift.Int
  public var M_GET_INVOICE_GET_INSTITUTION_TYPE: Swift.Int
  public var M_GET_INVOICE_PAYMENT: Swift.Int
  public var M_GET_INVOICE_GET_INSTITUTION_LIST: Swift.Int
  public var M_GET_GET_TRANSACTION_RESTRICTIONS: Swift.Int
  public var M_GET_WALLET_CARD_INFO: Swift.Int
  public var M_GET_CITIES: Swift.Int
  public var M_TRANSFER_BETWEEN_ACCOUNTS: Swift.Int
  public var M_GET_NATIONLITIES: Swift.Int
  public var M_GET_AVAILABLE_CASH_BALANCE_USED_TRANSACTION: Swift.Int
  public var M_ACTIVATE_PHYSICAL_CARD: Swift.Int
  public var M_SET_PREPAID_CARD_PIN: Swift.Int
  public var M_SET_DEFAULT_ACCOUNT: Swift.Int
  public var M_NEW_INIT: Swift.Int
  public var M_NEW_INITV5: Swift.Int
  public var MASTERPASS_UNLINK_CUSTOMER: Swift.Int
  public var MASTERPASS_PAYMENT_COMPLETE: Swift.Int
  public var MASTERPASS_PAYMENT: Swift.Int
  public var MASTERPASS_GENERATE_TOKEN: Swift.Int
  public var GET_SUPPORTED_LANGUAGES: Swift.Int
  public var GET_MOBILE_COMPONENTS: Swift.Int
  public var PERSONALIZE_ANONYMOUS_CARD: Swift.Int
  public var M_INITIAL: Swift.Int
  public var M_GET_FAQ: Swift.Int
  public var M_GET_CUSTOMER_ADRESS_INFO: Swift.Int
  public var UPDATE_CUSTOMER_ADDRESS_INFO: Swift.Int
  public var GET_ADDRESS_TYPES: Swift.Int
  public var M_GET_CAMPAIGNS: Swift.Int
  public var BALANCE_GET_EXPENSE_AMOUNT: Swift.Int
  public var BALANCE_PaymentWalletMobile: Swift.Int
  public var BALANCE_TopupPayStart: Swift.Int
  public var BALANCE_TopupPayCommit: Swift.Int
  public var M_ADD_ANONIM_CUSTOMER: Swift.Int
  public var M_COMPLETE_REGISTRATION: Swift.Int
  public var M_DGFIN_GET_CUSTOMER: Swift.Int
  public var M_DGFIN_GET_TOKEN: Swift.Int
  public var M_DGFIN_GET_CUSTOMER_INFO_GSM: Swift.Int
  public var M_UPDATE_CUSTOMER_PHONE_NUMBER: Swift.Int
  public var M_DGFIN_GET_TOKEN_LOAN_CREATE: Swift.Int
  public var M_GET_JOBS: Swift.Int
  public var BALANCE_GetMasterpassConfig: Swift.Int
  public var CHECK_EMAIL: Swift.Int
  public var M_GET_LIMIT_INFO: Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CancelSplitTheBillInputParams : wallet_ios_sdk.BaseRequestModel {
  public var splitTheBillId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getSplitTheBillId() -> Swift.Int64
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setSplitTheBillId(splitTheBillId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LoginWithPasswordOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var unblockDatetime: Swift.String?
  public var sessionToken: Swift.String?
  public var hasSecretQuestionAnswer: Swift.String?
  public var isPasswordExpired: Swift.Bool?
  public var seenFailLoginAttempts: Swift.Bool?
  public var isUserMailAddressVerified: Swift.Bool?
  public var remainingAttemptCount: Swift.Int16?
  public var totalAttemptCount: Swift.Int16?
  public var remainingSessionTime: Swift.String?
  public var hash: Swift.String?
  public var rnd: Swift.Int64?
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func getUnblockDatetime() -> Swift.String
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func setUnblockDatetime(unblockDatetime: Swift.String)
  @available(*, deprecated, renamed: "sessionToken", message: "Use sessionToken variable")
  public func getSessionToken() -> Swift.String
  @available(*, deprecated, renamed: "sessionToken", message: "Use sessionToken variable")
  public func setSessionToken(sessionToken: Swift.String)
  @available(*, deprecated, renamed: "hasSecretQuestionAnswer", message: "Use hasSecretQuestionAnswer variable")
  public func getHasSecretQuestionAnswer() -> Swift.String
  @available(*, deprecated, renamed: "hasSecretQuestionAnswer", message: "Use hasSecretQuestionAnswer variable")
  public func setHasSecretQuestionAnswer(hasSecretQuestionAnswer: Swift.String)
  @available(*, deprecated, renamed: "isPasswordExpired", message: "Use isPasswordExpired variable")
  public func getIsPasswordExpired() -> Swift.Bool
  @available(*, deprecated, renamed: "isPasswordExpired", message: "Use isPasswordExpired variable")
  public func setIsPasswordExpired(isPasswordExpired: Swift.Bool)
  @available(*, deprecated, renamed: "seenFailLoginAttempts", message: "Use seenFailLoginAttempts variable")
  public func getSeenFailLoginAttempts() -> Swift.Bool
  @available(*, deprecated, renamed: "seenFailLoginAttempts", message: "Use seenFailLoginAttempts variable")
  public func setSeenFailLoginAttempts(seenFailLoginAttempts: Swift.Bool)
  @available(*, deprecated, renamed: "isUserMailAddressVerified", message: "Use isUserMailAddressVerified variable")
  public func getIsUserMailAddressVerified() -> Swift.Bool
  @available(*, deprecated, renamed: "isUserMailAddressVerified", message: "Use isUserMailAddressVerified variable")
  public func setIsUserMailAddressVerified(isUserMailAddressVerified: Swift.Bool)
  @available(*, deprecated, renamed: "totalAttemptCount", message: "Use totalAttemptCount variable")
  public func getTotalAttemptCount() -> Swift.Int16
  @available(*, deprecated, renamed: "totalAttemptCount", message: "Use totalAttemptCount variable")
  public func setTotalAttemptCount(totalAttemptCount: Swift.Int16)
  @available(*, deprecated, renamed: "remainingAttemptCount", message: "Use remainingAttemptCount variable")
  public func getRemainingAttemptCount() -> Swift.Int16
  @available(*, deprecated, renamed: "remainingAttemptCount", message: "Use remainingAttemptCount variable")
  public func setRemainingAttemptCount(remainingAttemptCount: Swift.Int16)
  @available(*, deprecated, renamed: "remainingSessionTime", message: "Use remainingSessionTime variable")
  public func getRemainingSessionTime() -> Swift.String
  @available(*, deprecated, renamed: "remainingSessionTime", message: "Use remainingSessionTime variable")
  public func setRemainingSessionTime(remainingSessionTime: Swift.String)
  @available(*, deprecated, renamed: "hash", message: "Use hash variable")
  public func getHash() -> Swift.String
  @available(*, deprecated, renamed: "hash", message: "Use hash variable")
  public func setHash(hash: Swift.String)
  @available(*, deprecated, renamed: "rnd", message: "Use rnd variable")
  public func getRnd() -> Swift.Int64
  @available(*, deprecated, renamed: "rnd", message: "Use rnd variable")
  public func setRnd(rnd: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class AddPrepaidCardMasterPassInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cardToken: Swift.String
  public var channelType: Swift.String
  public var cardAliasName: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @available(*, deprecated, renamed: "channelType", message: "Use channelType variable")
  public func getChannelType() -> Swift.String
  @available(*, deprecated, renamed: "channelType", message: "Use channelType variable")
  public func setChannelType(channelType: Swift.String)
  @available(*, deprecated, renamed: "cardAliasName", message: "Use cardAliasName variable")
  public func getCardAliasName() -> Swift.String
  @available(*, deprecated, renamed: "cardAliasName", message: "Use cardAliasName variable")
  public func setCardAliasName(cardAliasName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RenewSessionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var sessionToken: Swift.String?
  public var remainingSessionTime: Swift.String?
  @available(*, deprecated, renamed: "sessionToken", message: "Use sessionToken variable")
  public func getSessionToken() -> Swift.String
  @available(*, deprecated, renamed: "sessionToken", message: "Use sessionToken variable")
  public func setSessionToken(sessionToken: Swift.String)
  @available(*, deprecated, renamed: "remainingSessionTime", message: "Use remainingSessionTime variable")
  public func getRemainingSessionTime() -> Swift.String
  @available(*, deprecated, renamed: "remainingSessionTime", message: "Use remainingSessionTime variable")
  public func setRemainingSessionTime(remainingSessionTime: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CreatePrepaidCardTrnPermissionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UpdateAccountInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConfirmAgreementOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func addPrepaidCardMasterPassInterface(addPrepaidCardMasterPassInputParams: wallet_ios_sdk.AddPrepaidCardMasterPassInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
}
@objc @_inheritsConvenienceInitializers public class GetLimitDefinitionV2InputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletCustomerSegmentId: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public struct ExchangeRates : Swift.Codable {
  public var buyingExchangeRate: Swift.String?
  public var buyingParity: Swift.String?
  public var currencyName: Swift.String?
  public var currencyType: Swift.String?
  public var effectiveBuyingExchangeRate: Swift.String?
  public var effectiveBuyingParity: Swift.String?
  public var parity: Swift.String?
  public var sellingExchangeRate: Swift.String?
  public var sellingParity: Swift.String?
  @available(*, deprecated, renamed: "buyingExchangeRate", message: "Use buyingExchangeRate variable")
  public func getBuyingExchangeRate() -> Swift.String
  @available(*, deprecated, renamed: "buyingParity", message: "Use buyingParity variable")
  public func getBuyingParity() -> Swift.String
  @available(*, deprecated, renamed: "currencyName", message: "Use currencyName variable")
  public func getCurrencyName() -> Swift.String
  @available(*, deprecated, renamed: "currencyType", message: "Use currencyType variable")
  public func getCurrencyType() -> Swift.String
  @available(*, deprecated, renamed: "effectiveBuyingExchangeRate", message: "Use effectiveBuyingExchangeRate variable")
  public func getEffectiveBuyingExchangeRate() -> Swift.String
  @available(*, deprecated, renamed: "effectiveBuyingParity", message: "Use effectiveBuyingParity variable")
  public func getEffectiveBuyingParity() -> Swift.String
  @available(*, deprecated, renamed: "parity", message: "Use parity variable")
  public func getParity() -> Swift.String
  @available(*, deprecated, renamed: "sellingExchangeRate", message: "Use sellingExchangeRate variable")
  public func getSellingExchangeRate() -> Swift.String
  @available(*, deprecated, renamed: "sellingExchangeRate", message: "Use sellingExchangeRate variable")
  public func getSellingParity() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class OpenConsentPreferencesModel : wallet_ios_sdk.BaseRequestModel {
  public var walletOwnerPersonalizedAdvertising: Swift.Bool
  public var walletPersonalizedAdvertising: Swift.Bool
  public var walletOwnerDataEnrichment: Swift.Bool
  public var walletDataEnrichment: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "walletOwnerPersonalizedAdvertising", message: "Use walletOwnerPersonalizedAdvertising variable")
  public func getWalletOwnerPersonalizedAdvertising() -> Swift.Bool
  @available(*, deprecated, renamed: "walletOwnerPersonalizedAdvertising", message: "Use walletOwnerPersonalizedAdvertising variable")
  public func setWalletOwnerPersonalizedAdvertising(walletOwnerPersonalizedAdvertising: Swift.Bool)
  @available(*, deprecated, renamed: "walletPersonalizedAdvertising", message: "Use walletPersonalizedAdvertising variable")
  public func getWalletPersonalizedAdvertising() -> Swift.Bool
  @available(*, deprecated, renamed: "walletPersonalizedAdvertising", message: "Use walletPersonalizedAdvertising variable")
  public func setWalletPersonalizedAdvertising(walletPersonalizedAdvertising: Swift.Bool)
  @available(*, deprecated, renamed: "walletOwnerDataEnrichment", message: "Use walletOwnerDataEnrichment variable")
  public func getWalletOwnerDataEnrichment() -> Swift.Bool
  @available(*, deprecated, renamed: "walletOwnerDataEnrichment", message: "Use walletOwnerDataEnrichment variable")
  public func setWalletOwnerDataEnrichment(walletOwnerDataEnrichment: Swift.Bool)
  @available(*, deprecated, renamed: "walletDataEnrichment", message: "Use walletDataEnrichment variable")
  public func getWalletDataEnrichment() -> Swift.Bool
  @available(*, deprecated, renamed: "walletDataEnrichment", message: "Use walletDataEnrichment variable")
  public func setWalletDataEnrichment(walletDataEnrichment: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
public struct LimitPeriodTypesModel : Swift.Codable {
  public var limitPeriodTypeName: Swift.String?
  public var limitPeriodTypeId: Swift.Int?
  public var limitValues: [wallet_ios_sdk.LimitValuesModel]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class UpdateAccountSessionTimeInputParams : wallet_ios_sdk.BaseRequestModel {
  public var approval: Swift.Bool?
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CheckCustomerSecretQuestionAnswerInputParams : wallet_ios_sdk.BaseRequestModel {
  public var answer: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "answer", message: "Use answer variable")
  public func getAnswer() -> Swift.String
  @available(*, deprecated, renamed: "answer", message: "Use answer variable")
  public func setAnswer(answer: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CheckOnlinePaymentLimitInputParams : wallet_ios_sdk.BaseRequestModel {
  public var destinationAccountId: Swift.Int64?
  public var amount: Foundation.Decimal
  public var expenseAmount: Foundation.Decimal
  public var userValidationType: Swift.String?
  public var maskedCardNumber: Swift.String?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "maskedCardNumber", message: "Use maskedCardNumber variable")
  public func getMaskedCardNumber() -> Swift.String
  @available(*, deprecated, renamed: "maskedCardNumber", message: "Use maskedCardNumber variable")
  public func setMaskedCardNumber(maskedCardNumber: Swift.String)
  @available(*, deprecated, renamed: "destinationAccountId", message: "Use destinationAccountId variable")
  public func getDestinationAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "destinationAccountId", message: "Use destinationAccountId variable")
  public func setdDstinationAccountId(destinationAccountId: Swift.Int64)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "userValidationType", message: "Use userValidationType variable")
  public func getUserValidationType() -> Swift.String
  @available(*, deprecated, renamed: "userValidationType", message: "Use userValidationType variable")
  public func setUserValidationType(userValidationType: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerSecretQuestionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var question: wallet_ios_sdk.QuestionListModel?
  @available(*, deprecated, renamed: "question", message: "Use question variable")
  public func getQuestionList() -> wallet_ios_sdk.QuestionListModel
  @available(*, deprecated, renamed: "question", message: "Use question variable")
  public func setQuestionList(question: wallet_ios_sdk.QuestionListModel)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ConfirmAgreementInputParams : wallet_ios_sdk.BaseRequestModel {
  public var confirmAgreements: [wallet_ios_sdk.ConfirmAgreementListInputModel]
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "confirmAgreements", message: "Use confirmAgreements variable")
  public func getConfirmAgreementList() -> [wallet_ios_sdk.ConfirmAgreementListInputModel]
  @available(*, deprecated, renamed: "confirmAgreements", message: "Use confirmAgreements variable")
  public func setConfirmAgreementList(confirmAgreements: [wallet_ios_sdk.ConfirmAgreementListInputModel])
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceGetEpinDebtInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var packageList: [wallet_ios_sdk.PackageListModel]?
  public var gameList: [wallet_ios_sdk.GameListModel]?
  public var corporationName: Swift.String?
  public var subscriberReference: Swift.String?
  @available(*, deprecated, renamed: "corporationName", message: "Use corporationName variable")
  public func getCorporationName() -> Swift.String
  @available(*, deprecated, renamed: "corporationName", message: "Use corporationName variable")
  public func setCorporationName(corporationName: Swift.String)
  @available(*, deprecated, renamed: "subscriberReference", message: "Use subscriberReference variable")
  public func getSubscriberReference() -> Swift.String
  @available(*, deprecated, renamed: "subscriberReference", message: "Use subscriberReference variable")
  public func setSubscriberReference(subscriberReference: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TurkcellInvoiceInquiryOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerName: Swift.String
  public var parameters: [wallet_ios_sdk.InvoiceInquiryModel]
  public var institutionNumber: Swift.String
  public var institutionName: Swift.String
  public var invoices: [wallet_ios_sdk.TurkcellInvoiceInquiryModel]
  public func getCustomerName() -> Swift.String
  public func getInstitutionNumber() -> Swift.String
  public func getInstitutionName() -> Swift.String
  public func getParameters() -> [wallet_ios_sdk.InvoiceInquiryModel]
  public func getInvoices() -> [wallet_ios_sdk.TurkcellInvoiceInquiryModel]
  public func setCustomerName(customerName: Swift.String)
  public func setInstitutionNumber(institutionNumber: Swift.String)
  public func setInstitutionName(institutionName: Swift.String)
  public func setParameters(parameters: [wallet_ios_sdk.InvoiceInquiryModel])
  public func setInvoices(invoices: [wallet_ios_sdk.TurkcellInvoiceInquiryModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct JobListModel : Swift.Codable {
  public var id: Swift.String?, fieldKey: Swift.String?, typeId: Swift.String?
  public var isActive: Swift.Bool?
  public var statusId: Swift.Int?
  @available(*, deprecated, renamed: "id", message: "Use id variable")
  public func getId() -> Swift.String
  @available(*, deprecated, renamed: "id", message: "Use id variable")
  public mutating func setId(id: Swift.String)
  @available(*, deprecated, renamed: "fieldKey", message: "Use fieldKey variable")
  public func getFieldKey() -> Swift.String
  @available(*, deprecated, renamed: "fieldKey", message: "Use fieldKey variable")
  public mutating func setFieldKey(fieldKey: Swift.String)
  @available(*, deprecated, renamed: "typeId", message: "Use typeId variable")
  public func getTypeId() -> Swift.String
  @available(*, deprecated, renamed: "typeId", message: "Use typeId variable")
  public mutating func setTypeId(typeId: Swift.String)
  @available(*, deprecated, renamed: "isActive", message: "Use isActive variable")
  public func getIsActive() -> Swift.Bool
  @available(*, deprecated, renamed: "isActive", message: "Use isActive variable")
  public mutating func setIsActive(isActive: Swift.Bool)
  @available(*, deprecated, renamed: "statusId", message: "Use statusId variable")
  public func getStatusId() -> Swift.Int
  @available(*, deprecated, renamed: "statusId", message: "Use statusId variable")
  public mutating func setStatusId(statusId: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class DetailModel : Swift.Codable {
  public var processtype: Swift.Int?
  public var processDescription: Swift.String?
  public var amount: Swift.Double?
  public init(processtype: Swift.Int?, processDescription: Swift.String?, amount: Swift.Double?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct BuildingResultListModel : Swift.Codable {
  public var ada: Swift.String?
  public var kod: Swift.Int64?
  public var binaNo: Swift.Int?
  public var csbmKodu: Swift.Int?
  public var disKapiNo: Swift.String?
  public var esBinaKimlikNo: Swift.Int?
  public var esBinaKodu: Swift.Int64?
  public var parsel: Swift.String?
  public var yolAltiKatSayisi: Swift.Int?
  public var yolUstuKatSayisi: Swift.Int?
  public var binaDurum: wallet_ios_sdk.AdresTip?
  public var binaNumaratajTipi: wallet_ios_sdk.AdresTip?
  public var binaYapiTipi: wallet_ios_sdk.AdresTip?
  public var hataBilgisi: wallet_ios_sdk.AdresTip?
  @available(*, deprecated, renamed: "ada", message: "Use ada variable")
  public func getAda() -> Swift.String
  @available(*, deprecated, renamed: "ada", message: "Use ada variable")
  public mutating func setAda(ada: Swift.String)
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public func getKod() -> Swift.Int64
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public mutating func setKod(kod: Swift.Int64)
  @available(*, deprecated, renamed: "binaNo", message: "Use binaNo variable")
  public func getBinaNo() -> Swift.Int
  @available(*, deprecated, renamed: "binaNo", message: "Use binaNo variable")
  public mutating func setBinaNo(binaNo: Swift.Int)
  @available(*, deprecated, renamed: "csbmKodu", message: "Use csbmKodu variable")
  public func getCsbmKodu() -> Swift.Int
  @available(*, deprecated, renamed: "csbmKodu", message: "Use csbmKodu variable")
  public mutating func setCsbmKodu(csbmKodu: Swift.Int)
  @available(*, deprecated, renamed: "disKapiNo", message: "Use disKapiNo variable")
  public func getDisKapiNo() -> Swift.String
  @available(*, deprecated, renamed: "disKapiNo", message: "Use disKapiNo variable")
  public mutating func setDisKapiNo(disKapiNo: Swift.String)
  @available(*, deprecated, renamed: "esBinaKimlikNo", message: "Use esBinaKimlikNo variable")
  public func getEsBinaKimlikNo() -> Swift.Int
  @available(*, deprecated, renamed: "esBinaKimlikNo", message: "Use esBinaKimlikNo variable")
  public mutating func setEsBinaKimlikNo(esBinaKimlikNo: Swift.Int)
  @available(*, deprecated, renamed: "esBinaKodu", message: "Use esBinaKodu variable")
  public func getEsBinaKodu() -> Swift.Int64
  @available(*, deprecated, renamed: "esBinaKodu", message: "Use esBinaKodu variable")
  public mutating func setEsBinaKodu(esBinaKodu: Swift.Int64)
  @available(*, deprecated, renamed: "parsel", message: "Use parsel variable")
  public func getParsel() -> Swift.String
  @available(*, deprecated, renamed: "parsel", message: "Use parsel variable")
  public mutating func setParsel(parsel: Swift.String)
  @available(*, deprecated, renamed: "yolAltiKatSayisi", message: "Use yolAltiKatSayisi variable")
  public func getYolAltiKatSayisi() -> Swift.Int
  @available(*, deprecated, renamed: "yolAltiKatSayisi", message: "Use yolAltiKatSayisi variable")
  public mutating func setYolAltiKatSayisi(yolAltiKatSayisi: Swift.Int)
  @available(*, deprecated, renamed: "yolUstuKatSayisi", message: "Use yolUstuKatSayisi variable")
  public func getYolUstuKatSayisi() -> Swift.Int
  @available(*, deprecated, renamed: "yolUstuKatSayisi", message: "Use yolUstuKatSayisi variable")
  public mutating func setYolUstuKatSayisi(yolUstuKatSayisi: Swift.Int)
  @available(*, deprecated, renamed: "binaDurum", message: "Use binaDurum variable")
  public func getBinaDurum() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "binaDurum", message: "Use binaDurum variable")
  public mutating func setBinaDurum(binaDurum: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "binaNumaratajTipi", message: "Use binaNumaratajTipi variable")
  public func getBinaNumaratajTipi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "binaNumaratajTipi", message: "Use binaNumaratajTipi variable")
  public mutating func setBinaNumaratajTipi(binaNumaratajTipi: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "binaYapiTipi", message: "Use binaYapiTipi variable")
  public func getBinaYapiTipi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "binaYapiTipi", message: "Use binaYapiTipi variable")
  public mutating func setBinaYapiTipi(binaYapiTipi: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public func getHataBilgisi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public mutating func setHataBilgisi(hataBilgisi: wallet_ios_sdk.AdresTip)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetOpenConsentPreferencesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SplitTheBillListModel : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getDestinationPhone() -> Swift.String
  public func setDestinationPhone(destinationPhone: Swift.String)
  public func getAmount() -> Swift.Double
  public func setAmount(amount: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
public struct PendingOrderListModel : Swift.Codable {
  public var referenceNumber: Swift.Int64?
  public var amount: Swift.Double?
  public var sourceOwnerName: Swift.String?
  public var targetOwnerName: Swift.String?
  public var childCount: Swift.Int?
  public var description: Swift.String?
  public var actionTypeId: Swift.Int?
  public var actionTypeName: Swift.String?
  public var creaDate: Swift.String?
  @available(*, deprecated, renamed: "referenceNumber", message: "Use referenceNumber variable")
  public func getReferenceNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "referenceNumber", message: "Use referenceNumber variable")
  public mutating func setReferenceNumber(referenceNumber: Swift.Int64)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public mutating func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "sourceOwnerName", message: "Use sourceOwnerName variable")
  public func getSourceOwnerName() -> Swift.String
  @available(*, deprecated, renamed: "sourceOwnerName", message: "Use sourceOwnerName variable")
  public mutating func setSourceOwnerName(sourceOwnerName: Swift.String)
  @available(*, deprecated, renamed: "targetOwnerName", message: "Use targetOwnerName variable")
  public func getTargetOwnerName() -> Swift.String
  @available(*, deprecated, renamed: "targetOwnerName", message: "Use targetOwnerName variable")
  public mutating func setTargetOwnerName(targetOwnerName: Swift.String)
  @available(*, deprecated, renamed: "childCount", message: "Use childCount variable")
  public func getChildCount() -> Swift.Int
  @available(*, deprecated, renamed: "childCount", message: "Use childCount variable")
  public mutating func setChildCount(childCount: Swift.Int)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public mutating func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public func getActionTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "actionTypeId", message: "Use actionTypeId variable")
  public mutating func setActionTypeId(actionTypeId: Swift.Int)
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public func getCreaDate() -> Swift.String
  @available(*, deprecated, renamed: "creaDate", message: "Use creaDate variable")
  public mutating func setCreaDate(creaDate: Swift.String)
  @available(*, deprecated, renamed: "actionTypeName", message: "Use actionTypeName variable")
  public func getActionTypeName() -> Swift.String
  @available(*, deprecated, renamed: "actionTypeName", message: "Use actionTypeName variable")
  public mutating func setActionTypeName(actionTypeName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SecurityQuestionResetInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CheckEmailInputParams : wallet_ios_sdk.BaseRequestModel {
  public var countryCode: Swift.String
  public var phoneNumber: Swift.String
  public var emailAddress: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetExpensesInputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletCustomerSegmentId: Swift.Int16
  public var labelName: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getWalletCustomerSegmentId() -> Swift.Int16
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setWalletCustomerSegmentId(walletCustomerSegmentId: Swift.Int16)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getLabelName() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setLabelName(labelName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct WalletListModel : Swift.Codable {
  public var walletId: Swift.Int64?
  public var walletName: Swift.String?
  public var currencyId: Swift.Int?
  public var balance: Swift.Double?
  public var availableCashBalance: Swift.Double?, cashbackBalance: Swift.Double?
  public var isDefault: Swift.Bool?
  @available(*, deprecated, renamed: "walletId", message: "Use walletId variable")
  public func getWalletID() -> Swift.Int64
  @available(*, deprecated, renamed: "walletName", message: "Use walletName variable")
  public func getWalletName() -> Swift.String
  @available(*, deprecated, renamed: "currencyId", message: "Use currencyId variable")
  public func getCurrencyId() -> Swift.Int
  @available(*, deprecated, renamed: "balance", message: "Use balance variable")
  public func getBalance() -> Swift.Double
  @available(*, deprecated, renamed: "availableCashBalance", message: "Use availableCashBalance variable")
  public func getAvailableCashBalance() -> Swift.Double
  public func getCashbackBalance() -> Swift.Double
  public func getIsDefault() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EncDataResponseOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var encDataResponse: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct LimitSubTypesModel : Swift.Codable {
  public var limitSubTypeName: Swift.String?
  public var limitSubTypeId: Swift.Int?
  public var limitPeriodTypes: [wallet_ios_sdk.LimitPeriodTypesModel]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetFAQOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var faqDtos: [wallet_ios_sdk.FaqDtosModel]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct AddressTypesModel : Swift.Codable {
  public var name: Swift.String?
  public var value: Swift.String?
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public func getValue() -> Swift.String
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public mutating func setValue(value: Swift.String)
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public mutating func setName(name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SendMoneyToMyAccountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.String?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SupportInputParams : wallet_ios_sdk.BaseRequestModel {
  public var clientMailAddress: Swift.String
  public var subject: Swift.String
  public var body: Swift.String
  public var supportType: Swift.String
  public var fileName: Swift.String
  public var fileBase64Content: Swift.String
  public var clientPhoneNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "clientPhoneNumber", message: "Use clientPhoneNumber variable")
  public func getClientPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "clientPhoneNumber", message: "Use clientPhoneNumber variable")
  public func setClientPhoneNumber(clientPhoneNumber: Swift.String)
  @available(*, deprecated, renamed: "clientMailAddress", message: "Use clientMailAddress variable")
  public func getClientMailAddress() -> Swift.String
  @available(*, deprecated, renamed: "clientMailAddress", message: "Use clientMailAddress variable")
  public func setClientMailAddress(clientMailAddress: Swift.String)
  @available(*, deprecated, renamed: "subject", message: "Use subject variable")
  public func getSubject() -> Swift.String
  @available(*, deprecated, renamed: "subject", message: "Use subject variable")
  public func setSubject(subject: Swift.String)
  @available(*, deprecated, renamed: "body", message: "Use body variable")
  public func getBody() -> Swift.String
  @available(*, deprecated, renamed: "body", message: "Use body variable")
  public func setBody(body: Swift.String)
  @available(*, deprecated, renamed: "supportType", message: "Use supportType variable")
  public func getSupportType() -> Swift.String
  @available(*, deprecated, renamed: "supportType", message: "Use supportType variable")
  public func setSupportType(supportType: Swift.String)
  @available(*, deprecated, renamed: "fileName", message: "Use fileName variable")
  public func getFileName() -> Swift.String
  @available(*, deprecated, renamed: "fileName", message: "Use fileName variable")
  public func setFileName(FileName: Swift.String)
  @available(*, deprecated, renamed: "fileBase64Content", message: "Use fileBase64Content variable")
  public func getFileBase64Content() -> Swift.String
  @available(*, deprecated, renamed: "fileBase64Content", message: "Use fileBase64Content variable")
  public func setFileBase64Content(FileBase64Content: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PhoneNumberUpdateOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class VerifyOTPInputParams : wallet_ios_sdk.BaseRequestModel {
  public var otpCode: Swift.String
  public var phone: Swift.String
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetCustomerSegmentsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetFAQInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  public var randomNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddCustomerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var accountId: Swift.Int64?
  public var gender: Swift.Int?
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func setAccountId(accountId: Swift.Int64)
  @available(*, deprecated, renamed: "gender", message: "Use gender variable")
  public func getGender() -> Swift.Int
  @available(*, deprecated, renamed: "gender", message: "Use gender variable")
  public func setGender(gender: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MasterpassPaymentInputParams : wallet_ios_sdk.BaseRequestModel {
  public var amount: Foundation.Decimal
  public var expenseAmount: Foundation.Decimal
  public var AuthenticationMethod: Swift.String
  public var destinationAccountId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "AuthenticationMethod", message: "Use AuthenticationMethod variable")
  public func getAuthenticationMethod() -> Swift.String
  @available(*, deprecated, renamed: "AuthenticationMethod", message: "Use AuthenticationMethod variable")
  public func setAuthenticationMethod(AuthenticationMethod: Swift.String)
  @available(*, deprecated, renamed: "DestinationAccountId", message: "Use DestinationAccountId variable")
  public func getDestinationAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "DestinationAccountId", message: "Use DestinationAccountId variable")
  public func setDestinationAccountId(destinationAccountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetCustomerLimitInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceGetDebtInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var debtList: [wallet_ios_sdk.DebtListModel]?
  public var subscriberFullNameLabel: Swift.String?
  public var debtInqOprRefNo: Swift.String?
  public var invoiceBasedCollection: Swift.String?
  public var partialCollectionAllowed: Swift.String?
  public var invoiceNumberLabel: Swift.String?
  public var lastPaymentDateLabel: Swift.String?
  public var corporationName: Swift.String?
  public var subscriberReference: Swift.String?
  public var subscriberFullName: Swift.String?
  public var maskedSubscriberFullName: Swift.String?
  public var invoiceAmountLabel: Swift.String?
  @available(*, deprecated, renamed: "debtList", message: "Use debtList variable")
  public func getDebtList() -> [wallet_ios_sdk.DebtListModel]
  @available(*, deprecated, renamed: "debtList", message: "Use debtList variable")
  public func setDebtList(debtList: [wallet_ios_sdk.DebtListModel])
  @available(*, deprecated, renamed: "subscriberFullNameLabel", message: "Use subscriberFullNameLabel variable")
  public func getSubscriberFullNameLabel() -> Swift.String
  @available(*, deprecated, renamed: "subscriberFullNameLabel", message: "Use subscriberFullNameLabel variable")
  public func setSubscriberFullNameLabel(subscriberFullNameLabel: Swift.String)
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public func getDebtInqOprRefNo() -> Swift.String
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public func setDebtInqOprRefNo(debtInqOprRefNo: Swift.String)
  @available(*, deprecated, renamed: "invoiceBasedCollection", message: "Use invoiceBasedCollection variable")
  public func getInvoiceBasedCollection() -> Swift.String
  @available(*, deprecated, renamed: "invoiceBasedCollection", message: "Use invoiceBasedCollection variable")
  public func setInvoiceBasedCollection(invoiceBasedCollection: Swift.String)
  @available(*, deprecated, renamed: "partialCollectionAllowed", message: "Use partialCollectionAllowed variable")
  public func getPartialCollectionAllowed() -> Swift.String
  @available(*, deprecated, renamed: "partialCollectionAllowed", message: "Use partialCollectionAllowed variable")
  public func setPartialCollectionAllowed(partialCollectionAllowed: Swift.String)
  @available(*, deprecated, renamed: "invoiceNumberLabel", message: "Use invoiceNumberLabel variable")
  public func getInvoiceNumberLabel() -> Swift.String
  @available(*, deprecated, renamed: "invoiceNumberLabel", message: "Use invoiceNumberLabel variable")
  public func setInvoiceNumberLabel(invoiceNumberLabel: Swift.String)
  @available(*, deprecated, renamed: "lastPaymentDateLabel", message: "Use lastPaymentDateLabel variable")
  public func getLastPaymentDateLabel() -> Swift.String
  @available(*, deprecated, renamed: "lastPaymentDateLabel", message: "Use lastPaymentDateLabel variable")
  public func setLastPaymentDateLabel(lastPaymentDateLabel: Swift.String)
  @available(*, deprecated, renamed: "corporationName", message: "Use corporationName variable")
  public func getCorporationName() -> Swift.String
  @available(*, deprecated, renamed: "corporationName", message: "Use corporationName variable")
  public func setCorporationName(corporationName: Swift.String)
  @available(*, deprecated, renamed: "subscriberReference", message: "Use subscriberReference variable")
  public func getSubscriberReference() -> Swift.String
  @available(*, deprecated, renamed: "subscriberReference", message: "Use subscriberReference variable")
  public func setSubscriberReference(subscriberReference: Swift.String)
  @available(*, deprecated, renamed: "subscriberFullName", message: "Use subscriberFullName variable")
  public func getSubscriberFullName() -> Swift.String
  @available(*, deprecated, renamed: "subscriberFullName", message: "Use subscriberFullName variable")
  public func setSubscriberFullName(subscriberFullName: Swift.String)
  @available(*, deprecated, renamed: "maskedSubscriberFullName", message: "Use maskedSubscriberFullName variable")
  public func getMaskedSubscriberFullName() -> Swift.String
  @available(*, deprecated, renamed: "maskedSubscriberFullName", message: "Use maskedSubscriberFullName variable")
  public func setMaskedSubscriberFullName(maskedSubscriberFullName: Swift.String)
  @available(*, deprecated, renamed: "invoiceAmountLabel", message: "Use invoiceAmountLabel variable")
  public func getInvoiceAmountLabel() -> Swift.String
  @available(*, deprecated, renamed: "invoiceAmountLabel", message: "Use invoiceAmountLabel variable")
  public func setInvoiceAmountLabel(invoiceAmountLabel: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Engine {
  public var isLoggingActivated: Swift.Bool
  public func isSSLPinningEnabled() -> Swift.Bool
  public func Notify(notifyInputParams: wallet_ios_sdk.NotifyInputParams, completion: @escaping (_ result: wallet_ios_sdk.NotifyOutputParams) -> ())
  public func notifyV2(notifyInputParams: wallet_ios_sdk.InitParam, _ value: Swift.String, completion: @escaping (_ result: wallet_ios_sdk.InitResponse) -> ())
  public func engineInitV5(initParam: wallet_ios_sdk.InitParam, completion: @escaping (_ result: wallet_ios_sdk.InitResponse) -> ())
  public func getUniqueMPANumber() -> Swift.String
  public func createUniqueMPANumber()
  public func setUniqueMPANumber(unique: Swift.String)
  public func setRandomNumber(random: Swift.String)
  public func getRandomNumber() -> Swift.String
  public func createMPAPublicKey()
  public func getMpaFingerprint() -> Swift.String
  public func setClientRandomNumber(ClientRandomNumber: Swift.String)
  public func getClientRandomNumber() -> Swift.String
  public func setMessageCount()
  public func getMessageCount() -> Swift.String
  public func createMpaFingerprint()
  public func createMpaFingerprintTemp()
  public func setMpaFingerPrint(fingerPrint: Swift.String)
  public func GetGUID() -> Swift.String
  public func refreshGUID()
  public func createSecureRandomNumber() -> Swift.String
  public func readingMpaNumber(mpaNumber: Swift.String) -> Swift.String
  public func writingMpaNumber(mpaNumber: Swift.String) -> Swift.String
  public func readingOldCusNumber() -> Swift.String
  public func readingCusNumber(cusNumber: Swift.String) -> Swift.String
  public func writingCusNumber(cusNumber: Swift.String) -> Swift.String
  public func getSuccesLogin() -> Swift.Bool
  public static func setSuccessLogin()
  public func readingUserDefaults() -> Swift.String
  public func writingUserDefaults() -> Swift.String
  @available(iOS 12.0, *)
  public func fetchAndSetPublicIP(completion: @escaping (Swift.Bool) -> ())
  public func setRemoteIpAddress(_ ip: Swift.String)
  public func getRemoteIpAddress() -> Swift.String
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BaseCardView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func initView(view: wallet_ios_sdk.CardView)
  @_Concurrency.MainActor @preconcurrency public func getCardView() -> wallet_ios_sdk.CardView
  @objc deinit
}
public struct CustomerRemainingLimitsModel : Swift.Codable {
  public var status: Swift.Int?
  public var key: Swift.String?
  public var value: Swift.Double?
  public var description: Swift.String?
  public var visible: Swift.Bool?
  public var limitValueTypeId: Swift.Int?
  @available(*, deprecated, renamed: "status", message: "Use status variable")
  public func getStatus() -> Swift.Int
  @available(*, deprecated, renamed: "status", message: "Use status variable")
  public mutating func setStatus(status: Swift.Int)
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public func getKey() -> Swift.String
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public mutating func setKey(key: Swift.String)
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public func getValue() -> Swift.Double
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public mutating func setValue(value: Swift.Double)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public mutating func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public func getVisible() -> Swift.Bool
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public mutating func setVisible(visible: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CancelAskForMoneyInputParams : wallet_ios_sdk.BaseRequestModel {
  public var askForMoneyId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "askForMoneyId", message: "Use askForMoneyId variable")
  public func getAskForMoneyId() -> Swift.Int64
  @available(*, deprecated, renamed: "askForMoneyId", message: "Use askForMoneyId variable")
  public func setAskForMoneyId(askForMoneyId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetAllStreetWithVillageCodeInKpsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var villageCode: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "villageCode", message: "Use villageCode variable")
  public func getVillageCode() -> Swift.Int
  @available(*, deprecated, renamed: "villageCode", message: "Use villageCode variable")
  public func setVillageCode(villageCode: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerifyCustomerByKpsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetWalletCardInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var CardCustomerName: Swift.String?
  public var CardNumber: Swift.String?
  public var CardCvv: Swift.String?
  public var CardExpireDate: Swift.String?
  public var CardBrand: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BankAccountUpdateOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoicePrepaidPaymentConfirmMessageOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.String?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCardBinInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var cardType: Swift.String?
  public var cardBrand: Swift.String?
  public var eftCode: Swift.String?
  public var issuerBankName: Swift.String?
  public var countryCode: Swift.String?
  public var regionCode: Swift.String?
  public var cardDomain: Swift.String?
  public var cardHolderBillingCurrency: Swift.String?
  public var moneySendIndicator: Swift.String?
  @available(*, deprecated, renamed: "cardType", message: "Use cardType variable")
  public func getCardType() -> Swift.String
  @available(*, deprecated, renamed: "cardType", message: "Use cardType variable")
  public func setCardType(cardType: Swift.String)
  @available(*, deprecated, renamed: "cardBrand", message: "Use cardBrand variable")
  public func getCardBrand() -> Swift.String
  @available(*, deprecated, renamed: "cardBrand", message: "Use cardBrand variable")
  public func setCardBrand(cardBrand: Swift.String)
  @available(*, deprecated, renamed: "eftCode", message: "Use eftCode variable")
  public func getEftCode() -> Swift.String
  @available(*, deprecated, renamed: "eftCode", message: "Use eftCode variable")
  public func setEftCode(eftCode: Swift.String)
  @available(*, deprecated, renamed: "issuerBankName", message: "Use issuerBankName variable")
  public func getIssuerBankName() -> Swift.String
  @available(*, deprecated, renamed: "issuerBankName", message: "Use issuerBankName variable")
  public func setIssuerBankName(issuerBankName: Swift.String)
  @available(*, deprecated, renamed: "countryCode", message: "Use countryCode variable")
  public func getCountryCode() -> Swift.String
  @available(*, deprecated, renamed: "countryCode", message: "Use countryCode variable")
  public func setCountryCode(countryCode: Swift.String)
  @available(*, deprecated, renamed: "regionCode", message: "Use regionCode variable")
  public func getRegionCode() -> Swift.String
  @available(*, deprecated, renamed: "regionCode", message: "Use regionCode variable")
  public func setRegionCode(regionCode: Swift.String)
  @available(*, deprecated, renamed: "cardDomain", message: "Use cardDomain variable")
  public func getCardDomain() -> Swift.String
  @available(*, deprecated, renamed: "cardDomain", message: "Use cardDomain variable")
  public func setCardDomain(cardDomain: Swift.String)
  @available(*, deprecated, renamed: "cardHolderBillingCurrency", message: "Use cardHolderBillingCurrency variable")
  public func getCardHolderBillingCurrency() -> Swift.String
  @available(*, deprecated, renamed: "cardHolderBillingCurrency", message: "Use cardHolderBillingCurrency variable")
  public func setCardHolderBillingCurrency(cardHolderBillingCurrency: Swift.String)
  @available(*, deprecated, renamed: "moneySendIndicator", message: "Use moneySendIndicator variable")
  public func getMoneySendIndicator() -> Swift.String
  @available(*, deprecated, renamed: "moneySendIndicator", message: "Use moneySendIndicator variable")
  public func setMoneySendIndicator(moneySendIndicator: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func dgFinGetCustomer(dgFinGetCustomerInputParams: wallet_ios_sdk.DgFinGetCustomerInputParams, completion: @escaping (_ result: wallet_ios_sdk.DgFinGetCustomerOutputParams) -> ())
  public func dgFinGetCustomerInfoGsm(dgFinGetCustomerInputParams: wallet_ios_sdk.DgFinGetCustomerInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCustomerInfoOutputParams) -> ())
  public func dgFinGetToken(dgFinGetTokenInputParams: wallet_ios_sdk.DgFinGetTokenInputParams, completion: @escaping (_ result: wallet_ios_sdk.DgFinGetTokenOutputParams) -> ())
  public func dgFinGetTokenLoanCreate(dgFinGetTokenLoanCreateInputParams: wallet_ios_sdk.DgFinGetTokenLoanCreateInputParams, completion: @escaping (_ result: wallet_ios_sdk.DgFinGetTokenLoanCreateOutputParams) -> ())
}
public struct TypesModel : Swift.Codable {
  public var typeNumber: Swift.String?
  public var typeName: Swift.String?
  public init()
  public func geTypeNumber() -> Swift.String
  public func getTypeName() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetWalletVirtualCardTxnsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var totalCount: Swift.Int?
  public var accountActionList: [wallet_ios_sdk.AccountActionListModel]?
  @available(*, deprecated, renamed: "totalCount", message: "Use totalCount variable")
  public func getTotalCount() -> Swift.Int
  @available(*, deprecated, renamed: "totalCount", message: "Use totalCount variable")
  public func setTotalCount(totalCount: Swift.Int)
  @available(*, deprecated, renamed: "accountActionList", message: "Use accountActionList variable")
  public func getAccountActionList() -> [wallet_ios_sdk.AccountActionListModel]
  @available(*, deprecated, renamed: "accountActionList", message: "Use accountActionList variable")
  public func setAccountActionList(accountActionList: [wallet_ios_sdk.AccountActionListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Meta : Swift.Codable {
  public init()
  public init(_ method: Swift.Int, _ responseCode: Swift.Int, responseMessage: Swift.String, trace: Swift.String, proecessRef: Swift.String)
  public func getMethod() -> Swift.Int
  public func setMethod(_ method: Swift.Int)
  public func getResponseCode() -> Swift.Int
  public func setResponseCode(_ responseCode: Swift.Int)
  public func getResponseMessage() -> Swift.String
  public func setResponseMessage(_ responseMessage: Swift.String)
  public func getTrace() -> Swift.String
  public func setTrace(_ trace: Swift.String)
  public func getProcessRef() -> Swift.String
  public func setProcessRef(_ processRef: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetLimitDefinitionInputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletCustomerSegmentId: Swift.Int16
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "walletCustomerSegmentId", message: "Use walletCustomerSegmentId variable")
  public func getWalletCustomerSegmentId() -> Swift.Int16
  @available(*, deprecated, renamed: "walletCustomerSegmentId", message: "Use walletCustomerSegmentId variable")
  public func setWalletCustomerSegmentId(walletCustomerSegmentId: Swift.Int16)
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerLimitInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var monthlyAtmWithdrawAmount: Swift.Double?
  public var monthlyPaymentAmount: Swift.Double?
  public var monthlyAtmWithdrawAmountControlEnabled: Swift.Bool?
  public var monthlyPaymentAmountControlEnabled: Swift.Bool?
  @available(*, deprecated, renamed: "monthlyAtmWithdrawAmount", message: "Use monthlyAtmWithdrawAmount variable")
  public func getMonthlyAtmWithdrawAmount() -> Swift.Double
  @available(*, deprecated, renamed: "monthlyAtmWithdrawAmount", message: "Use monthlyAtmWithdrawAmount variable")
  public func setMonthlyAtmWithdrawAmount(monthlyAtmWithdrawAmount: Swift.Double)
  @available(*, deprecated, renamed: "monthlyPaymentAmount", message: "Use monthlyPaymentAmount variable")
  public func getMonthlyPaymentAmount() -> Swift.Double
  @available(*, deprecated, renamed: "monthlyPaymentAmount", message: "Use monthlyPaymentAmount variable")
  public func setMonthlyPaymentAmount(monthlyPaymentAmount: Swift.Double)
  @available(*, deprecated, renamed: "monthlyAtmWithdrawAmountControlEnabled", message: "Use monthlyAtmWithdrawAmountControlEnabled variable")
  public func getMonthlyAtmWithdrawAmountControlEnabled() -> Swift.Bool
  @available(*, deprecated, renamed: "monthlyAtmWithdrawAmountControlEnabled", message: "Use monthlyAtmWithdrawAmountControlEnabled variable")
  public func setMonthlyAtmWithdrawAmount(monthlyAtmWithdrawAmountControlEnabled: Swift.Bool)
  @available(*, deprecated, renamed: "monthlyPaymentAmountControlEnabled", message: "Use monthlyPaymentAmountControlEnabled variable")
  public func getMonthlyPaymentAmountControlEnabled() -> Swift.Bool
  @available(*, deprecated, renamed: "monthlyPaymentAmountControlEnabled", message: "Use monthlyPaymentAmountControlEnabled variable")
  public func setMonthlyPaymentAmountControlEnabled(monthlyPaymentAmountControlEnabled: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getQrInfoInterface(getQrInfoInputParams: wallet_ios_sdk.GetQrInfoInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetQrInfoOutputParams) -> ())
  public func startQrTransactionInterface(startQrTransactionInputParams: wallet_ios_sdk.StartQrTransactionInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetWalletVirtualCardTxnsDailyByAccountIdOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var txns: [wallet_ios_sdk.GetWalletVirtualCardTxnsDailyByAccountIdModel]?
  @available(*, deprecated, renamed: "txns", message: "Use txns variable")
  public func geTxns() -> [wallet_ios_sdk.GetWalletVirtualCardTxnsDailyByAccountIdModel]
  @available(*, deprecated, renamed: "txns", message: "Use txns variable")
  public func setTxns(txns: [wallet_ios_sdk.GetWalletVirtualCardTxnsDailyByAccountIdModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getBalanceExpenseAmount(getBalanceExpenseAmountInputParams: wallet_ios_sdk.BalanceGetExpenseAmountInputParams, completion: @escaping (_ result: wallet_ios_sdk.BalanceGetExpenseAmountOutputParams) -> ())
  public func paymentWalletMobile(paymentWalletMobileInputParams: wallet_ios_sdk.PaymentWalletMobileInputParams, completion: @escaping (_ result: wallet_ios_sdk.PaymentWalletMobileOutputParams) -> ())
  public func topupPayStart(topupPayStartInputParams: wallet_ios_sdk.TopupPayStartInputParams, completion: @escaping (_ result: wallet_ios_sdk.TopupPayStartOutputParams) -> ())
  public func topupPayCommit(topupPayCommitInputParams: wallet_ios_sdk.TopupPayCommitInputParams, completion: @escaping (_ result: wallet_ios_sdk.TopupPayCommitOutputParams) -> ())
  public func getMasterpassConfig(getMasterpassConfigInputParams: wallet_ios_sdk.GetMasterpassConfigInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetMasterpassConfigOutputParams) -> ())
}
@objc @_inheritsConvenienceInitializers public class KpsAddressInquiryInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetResponseMessagesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var responseMessagesList: [wallet_ios_sdk.ResponseMessagesListModel]?
  @available(*, deprecated, renamed: "responseMessagesList", message: "Use responseMessagesList variable")
  public func getResponseMessagesList() -> [wallet_ios_sdk.ResponseMessagesListModel]
  @available(*, deprecated, renamed: "responseMessagesList", message: "Use responseMessagesList variable")
  public func setResponseMessagesList(responseMessagesList: [wallet_ios_sdk.ResponseMessagesListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CustomOtpVerificationOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SetPasswordAndSecretQuestionAnswerInputParams : wallet_ios_sdk.BaseRequestModel {
  public var password: Swift.String
  public var questionId: Swift.String
  public var answer: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TopupPayStartOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var token: Swift.String?, orderId: Swift.String?
  public var amountWallet: Swift.Double?, amountCard: Swift.Double?
  public var cardExpense: Swift.Double?
  public var cashExpense: Swift.Double?
  public var cashbackExpense: Swift.Double?
  @available(*, deprecated, renamed: "cardExpense", message: "Use cardExpense variable")
  public func getCardExpense() -> Swift.Double
  @available(*, deprecated, renamed: "cardExpense", message: "Use cardExpense variable")
  public func setCardExpense(cardExpense: Swift.Double)
  @available(*, deprecated, renamed: "cashExpense", message: "Use cashExpense variable")
  public func getCashExpense() -> Swift.Double
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func getToken() -> Swift.String
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func setToken(token: Swift.String)
  @available(*, deprecated, renamed: "orderID", message: "Use orderID variable")
  public func getOrderID() -> Swift.String
  @available(*, deprecated, renamed: "orderID", message: "Use orderID variable")
  public func setOrderID(orderID: Swift.String)
  @available(*, deprecated, renamed: "amountWallet", message: "Use amountWallet variable")
  public func getAmountWallet() -> Swift.Double
  @available(*, deprecated, renamed: "amountWallet", message: "Use amountWallet variable")
  public func setAmountWallet(amountWallet: Swift.Double)
  @available(*, deprecated, renamed: "amountCard", message: "Use amountCard variable")
  public func getAmountCard() -> Swift.Double
  @available(*, deprecated, renamed: "amountCard", message: "Use amountCard variable")
  public func setAmountCard(amountCard: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SupportOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MasterpassPaymentOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var MasterpassToken: Swift.String?
  public var orderId: Swift.String?
  @available(*, deprecated, renamed: "MasterpassToken", message: "Use MasterpassToken variable")
  public func getMasterpassToken() -> Swift.String
  @available(*, deprecated, renamed: "MasterpassToken", message: "Use MasterpassToken variable")
  public func setMasterpassToken(MasterpassToken: Swift.String)
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func setOrderId(orderId: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetWalletCardInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getCardToken() -> Swift.String
  public func setCardToken(cardToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct MerchantCategoryListModel : Swift.Codable {
  public var code: Swift.Int?
  public var name: Swift.String?
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public func getCode() -> Swift.Int
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public mutating func setCode(code: Swift.Int)
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public mutating func setName(name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VillageResultListModel : Swift.Codable {
  public var ad: Swift.String?
  public var bucakAdi: Swift.String?
  public var bucakKimlikNo: Swift.Int?
  public var ilceKimlikNo: Swift.Int?
  public var isMerkezBucak: Swift.Bool?
  public var isMerkezKoy: Swift.Bool?
  public var kimlikNo: Swift.Int?
  public var koyAdi: Swift.String?
  public var koyKimlikNo: Swift.Int64?
  public var koyKurumKayitNo: Swift.Int?
  public var koyKurumKysKod: Swift.String?
  public var koyKurumUstKayitNo: Swift.Int?
  public var koyKurumUstKysKod: Swift.String?
  public var mahalleKurumKayitNo: Swift.Int?
  public var mahalleKurumKysKod: Swift.String?
  public var mahalleKurumUstKayitNo: Swift.Int?
  public var mahalleKurumUstKysKod: Swift.String?
  public var sabitTanitimNumarasi: Swift.Int?
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public func getAd() -> Swift.String
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public mutating func setAd(ad: Swift.String)
  @available(*, deprecated, renamed: "bucakAdi", message: "Use bucakAdi variable")
  public func getBucakAdi() -> Swift.String
  @available(*, deprecated, renamed: "bucakAdi", message: "Use bucakAdi variable")
  public mutating func setBucakAdi(bucakAdi: Swift.String)
  @available(*, deprecated, renamed: "bucakKimlikNo", message: "Use bucakKimlikNo variable")
  public func getBucakKimlikNo() -> Swift.Int
  @available(*, deprecated, renamed: "bucakKimlikNo", message: "Use bucakKimlikNo variable")
  public mutating func setBucakKimlikNo(bucakKimlikNo: Swift.Int)
  @available(*, deprecated, renamed: "ilceKimlikNo", message: "Use ilceKimlikNo variable")
  public func getIlceKimlikNo() -> Swift.Int
  @available(*, deprecated, renamed: "ilceKimlikNo", message: "Use ilceKimlikNo variable")
  public mutating func setIlceKimlikNo(ilceKimlikNo: Swift.Int)
  @available(*, deprecated, renamed: "isMerkezBucak", message: "Use isMerkezBucak variable")
  public func getIsMerkezBucak() -> Swift.Bool
  @available(*, deprecated, renamed: "isMerkezBucak", message: "Use isMerkezBucak variable")
  public mutating func setIsMerkezBucak(isMerkezBucak: Swift.Bool)
  @available(*, deprecated, renamed: "isMerkezKoy", message: "Use isMerkezKoy variable")
  public func getIsMerkezKoy() -> Swift.Bool
  @available(*, deprecated, renamed: "isMerkezKoy", message: "Use isMerkezKoy variable")
  public mutating func setIsMerkezKoy(isMerkezKoy: Swift.Bool)
  @available(*, deprecated, renamed: "kimlikNo", message: "Use kimlikNo variable")
  public func getKimlikNo() -> Swift.Int
  @available(*, deprecated, renamed: "kimlikNo", message: "Use kimlikNo variable")
  public mutating func setKimlikNo(kimlikNo: Swift.Int)
  @available(*, deprecated, renamed: "koyAdi", message: "Use koyAdi variable")
  public func getKoyAdi() -> Swift.String
  @available(*, deprecated, renamed: "koyAdi", message: "Use koyAdi variable")
  public mutating func setKoyAdi(koyAdi: Swift.String)
  @available(*, deprecated, renamed: "koyKimlikNo", message: "Use koyKimlikNo variable")
  public func getKoyKimlikNo() -> Swift.Int64
  @available(*, deprecated, renamed: "koyKimlikNo", message: "Use koyKimlikNo variable")
  public mutating func setKoyKimlikNo(koyKimlikNo: Swift.Int64)
  @available(*, deprecated, renamed: "koyKurumKayitNo", message: "Use koyKurumKayitNo variable")
  public func getKoyKurumKayitNo() -> Swift.Int
  @available(*, deprecated, renamed: "koyKurumKayitNo", message: "Use koyKurumKayitNo variable")
  public mutating func setKoyKurumKayitNo(koyKurumKayitNo: Swift.Int)
  @available(*, deprecated, renamed: "koyKurumKysKod", message: "Use koyKurumKysKod variable")
  public func getKoyKurumKysKod() -> Swift.String
  @available(*, deprecated, renamed: "koyKurumKysKod", message: "Use koyKurumKysKod variable")
  public mutating func setKoyKurumKysKod(koyKurumKysKod: Swift.String)
  @available(*, deprecated, renamed: "koyKurumUstKayitNo", message: "Use koyKurumUstKayitNo variable")
  public func getKoyKurumUstKayitNo() -> Swift.Int
  @available(*, deprecated, renamed: "koyKurumUstKayitNo", message: "Use koyKurumUstKayitNo variable")
  public mutating func setKoyKurumUstKayitNo(koyKurumUstKayitNo: Swift.Int)
  @available(*, deprecated, renamed: "koyKurumUstKysKod", message: "Use koyKurumUstKysKod variable")
  public func getkoyKurumUstKysKod() -> Swift.String
  @available(*, deprecated, renamed: "koyKurumUstKysKod", message: "Use koyKurumUstKysKod variable")
  public mutating func setkoyKurumUstKysKod(koyKurumUstKysKod: Swift.String)
  @available(*, deprecated, renamed: "mahalleKurumKayitNo", message: "Use mahalleKurumKayitNo variable")
  public func getMahalleKurumKayitNo() -> Swift.Int
  @available(*, deprecated, renamed: "mahalleKurumKayitNo", message: "Use mahalleKurumKayitNo variable")
  public mutating func setMahalleKurumKayitNo(mahalleKurumKayitNo: Swift.Int)
  @available(*, deprecated, renamed: "mahalleKurumKysKod", message: "Use mahalleKurumKysKod variable")
  public func getMahalleKurumKysKod() -> Swift.String
  @available(*, deprecated, renamed: "mahalleKurumKysKod", message: "Use mahalleKurumKysKod variable")
  public mutating func setMahalleKurumKysKod(mahalleKurumKysKod: Swift.String)
  @available(*, deprecated, renamed: "mahalleKurumUstKayitNo", message: "Use mahalleKurumUstKayitNo variable")
  public func getMahalleKurumUstKayitNo() -> Swift.Int
  @available(*, deprecated, renamed: "mahalleKurumUstKayitNo", message: "Use mahalleKurumUstKayitNo variable")
  public mutating func setMahalleKurumUstKayitNo(mahalleKurumUstKayitNo: Swift.Int)
  @available(*, deprecated, renamed: "mahalleKurumUstKysKod", message: "Use mahalleKurumUstKysKod variable")
  public func getMahalleKurumUstKysKod() -> Swift.String
  @available(*, deprecated, renamed: "mahalleKurumUstKysKod", message: "Use mahalleKurumUstKysKod variable")
  public mutating func setMahalleKurumUstKysKod(mahalleKurumUstKysKod: Swift.String)
  @available(*, deprecated, renamed: "sabitTanitimNumarasi", message: "Use sabitTanitimNumarasi variable")
  public func getSabitTanitimNumarasi() -> Swift.Int
  @available(*, deprecated, renamed: "sabitTanitimNumarasi", message: "Use sabitTanitimNumarasi variable")
  public mutating func setSabitTanitimNumarasi(sabitTanitimNumarasi: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InitialInputParams : wallet_ios_sdk.BaseRequestModel {
  public var applicationVersion: Swift.String
  public var languageCode: Swift.String
  public var osType: Swift.String
  public var randomNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "applicationVersion", message: "Use applicationVersion variable")
  public func getApplicationVersion() -> Swift.String
  @available(*, deprecated, renamed: "applicationVersion", message: "Use applicationVersion variable")
  public func setApplicationVersion(applicationVersion: Swift.String)
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @available(*, deprecated, renamed: "osType", message: "Use osType variable")
  public func getOsType() -> Swift.String
  @available(*, deprecated, renamed: "osType", message: "Use osType variable")
  public func setOsType(osType: Swift.String)
  @available(*, deprecated, renamed: "randomNumber", message: "Use randomNumber variable")
  public func getRandomNumber() -> Swift.String
  @available(*, deprecated, renamed: "randomNumber", message: "Use randomNumber variable")
  public func setRandomNumber(randomNumber: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BalanceInquiryInputParams : wallet_ios_sdk.BaseRequestModel {
  public var accountId: Swift.Int64
  public var currencyId: Swift.Int16
  override public func encode(to encoder: any Swift.Encoder) throws
  public func setAccountId(accountId: Swift.Int64)
  public func setCurrencyId(currencyId: Swift.Int16)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PhoneNumberUpdateInputParams : wallet_ios_sdk.BaseRequestModel {
  public var secretAnswer: Swift.String
  public var newPhoneNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "secretAnswer", message: "Use secretAnswer variable")
  public func getSecretAnswer() -> Swift.String
  @available(*, deprecated, renamed: "secretAnswer", message: "Use secretAnswer variable")
  public func setSecretAnswer(secretAnswer: Swift.String)
  @available(*, deprecated, renamed: "newPhoneNumber", message: "Use newPhoneNumber variable")
  public func getNewPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "newPhoneNumber", message: "Use newPhoneNumber variable")
  public func setNewPhoneNumber(newPhoneNumber: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAddressTypesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var addressTypes: [wallet_ios_sdk.AddressTypesModel]?
  @available(*, deprecated, renamed: "addressTypes", message: "Use addressTypes variable")
  public func getAddressTypes() -> [wallet_ios_sdk.AddressTypesModel]
  @available(*, deprecated, renamed: "addressTypes", message: "Use addressTypes variable")
  public func setAddressTypes(addressTypes: [wallet_ios_sdk.AddressTypesModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetInstrumentsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customer: wallet_ios_sdk.CustomerData?
  public var walletId: Swift.String?
  public var defaultBankAccountName: Swift.String?
  public var defaultBankAccountNumber: Swift.String?
  public var lastUsedStoredCardId: Swift.String?
  @available(*, deprecated, renamed: "defaultBankAccountNumber", message: "Use defaultBankAccountNumber variable")
  public func getDefaultBankAccountNumber() -> Swift.String
  @available(*, deprecated, renamed: "defaultBankAccountNumber", message: "Use defaultBankAccountNumber variable")
  public func setDefaultBankAccountNumber(defaultBankAccountNumber: Swift.String)
  @available(*, deprecated, renamed: "defaultBankAccountName", message: "Use defaultBankAccountName variable")
  public func getDefaultBankAccountName() -> Swift.String
  @available(*, deprecated, renamed: "defaultBankAccountName", message: "Use defaultBankAccountName variable")
  public func setDefaultBankAccountName(defaultBankAccountName: Swift.String)
  @available(*, deprecated, renamed: "walletId", message: "Use walletId variable")
  public func getWalletId() -> Swift.String
  @available(*, deprecated, renamed: "walletId", message: "Use walletId variable")
  public func setWalletId(walletId: Swift.String)
  @available(*, deprecated, renamed: "lastUsedStoredCardId", message: "Use lastUsedStoredCardId variable")
  public func getLastUsedStoredCardId() -> Swift.String
  @available(*, deprecated, renamed: "lastUsedStoredCardId", message: "Use lastUsedStoredCardId variable")
  public func setLastUsedStoredCardId(lastUsedStoredCardId: Swift.String)
  @available(*, deprecated, renamed: "customer", message: "Use customer variable")
  public func getCustomerData() -> wallet_ios_sdk.CustomerData
  @available(*, deprecated, renamed: "customer", message: "Use customer variable")
  public func setCustomerData(CustomerData: wallet_ios_sdk.CustomerData)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StartQrTransactionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoicePrepaidPaymentConfirmMessageInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phoneNumber: Swift.String
  public var corporationCode: Swift.String
  public var paymentAmount: Swift.String
  public var counter: Swift.String
  public var commisionAmount: Swift.String
  public var bsmvAmount: Swift.String
  public var stanNo: Swift.String
  public var inquiryRef: Swift.String
  public var collectionTypeCode: Swift.String
  public var packageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "packageCode", message: "Use packageCode variable")
  public func getPackageCode() -> Swift.String
  @available(*, deprecated, renamed: "packageCode", message: "Use packageCode variable")
  public func setPackageCode(packageCode: Swift.String)
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func getPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func setPhoneNumber(phoneNumber: Swift.String)
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @available(*, deprecated, renamed: "paymentAmount", message: "Use paymentAmount variable")
  public func getPaymentAmount() -> Swift.String
  @available(*, deprecated, renamed: "paymentAmount", message: "Use paymentAmount variable")
  public func setPaymentAmount(paymentAmount: Swift.String)
  @available(*, deprecated, renamed: "counter", message: "Use counter variable")
  public func getCounter() -> Swift.String
  @available(*, deprecated, renamed: "counter", message: "Use counter variable")
  public func setCounter(counter: Swift.String)
  @available(*, deprecated, renamed: "commisionAmount", message: "Use commisionAmount variable")
  public func getCommisionAmount() -> Swift.String
  @available(*, deprecated, renamed: "commisionAmount", message: "Use commisionAmount variable")
  public func setCommisionAmount(commisionAmount: Swift.String)
  @available(*, deprecated, renamed: "bsmvAmount", message: "Use bsmvAmount variable")
  public func getBsmvAmount() -> Swift.String
  @available(*, deprecated, renamed: "bsmvAmount", message: "Use bsmvAmount variable")
  public func setBsmvAmount(bsmvAmount: Swift.String)
  @available(*, deprecated, renamed: "stanNo", message: "Use stanNo variable")
  public func getStanNo() -> Swift.String
  @available(*, deprecated, renamed: "stanNo", message: "Use stanNo variable")
  public func setStanNo(stanNo: Swift.String)
  @available(*, deprecated, renamed: "inquiryRef", message: "Use inquiryRef variable")
  public func getInquiryRef() -> Swift.String
  @available(*, deprecated, renamed: "inquiryRef", message: "Use inquiryRef variable")
  public func setInquiryRef(inquiryRef: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getCollectionTypeCode() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setCollectionTypeCode(collectionTypeCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetTxnTypeOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var getTxnTypeList: [wallet_ios_sdk.DictionaryModel]?
  @available(*, deprecated, renamed: "getTxnTypeList", message: "Use getTxnTypeList variable")
  public func getGetTxnTypeList() -> [wallet_ios_sdk.DictionaryModel]
  @available(*, deprecated, renamed: "getTxnTypeList", message: "Use getTxnTypeList variable")
  public func setGetTxnTypeList(getTxnTypeList: [wallet_ios_sdk.DictionaryModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddAnonimCustomerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var accountId: Swift.Int64?
  public var gender: Swift.Int64?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetLimitInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  public var customerSegments: [Swift.Int]
  public var limitValueTypes: [Swift.Int]
  public var limitPeriodType: [Swift.Int]
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerLabelsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerLabelList: [wallet_ios_sdk.CustomerLabelListModel]?
  @available(*, deprecated, renamed: "customerLabelList", message: "Use customerLabelList variable")
  public func getCustomerLabelListModel() -> [wallet_ios_sdk.CustomerLabelListModel]
  @available(*, deprecated, renamed: "customerLabelList", message: "Use customerLabelList variable")
  public func setCustomerLabelListModel(customerLabelListModel: [wallet_ios_sdk.CustomerLabelListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CancelAskForMoneyOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VerifyUserMailAddressOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceListCollectionTypesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var collectionTypes: [wallet_ios_sdk.CollectionTypesModel]?
  @available(*, deprecated, renamed: "collectionTypes", message: "Use collectionTypes variable")
  public func getCollectionTypes() -> [wallet_ios_sdk.CollectionTypesModel]
  @available(*, deprecated, renamed: "collectionTypes", message: "Use collectionTypes variable")
  public func setCollectionTypes(collectionTypes: [wallet_ios_sdk.CollectionTypesModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetPasswordOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAccountActionsReceiptOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var receiptBase64Content: Swift.String?
  @available(*, deprecated, renamed: "receiptBase64Content", message: "Use receiptBase64Content variable")
  public func getReceiptBase64Content() -> Swift.String
  @available(*, deprecated, renamed: "receiptBase64Content", message: "Use receiptBase64Content variable")
  public func setReceiptBase64Content(receiptBase64Content: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddBalanceToWalletByVposOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var failUrl: Swift.String?
  public var htmlForm: Swift.String?
  public var successUrl: Swift.String?
  @available(*, deprecated, renamed: "htmlForm", message: "Use htmlForm variable")
  public func getHtmlForm() -> Swift.String
  @available(*, deprecated, renamed: "htmlForm", message: "Use htmlForm variable")
  public func setHtmlForm(htmlForm: Swift.String)
  @available(*, deprecated, renamed: "failUrl", message: "Use failUrl variable")
  public func getFailUrl() -> Swift.String
  @available(*, deprecated, renamed: "failUrl", message: "Use failUrl variable")
  public func setFailUrl(failUrl: Swift.String)
  @available(*, deprecated, renamed: "successUrl", message: "Use successUrl variable")
  public func getSuccessUrl() -> Swift.String
  @available(*, deprecated, renamed: "successUrl", message: "Use successUrl variable")
  public func setSuccessUrl(successUrl: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct PackageListModel : Swift.Codable {
  public var debtInqOprRefNo: Swift.String?
  public var amount: Swift.String?
  public var name: Swift.String?
  public var currencyCode: Swift.String?
  public var gameID: Swift.String?
  @available(*, deprecated, renamed: "gameID", message: "Use gameID variable")
  public func getGameID() -> Swift.String
  @available(*, deprecated, renamed: "gameID", message: "Use gameID variable")
  public mutating func setGameID(gameID: Swift.String)
  @available(*, deprecated, renamed: "currencyCode", message: "Use currencyCode variable")
  public func getCurrencyCode() -> Swift.String
  @available(*, deprecated, renamed: "currencyCode", message: "Use currencyCode variable")
  public mutating func setCurrencyCode(currencyCode: Swift.String)
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public mutating func setName(name: Swift.String)
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public func getDebtInqOprRefNo() -> Swift.String
  @available(*, deprecated, renamed: "debtInqOprRefNo", message: "Use debtInqOprRefNo variable")
  public mutating func setDebtInqOprRefNo(debtInqOprRefNo: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public mutating func setAmount(amount: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SplitTheBillInputParam : wallet_ios_sdk.BaseRequestModel {
  public var descriptionSplitTheBill: Swift.String
  public var refNumber: Swift.Int64
  public var splitTheBillList: [wallet_ios_sdk.SplitTheBillListModel]
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "descriptionSplitTheBill", message: "Use descriptionSplitTheBill variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "descriptionSplitTheBill", message: "Use descriptionSplitTheBill variable")
  public func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.Int64)
  @available(*, deprecated, renamed: "splitTheBillList", message: "Use splitTheBillList variable")
  public func getSplitTheBillList() -> [wallet_ios_sdk.SplitTheBillListModel]
  @available(*, deprecated, renamed: "splitTheBillList", message: "Use splitTheBillList variable")
  public func setSplitTheBillList(splitTheBillList: [wallet_ios_sdk.SplitTheBillListModel])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BankAccountCreateInputParams : wallet_ios_sdk.BaseRequestModel {
  public var accountName: Swift.String
  public var IBAN: Swift.String
  public var bankCode: Swift.String
  public var branchCode: Swift.String
  public var accountNumber: Swift.String
  public var currency: Swift.String
  public var isDefaultBankAccount: Swift.String
  public var bankAccountCreateDescription: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "bankAccountCreateDescription", message: "Use bankAccountCreateDescription variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "bankAccountCreateDescription", message: "Use bankAccountCreateDescription variable")
  public func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "isDefaultBankAccount", message: "Use isDefaultBankAccount variable")
  public func getIsDefaultBankAccount() -> Swift.String
  @available(*, deprecated, renamed: "isDefaultBankAccount", message: "Use isDefaultBankAccount variable")
  public func setIsDefaultBankAccount(isDefaultBankAccount: Swift.String)
  @available(*, deprecated, renamed: "accountName", message: "Use accountName variable")
  public func getAccountName() -> Swift.String
  @available(*, deprecated, renamed: "accountName", message: "Use accountName variable")
  public func setAccountName(AccountName: Swift.String)
  @available(*, deprecated, renamed: "IBAN", message: "Use IBAN variable")
  public func getIBAN() -> Swift.String
  @available(*, deprecated, renamed: "IBAN", message: "Use IBAN variable")
  public func setIBAN(IBAN: Swift.String)
  @available(*, deprecated, renamed: "bankCode", message: "Use bankCode variable")
  public func getBankCode() -> Swift.String
  @available(*, deprecated, renamed: "bankCode", message: "Use bankCode variable")
  public func setBankCode(BankCode: Swift.String)
  @available(*, deprecated, renamed: "branchCode", message: "Use branchCode variable")
  public func getBranchCode() -> Swift.String
  @available(*, deprecated, renamed: "branchCode", message: "Use branchCode variable")
  public func setBranchCode(BranchCode: Swift.String)
  @available(*, deprecated, renamed: "accountNumber", message: "Use accountNumber variable")
  public func getAccountNumber() -> Swift.String
  @available(*, deprecated, renamed: "accountNumber", message: "Use accountNumber variable")
  public func setAccountNumber(AccountNumber: Swift.String)
  @available(*, deprecated, renamed: "currency", message: "Use currency variable")
  public func getCurrency() -> Swift.String
  @available(*, deprecated, renamed: "currency", message: "Use currency variable")
  public func setCurrency(Currency: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TransferBetweenAccountsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetUserCommunicationPreferenceOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public func getIsCallAllowed() -> Swift.Bool
  public func setIsCallAllowed(isCallAllowed: Swift.Bool)
  public func getIsEmailAllowed() -> Swift.Bool
  public func setIsEmailAllowed(isEmailAllowed: Swift.Bool)
  public func getIsSmsAllowed() -> Swift.Bool
  public func setIsSmsAllowed(isSmsAllowed: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerRemainingLimitInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var remainingLimits: [wallet_ios_sdk.RemainingLimitsModel]?
  @available(*, deprecated, renamed: "remainingLimits", message: "Use remainingLimits variable")
  public func geRemainingLimits() -> [wallet_ios_sdk.RemainingLimitsModel]
  @available(*, deprecated, renamed: "remainingLimits", message: "Use remainingLimits variable")
  public func setRemainingLimits(remainingLimits: [wallet_ios_sdk.RemainingLimitsModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceGetPrepaidPrequeryMessageOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var stanNo: Swift.String?
  @available(*, deprecated, renamed: "stanNo", message: "Use stanNo variable")
  public func getStanNo() -> Swift.String
  @available(*, deprecated, renamed: "stanNo", message: "Use stanNo variable")
  public func setStanNo(stanNo: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func BankAccountCreateInterface(bankAccountCreateInputParams: wallet_ios_sdk.BankAccountCreateInputParams, completion: @escaping (_ result: wallet_ios_sdk.BankAccountCreateOutputParams) -> ())
  public func BankAccountDeleteInterface(bankAccountDeleteInputParams: wallet_ios_sdk.BankAccountDeleteInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func BankAccountListInterface(completion: @escaping (_ result: wallet_ios_sdk.BankAccountListOutputParams) -> ())
  public func BankAccountUpdateInterface(bankAccountUpdateInputParams: wallet_ios_sdk.BankAccountUpdateInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func GetCardAndBankInfo(cardAndBankInputParams: wallet_ios_sdk.CardAndBankInputParams, completion: @escaping (_ result: wallet_ios_sdk.CardAndBankOutputParams) -> ())
  public func GetExchangeRatesInterface(completion: @escaping (_ result: wallet_ios_sdk.GetExchangeRatesOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAllStreetWithVillageCodeInKpsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var streetResultList: [wallet_ios_sdk.StreetResultListModel]?
  @available(*, deprecated, renamed: "streetResultList", message: "Use streetResultList variable")
  public func getStreetResultList() -> [wallet_ios_sdk.StreetResultListModel]
  @available(*, deprecated, renamed: "streetResultList", message: "Use streetResultList variable")
  public func setStreetResultList(streetResultList: [wallet_ios_sdk.StreetResultListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BankAccountDeleteOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getWalletCardInfoInterface(applicationViewForEmbedded: UIKit.UIView, req: wallet_ios_sdk.GetWalletCardInfoInputParams, cardModel: wallet_ios_sdk.WalletCardModel, completion: @escaping (_ isSuccess: wallet_ios_sdk.BaseCardView?, _ errorCode: Swift.String?, _ errorMessage: Swift.String?) -> ())
  public func activatePhysicalCard(activatePhysicalCardInputParams: wallet_ios_sdk.ActivatePhysicalCardInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SetPrepaidCardPin(setPrepaidCardPinInputParams: wallet_ios_sdk.SetPrepaidCardPinInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func personalizedAnonymousCardInterface(personalizedAnonymousCardInputParams: wallet_ios_sdk.PersonalizedAnonymousCardInputParams, completion: @escaping (_ result: wallet_ios_sdk.PersonalizedAnonymousCardOutputParams) -> ())
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetDebtInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  public var referenceList: [wallet_ios_sdk.ReferenceListModel]
  public var corporationCode: Swift.String
  public var invoiceAmount: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @available(*, deprecated, renamed: "referenceList", message: "Use referenceList variable")
  public func getReferenceList() -> [wallet_ios_sdk.ReferenceListModel]
  @available(*, deprecated, renamed: "referenceList", message: "Use referenceList variable")
  public func setReferenceList(referenceList: [wallet_ios_sdk.ReferenceListModel])
  @available(*, deprecated, renamed: "invoiceAmount", message: "Use invoiceAmount variable")
  public func getInvoiceAmount() -> Swift.String
  @available(*, deprecated, renamed: "invoiceAmount", message: "Use invoiceAmount variable")
  public func setInvoiceAmount(invoiceAmount: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VerifyCustomerByKpsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var tckn: Swift.Int64
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var birthDate: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "tckn", message: "Use tckn variable")
  public func getTckn() -> Swift.Int64
  @available(*, deprecated, renamed: "tckn", message: "Use tckn variable")
  public func setTckn(tckn: Swift.Int64)
  @available(*, deprecated, renamed: "firstName", message: "Use firstName variable")
  public func getFirstName() -> Swift.String
  @available(*, deprecated, renamed: "firstName", message: "Use firstName variable")
  public func setFirstName(firstName: Swift.String)
  @available(*, deprecated, renamed: "lastName", message: "Use lastName variable")
  public func getLastName() -> Swift.String
  @available(*, deprecated, renamed: "lastName", message: "Use lastName variable")
  public func setLastName(lastName: Swift.String)
  @available(*, deprecated, renamed: "birthDate", message: "Use birthDate variable")
  public func getBirthDate() -> Swift.String
  @available(*, deprecated, renamed: "birthDate", message: "Use birthDate variable")
  public func setBirthDate(birthDate: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetPrepaidCardTrnPermissionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var permissionList: [wallet_ios_sdk.PermissionListModel]?
  @available(*, deprecated, renamed: "permissionList", message: "Use permissionList variable")
  public func getPermissionList() -> [wallet_ios_sdk.PermissionListModel]
  @available(*, deprecated, renamed: "permissionList", message: "Use permissionList variable")
  public func setPermissionList(permissionList: [wallet_ios_sdk.PermissionListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getMobileComponents(completion: @escaping (_ result: wallet_ios_sdk.GetMobileComponentsOutputParams) -> ())
  public func GetSupportedLanguagesInterface(completion: @escaping (_ result: wallet_ios_sdk.GetSupportedLanguagesOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetMasterpassConfigOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var token: Swift.String?, clientId: Swift.String?, macroMerchantId: Swift.String?, referenceNo: Swift.String?, userId: Swift.String?, api: Swift.String?, masterpassURL: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetPrepaidPrequeryMessageInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phoneNumber: Swift.String
  public var corporationCode: Swift.String
  public var amount: Swift.String
  public var counter: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func getPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func setPhoneNumber(phoneNumber: Swift.String)
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.String)
  @available(*, deprecated, renamed: "counter", message: "Use counter variable")
  public func getCounter() -> Swift.String
  @available(*, deprecated, renamed: "counter", message: "Use counter variable")
  public func setCounter(counter: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WalletInvoiceInformation : Swift.Codable {
  public var lastInvoiceReferenceValue: Swift.String?
  @available(*, deprecated, renamed: "lastInvoiceReferenceValue", message: "Use lastInvoiceReferenceValue variable")
  public func getLastInvoiceReferenceValue() -> Swift.String
  @available(*, deprecated, renamed: "lastInvoiceReferenceValue", message: "Use lastInvoiceReferenceValue variable")
  public func setLastInvoiceReferenceValue(lastInvoiceReferenceValue: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ResponseMessagesListModel : Swift.Codable {
  public var responseCode: Swift.Int?
  public var description: Swift.String?
  public var text: Swift.String?
  @available(*, deprecated, renamed: "responseCode", message: "Use responseCode variable")
  public func getResponseCode() -> Swift.Int
  @available(*, deprecated, renamed: "responseCode", message: "Use responseCode variable")
  public mutating func setResponseCode(responseCode: Swift.Int)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public mutating func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "text", message: "Use text variable")
  public func getText() -> Swift.String
  @available(*, deprecated, renamed: "text", message: "Use text variable")
  public mutating func setText(text: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardListModel : Swift.Codable {
  public func getMaskedCardNumber() -> Swift.String
  public mutating func setMaskedCardNumber(maskedCardNumber: Swift.String)
  public func getCardToken() -> Swift.String
  public mutating func setCardToken(cardToken: Swift.String)
  public mutating func setFinishPaymentRequired(finishPaymentRequired: Swift.Bool)
  public func getFinishPaymentRequired() -> Swift.Bool
  public mutating func setExpiresIn90Days(expiresIn90Days: Swift.Bool)
  public func getExpiresIn90Days() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MasterpassPaymentCompleteOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceGetPrepaidInformationOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var prepaidInfoList: [wallet_ios_sdk.PrepaidInfoListModel]?
  public var stanNo: Swift.String?
  public var inquiryRef: Swift.String?
  @available(*, deprecated, renamed: "prepaidInfoList", message: "Use prepaidInfoList variable")
  public func getPrepaidInfoList() -> [wallet_ios_sdk.PrepaidInfoListModel]
  @available(*, deprecated, renamed: "prepaidInfoList", message: "Use prepaidInfoList variable")
  public func setPrepaidInfoList(prepaidInfoList: [wallet_ios_sdk.PrepaidInfoListModel])
  @available(*, deprecated, renamed: "stanNo", message: "Use stanNo variable")
  public func getStanNo() -> Swift.String
  @available(*, deprecated, renamed: "stanNo", message: "Use stanNo variable")
  public func setStanNo(stanNo: Swift.String)
  @available(*, deprecated, renamed: "inquiryRef", message: "Use inquiryRef variable")
  public func getInquiryRef() -> Swift.String
  @available(*, deprecated, renamed: "inquiryRef", message: "Use inquiryRef variable")
  public func setInquiryRef(inquiryRef: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CollectionTypesModel : Swift.Codable {
  public var code: Swift.String?
  public var name: Swift.String?
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public func getCode() -> Swift.String
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public mutating func setCode(code: Swift.String)
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public mutating func setName(name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TransferMoneyToBankAccountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.Int64?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SwitchSessionCheckInputParams : wallet_ios_sdk.BaseRequestModel {
  public var isSessionCheckActive: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "isSessionCheckActive", message: "Use isSessionCheckActive variable")
  public func getIsSessionCheckActive() -> Swift.Bool
  @available(*, deprecated, renamed: "isSessionCheckActive", message: "Use isSessionCheckActive variable")
  public func setIsSessionCheckActive(IsSessionCheckActive: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetExpenseAmountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var txnTypeId: Swift.Int?
  public var amount: Swift.Double?
  public var expenseAmount: Swift.Double?
  public var totalAmount: Swift.Double?
  public var visible: Swift.Bool?
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func setTxnTypeId(txnTypeId: Swift.Int)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func getTotalAmount() -> Swift.Double
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func setTotalAmount(totalAmount: Swift.Double)
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public func getvisible() -> Swift.Bool
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public func setVisible(visible: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetInstitutionListInputParams : wallet_ios_sdk.BaseRequestModel {
  public var typeNumber: Swift.Int
  public var searchText: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "typeNumber", message: "Use typeNumber variable")
  public func getTypeNumber() -> Swift.Int
  @available(*, deprecated, renamed: "typeNumber", message: "Use typeNumber variable")
  public func setTypeNumber(typeNumber: Swift.Int)
  @available(*, deprecated, renamed: "searchText", message: "Use searchText variable")
  public func getSearchText() -> Swift.String
  @available(*, deprecated, renamed: "searchText", message: "Use searchText variable")
  public func setSearchText(searchText: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetMfsTokenOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var token: Swift.String?
  public var userId: Swift.String?
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func getToken() -> Swift.String
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func setToken(_ token: Swift.String)
  @available(*, deprecated, renamed: "userId", message: "Use userId variable")
  public func getUserId() -> Swift.String
  @available(*, deprecated, renamed: "userId", message: "Use userId variable")
  public func setUserId(_ userId: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UpdateCustomerPhoneNumberOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SplitTheBillOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LogoutOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CheckCustomerSecretQuestionAnswerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var remainingAttempts: Swift.Int?
  public var attemptCount: Swift.Int?
  @available(*, deprecated, renamed: "remainingAttempts", message: "Use remainingAttempts variable")
  public func getRemainingAttempts() -> Swift.Int
  @available(*, deprecated, renamed: "remainingAttempts", message: "Use remainingAttempts variable")
  public func setRemainingAttempts(remainingAttempts: Swift.Int)
  @available(*, deprecated, renamed: "attemptCount", message: "Use attemptCount variable")
  public func getAttemptCount() -> Swift.Int
  @available(*, deprecated, renamed: "attemptCount", message: "Use attemptCount variable")
  public func setAttemptCount(attemptCount: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DgFinGetTokenOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var accessToken: Swift.String?
  public var refreshToken: Swift.String?
  public var tokenType: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class DenySplitTheBillInputParams : wallet_ios_sdk.BaseRequestModel {
  public var splitTheBillId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getSplitTheBillId() -> Swift.Int64
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setSplitTheBillId(splitTheBillId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StartQrTransactionInputParams : wallet_ios_sdk.BaseRequestModel {
  public var qrCode: Swift.String
  public var cardToken: Swift.String
  public var amount: Foundation.Decimal
  public var locationData: Swift.String
  public var trxType: Swift.Int?
  override public func encode(to encoder: any Swift.Encoder) throws
  public func setAmount(amount: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerCashbackDataOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var monthlyEarnings: Swift.Double?
  public var yearlyEarnings: Swift.Double?
  public var totalEarnings: Swift.Double?
  @available(*, deprecated, renamed: "monthlyEarnings", message: "Use monthlyEarnings variable")
  public func getonthlyEarnings() -> Swift.Double
  @available(*, deprecated, renamed: "monthlyEarnings", message: "Use monthlyEarnings variable")
  public func setMonthlyEarnings(monthlyEarnings: Swift.Double)
  @available(*, deprecated, renamed: "yearlyEarnings", message: "Use yearlyEarnings variable")
  public func getYearlyEarnings() -> Swift.Double
  @available(*, deprecated, renamed: "yearlyEarnings", message: "Use yearlyEarnings variable")
  public func setYearlyEarnings(yearlyEarnings: Swift.Double)
  @available(*, deprecated, renamed: "totalEarnings", message: "Use totalEarnings variable")
  public func getTotalEarnings() -> Swift.Double
  @available(*, deprecated, renamed: "totalEarnings", message: "Use totalEarnings variable")
  public func setTotalEarnings(totalEarnings: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetInstitutionNameByIbanInputParams : wallet_ios_sdk.BaseRequestModel {
  public var ibanNo: Swift.String
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "ibanNo", message: "Use ibanNo variable")
  public func getIbanNo() -> Swift.String
  @available(*, deprecated, renamed: "ibanNo", message: "Use ibanNo variable")
  public func setIbanNo(ibanNo: Swift.String)
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAllVillageWithDistrictCodeInKpsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var villageResultList: [wallet_ios_sdk.VillageResultListModel]?
  @available(*, deprecated, renamed: "villageResultList", message: "Use villageResultList variable")
  public func getVillageResultList() -> [wallet_ios_sdk.VillageResultListModel]
  @available(*, deprecated, renamed: "villageResultList", message: "Use villageResultList variable")
  public func setVillageResultList(villageResultList: [wallet_ios_sdk.VillageResultListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceTransportCardCollectOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.String?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CancelSplitTheBillOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConfirmPasswordOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var unblockDatetime: Swift.String?
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func getUnblockDatetime() -> Swift.String
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func setUnblockDatetime(unblockDatetime: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func InitialInterface(initialInputParams: wallet_ios_sdk.InitialInputParams, completion: @escaping (_ result: wallet_ios_sdk.InitialOutputParams) -> ())
  public func LoginWithPasswordInterface(loginWithPasswordInputParams: wallet_ios_sdk.LoginWithPasswordInputParams, completion: @escaping (_ result: wallet_ios_sdk.LoginWithPasswordOutputParams) -> ())
  public func SetPasswordInterface(setPasswordInputParams: wallet_ios_sdk.SetPasswordInputParams, completion: @escaping (_ result: wallet_ios_sdk.SetPasswordOutputParams) -> ())
  public func SetPasswordAndSecretQuestionAnswerInterface(setPasswordAndQuestionAnswerInputParams: wallet_ios_sdk.SetPasswordAndSecretQuestionAnswerInputParams, completion: @escaping (_ result: wallet_ios_sdk.SetPasswordAndSecretQuestionAnswerOutputParams) -> ())
  public func ChangePasswordInterface(changePasswordInputParams: wallet_ios_sdk.ChangePasswordInputParams, completion: @escaping (_ result: wallet_ios_sdk.ChangePasswordOutputParams) -> ())
  public func CustomOtpVerificationInterface(completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func FailLoginAttemptSeenInterface(completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func ForgotPasswordInterface(forgotPasswordInputParams: wallet_ios_sdk.ForgotPasswordInputParams, completion: @escaping (_ result: wallet_ios_sdk.ForgotPasswordOutputParams) -> ())
  public func GetFailLoginAttemptInterface(completion: @escaping (_ result: wallet_ios_sdk.GetFailLoginAttemptOutputParams) -> ())
  public func LogoutInterface(completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func VerifyOTPInterface(verifyOTPInputParams: wallet_ios_sdk.VerifyOTPInputParams, completion: @escaping (_ result: wallet_ios_sdk.VerifyOTPOutputParams) -> ())
  public func addEnquraIntegrationInterface(addEnquraIntegrationInputParams: wallet_ios_sdk.AddEnquraIntegrationInputParams, completion: @escaping (_ result: wallet_ios_sdk.AddEnquraIntegrationOutputParams) -> ())
  public func Begin(beginInputParams: wallet_ios_sdk.BeginInputParams, completion: @escaping (_ result: wallet_ios_sdk.BeginOutputParams) -> ())
  public func ConfirmAgreementInterface(confirmAgreementInputParams: wallet_ios_sdk.ConfirmAgreementInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func ConfirmPasswordInterface(confirmPasswordInputParams: wallet_ios_sdk.ConfirmPasswordInputParams, completion: @escaping (_ result: wallet_ios_sdk.ConfirmPasswordOutputParams) -> ())
  public func forgotPasswordWithParametersInterface(req: wallet_ios_sdk.ForgotPasswordWithParametersInputParams, completion: @escaping (_ result: wallet_ios_sdk.ForgotPasswordWithParametersOutputParams) -> ())
  public func GetLatestAgreementInterface(getLatestAgreementInputParams: wallet_ios_sdk.GetLatestAgreementInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetLatestAgreementOutputParams) -> ())
  public func GetLimitDefinitionInterface(getLimitDefinitionInputParams: wallet_ios_sdk.GetLimitDefinitionInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetLimitDefinitionOutputParams) -> ())
  public func GetLimitDefinitionV2Interface(request: wallet_ios_sdk.GetLimitDefinitionV2InputParams, completion: @escaping (_ result: wallet_ios_sdk.GetLimitDefinitionV2OutputParams) -> ())
  public func GetSecretQuestion(request: wallet_ios_sdk.GetSecretQuestionInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetSecretQuestionOutputParams) -> ())
  public func renewSessionInterface(completion: @escaping (_ result: wallet_ios_sdk.RenewSessionOutputParams) -> ())
  public func ReOtpInterface(reOtpInputParams: wallet_ios_sdk.ReOtpInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SecurityQuestionResetInterface(completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SetSecretQuestionAnswer(setSecretQuestionAnswerInputParams: wallet_ios_sdk.SetSecretQuestionAnswerInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SupportInterface(supportInputParams: wallet_ios_sdk.SupportInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SupportV2Interface(supportV2InputParams: wallet_ios_sdk.SupportV2InputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SwitchSessionCheckInterface(switchSessionCheckInputParams: wallet_ios_sdk.SwitchSessionCheckInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func updateCustomerAddressInfoInterface(updateCustomerAddressInfoInputParams: wallet_ios_sdk.UpdateCustomerAddressInfoInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func addAnonimCustomer(addAnonimCustomerInputParams: wallet_ios_sdk.AddAnonimCustomerInputParams, completion: @escaping (_ result: wallet_ios_sdk.AddAnonimCustomerOutputParams) -> ())
  public func completeRegistration(completeRegistrationInputParams: wallet_ios_sdk.CompleteRegistrationInputParams, completion: @escaping (_ result: wallet_ios_sdk.CompleteRegistrationOutputParams) -> ())
  public func updateCustomerPhoneNumber(updateCustomerPhoneNumberInputParams: wallet_ios_sdk.UpdateCustomerPhoneNumberInputParams, completion: @escaping (_ result: wallet_ios_sdk.UpdateCustomerPhoneNumberOutputParams) -> ())
  public func getJobs(getJobsInputParams: wallet_ios_sdk.GetJobsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetJobsOutputParams) -> ())
  public func checkEmailInterface(checkEmailInputParams: wallet_ios_sdk.CheckEmailInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UpdateCustomerInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct TurkcellInvoiceInquiryModel : Swift.Codable {
  public var invoiceAmount: Swift.Double?
  public var invoiceDueDate: Swift.String?
  public var invoiceIssueDate: Swift.String?
  public var invoiceInfo1: Swift.String?, invoiceInfo2: Swift.String?, invoiceInfo3: Swift.String?
  public var bankRefNo: Swift.String?
  public var invoiceNo: Swift.String?
  public var invoiceRefNo: Swift.String?
  public var invoiceSeqNo: Swift.String?
  public var invoiceStatus: Swift.String?
  public var custPaymentMethod: Swift.String?
  public var newInstallmentAmount: Swift.Double?
  public var channelCommission: Swift.Double?
  public var paymentAmount: Swift.Double?
  public var currency: Swift.String?
  public var invoiceIndex: Swift.String?
  public var commissionAmount: Swift.Double?
  public var totalAmount: Swift.Double?
  public var key1: Swift.String?, key2: Swift.String?
  public init()
  public func getInvoiceAmount() -> Swift.Double
  public func getInvoiceDueDate() -> Swift.String
  public func getInvoiceIssueDate() -> Swift.String
  public func getInvoiceInfo1() -> Swift.String
  public func getInvoiceInfo2() -> Swift.String
  public func getInvoiceInfo3() -> Swift.String
  public func getBankRefNo() -> Swift.String
  public func getKey1() -> Swift.String
  public func getKey2() -> Swift.String
  public func getCommissionAmount() -> Swift.Double
  public func getTotalAmount() -> Swift.Double
  public func getInvoiceNo() -> Swift.String
  public func getInvoiceRefNo() -> Swift.String
  public func getInvoiceSeqNo() -> Swift.String
  public func getInvoiceStatus() -> Swift.String
  public func getCustPaymentMethod() -> Swift.String
  public func getNewInstallmentAmount() -> Swift.Double
  public func getChannelCommission() -> Swift.Double
  public func getPaymentAmount() -> Swift.Double
  public func getCurrency() -> Swift.String
  public func getInvoiceIndex() -> Swift.String
  public mutating func setInvoiceAmount(invoiceAmount: Swift.Double)
  public mutating func setInvoiceDueDate(invoiceDueDate: Swift.String)
  public mutating func setInvoiceIssueDate(invoiceIssueDate: Swift.String)
  public mutating func setInvoiceInfo1(invoiceInfo1: Swift.String)
  public mutating func setInvoiceInfo2(invoiceInfo2: Swift.String)
  public mutating func setInvoiceInfo3(invoiceInfo3: Swift.String)
  public mutating func setBankRefNo(bankRefNo: Swift.String)
  public mutating func setInvoiceNo(invoiceNo: Swift.String)
  public mutating func setInvoiceRefNo(invoiceRefNo: Swift.String)
  public mutating func setInvoiceSeqNo(invoiceSeqNo: Swift.String)
  public mutating func setInvoiceStatus(invoiceStatus: Swift.String)
  public mutating func setCustPaymentMethod(custPaymentMethod: Swift.String)
  public mutating func setNewInstallmentAmount(newInstallmentAmount: Swift.Double)
  public mutating func setChannelCommission(channelCommission: Swift.Double)
  public mutating func setPaymentAmount(paymentAmount: Swift.Double)
  public mutating func setCurrency(currency: Swift.String)
  public mutating func setInvoiceIndex(invoiceIndex: Swift.String)
  public mutating func setCommissionAmount(commissionAmount: Swift.Double)
  public mutating func setTotalAmount(totalAmount: Swift.Double)
  public mutating func setKey1(key1: Swift.String)
  public mutating func setKey2(key2: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemainingLimitsModel : Swift.Codable {
  public var txnTypeId: Swift.Int?
  public var txnTypeDefinition: Swift.String?
  public var dailyAmount: Swift.Double?
  public var dailyCount: Swift.Int64?
  public var monthlyAmount: Swift.Double?
  public var monthlyCount: Swift.Int64?
  public var yearlyAmount: Swift.Double?
  public var yearlyCount: Swift.Int64?
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public mutating func setTxnTypeId(txnTypeId: Swift.Int)
  @available(*, deprecated, renamed: "txnTypeDefinition", message: "Use txnTypeDefinition variable")
  public func getTxnTypeDefinition() -> Swift.String
  @available(*, deprecated, renamed: "txnTypeDefinition", message: "Use txnTypeDefinition variable")
  public mutating func setTxnTypeDefinition(txnTypeDefinition: Swift.String)
  @available(*, deprecated, renamed: "dailyAmount", message: "Use dailyAmount variable")
  public func getDailyAmount() -> Swift.Double
  @available(*, deprecated, renamed: "dailyAmount", message: "Use dailyAmount variable")
  public mutating func setDailyAmount(dailyAmount: Swift.Double)
  @available(*, deprecated, renamed: "dailyCount", message: "Use dailyCount variable")
  public func getDailyCount() -> Swift.Int64
  @available(*, deprecated, renamed: "dailyCount", message: "Use dailyCount variable")
  public mutating func setDailyCount(dailyCount: Swift.Int64)
  @available(*, deprecated, renamed: "monthlyAmount", message: "Use monthlyAmount variable")
  public func getMonthlyAmount() -> Swift.Double
  @available(*, deprecated, renamed: "monthlyAmount", message: "Use monthlyAmount variable")
  public mutating func setMonthlyAmount(monthlyAmount: Swift.Double)
  @available(*, deprecated, renamed: "monthlyCount", message: "Use monthlyCount variable")
  public func getMonthlyCount() -> Swift.Int64
  @available(*, deprecated, renamed: "monthlyCount", message: "Use monthlyCount variable")
  public mutating func setMonthlyCount(monthlyCount: Swift.Int64)
  @available(*, deprecated, renamed: "yearlyAmount", message: "Use yearlyAmount variable")
  public func getYearlyAmount() -> Swift.Double
  @available(*, deprecated, renamed: "yearlyAmount", message: "Use yearlyAmount variable")
  public mutating func setYearlyAmount(yearlyAmount: Swift.Double)
  @available(*, deprecated, renamed: "yearlyCount", message: "Use yearlyCount variable")
  public func getYearlyCount() -> Swift.Int64
  @available(*, deprecated, renamed: "yearlyCount", message: "Use yearlyCount variable")
  public mutating func setYearlyCount(yearlyCount: Swift.Int64)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func AcceptAskForMoneyInterface(acceptAskForMoneyInputParams: wallet_ios_sdk.AcceptAskForMoneyInputParams, completion: @escaping (_ result: wallet_ios_sdk.AcceptAskForMoneyOutputParams) -> ())
  public func acceptSplitTheBillInterface(acceptSplitTheBillInputParams: wallet_ios_sdk.AcceptSplitTheBillInputParams, completion: @escaping (_ result: wallet_ios_sdk.AcceptSplitTheBillOutputParams) -> ())
  public func setDefaultAccountInterface(setDefaultAccountInputParams: wallet_ios_sdk.SetDefaultAccountInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func AccountActionsInquiryInterface(accountActionsInquiryInputParams: wallet_ios_sdk.AccountActionsInquiryInputParams, completion: @escaping (_ result: wallet_ios_sdk.AccountActionsInquiryOutputParams) -> ())
  public func AddBalanceToWalletByVposInterface(addBalanceToWalletByVposInputParams: wallet_ios_sdk.AddBalanceToWalletByVposInputParams, completion: @escaping (_ result: wallet_ios_sdk.AddBalanceToWalletByVposOutputParams) -> ())
  public func applyPrepaidCardInterface(applyPrepaidCardInputParams: wallet_ios_sdk.ApplyPrepaidCardInputParams, completion: @escaping (_ result: wallet_ios_sdk.ApplyPrepaidCardOutputParams) -> ())
  public func AskForMoneyInterface(askForMoneyInputParams: wallet_ios_sdk.AskForMoneyInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func BalanceInquiryInterface(balanceInqueryInputParams: wallet_ios_sdk.BalanceInquiryInputParams, completion: @escaping (_ result: wallet_ios_sdk.BalanceInquiryOutputParams) -> ())
  public func cancelArafInterface(cancelArafInputParams: wallet_ios_sdk.CancelArafInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func cancelAskForMoneyInterface(cancelAskForMoneyInputParams: wallet_ios_sdk.CancelAskForMoneyInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func cancelSplitTheBillInterface(cancelSplitTheBillInputParams: wallet_ios_sdk.CancelSplitTheBillInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func CancelAtmTokenInterface(completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func CheckOnlinePaymentLimit(checkOnlinePaymentLimitInputParams: wallet_ios_sdk.CheckOnlinePaymentLimitInputParams, completion: @escaping (_ result: wallet_ios_sdk.CheckOnlinePaymentLimitOutputParams) -> ())
  public func commitPurchase(commitPurchaseInputParams: wallet_ios_sdk.CommitPurchaseInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func CreateAccountInterface(createAccountInputParams: wallet_ios_sdk.CreateAccountInputParams, completion: @escaping (_ result: wallet_ios_sdk.CreateAccountOutputParams) -> ())
  public func createPrepaidCardTrnPermissionInterface(createPrepaidCardTrnPermissionInputParams: wallet_ios_sdk.CreatePrepaidCardTrnPermissionInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func DeleteAccountInterface(deleteAccountInputParams: wallet_ios_sdk.DeleteAccountInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func DenyAskForMoneyInterface(denyAskForMoneyInputParams: wallet_ios_sdk.DenyAskForMoneyInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func denySplitTheBillInterface(denySplitTheBillInputParams: wallet_ios_sdk.DenySplitTheBillInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func GetAccountActionsReceiptInferface(getAccountActionsReceiptInputParams: wallet_ios_sdk.GetAccountActionsReceiptInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetAccountActionsReceiptOutputParams) -> ())
  public func GetAtmTokenInterface(completion: @escaping (_ result: wallet_ios_sdk.GetAtmTokenOutputParams) -> ())
  public func getCardBinInfoInterface(getCardBinInfoInputParams: wallet_ios_sdk.GetCardBinInfoInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCardBinInfoOutputParams) -> ())
  public func GetCustomerLimitInfoInterface(completion: @escaping (_ result: wallet_ios_sdk.GetCustomerLimitInfoOutputParams) -> ())
  public func masterpassUnlinkCustomerInterface(completion: @escaping (_ result: wallet_ios_sdk.MasterpassUnlinkCustomerOutputParams) -> ())
  public func masterpassPaymentCompleteInterface(masterpassPaymentCompleteInputParams: wallet_ios_sdk.MasterpassPaymentCompleteInputParams, completion: @escaping (_ result: wallet_ios_sdk.MasterpassPaymentCompleteOutputParams) -> ())
  public func masterpassPaymentInterface(masterpassPaymentInputParams: wallet_ios_sdk.MasterpassPaymentInputParams, completion: @escaping (_ result: wallet_ios_sdk.MasterpassPaymentOutputParams) -> ())
  public func MasterpassGenerateTokenInterface(masterpassGenerateTokenInputParams: wallet_ios_sdk.MasterpassGenerateTokenInputParams, completion: @escaping (_ result: wallet_ios_sdk.MasterpassGenerateTokenOutputParams) -> ())
  public func getCustomerPrepaidCardListInterface(getCustomerPrepaidCardListInputParams: wallet_ios_sdk.GetCustomerPrepaidCardListInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCustomerPrepaidCardListOutputParams) -> ())
  public func GetCustomerRemainingLimitInfoInterface(completion: @escaping (_ result: wallet_ios_sdk.GetCustomerRemainingLimitInfoOutputParams) -> ())
  public func getCustomerRemainingLimitInfoV2Interface(completion: @escaping (_ result: wallet_ios_sdk.GetCustomerRemainingLimitInfoV2OutputParams) -> ())
  public func getCustomerRemainingLimitInfoV3Interface(completion: @escaping (_ result: wallet_ios_sdk.GetCustomerRemainingLimitInfoV3OutputParams) -> ())
  public func GetExpenseAmountInterface(getExpenseAmountInputParams: wallet_ios_sdk.GetExpenseAmountInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetExpenseAmountOutputParams) -> ())
  public func GetExpensesInterface(getExpensesInputParams: wallet_ios_sdk.GetExpensesInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetExpensesOutputParams) -> ())
  public func GetMerchantCategoryGroupListInterface(completion: @escaping (_ result: wallet_ios_sdk.GetMerchantCategoryGroupListOutputParams) -> ())
  public func GetMfsToken(getMfsTokenInputParams: wallet_ios_sdk.GetMfsTokenInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetMfsTokenOutputParams) -> ())
  public func GetMonthlyBalanceInterface(getMonthlyBalanceInputParams: wallet_ios_sdk.GetMonthlyBalanceInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetMonthlyBalanceOutputParams) -> ())
  public func GetPendingOrderDetailInterface(getPendingOrderDetailInputParams: wallet_ios_sdk.GetPendingOrderDetailInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetPendingOrderDetailOutputParams) -> ())
  public func GetPendingOrdersInterface(getPendingOrdersInputParams: wallet_ios_sdk.GetPendingOrdersInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetPendingOrdersOutputParams) -> ())
  public func getPrepaidCardTrnPermissionInterface(getPrepaidCardTrnPermissionInputParams: wallet_ios_sdk.GetPrepaidCardTrnPermissionInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetPrepaidCardTrnPermissionOutputParams) -> ())
  public func GetReceiptInterface(getReceiptInputParams: wallet_ios_sdk.GetReceiptInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetReceiptOutputParams) -> ())
  public func GetWalletVirtualCardTxnsDailyByAccountIdInterface(completion: @escaping (_ result: wallet_ios_sdk.GetWalletVirtualCardTxnsDailyByAccountIdOutputParams) -> ())
  public func GetWalletVirtualCardTxnsInterface(getWalletVirtualCardTxnsInputParams: wallet_ios_sdk.GetWalletVirtualCardTxnsInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetWalletVirtualCardTxnsOutputParams) -> ())
  public func GetWalletVirtualCardTxnsMonthlyByAccountIdInterface(getWalletVirtualCardTxnsMonthlyByAccountIdInputParams: wallet_ios_sdk.GetWalletVirtualCardTxnsMonthlyByAccountIdInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetWalletVirtualCardTxnsMonthlyByAccountIdOutputParams) -> ())
  public func InvoiceCalculateCommissionFee(invoiceCalculateCommissionFeeInputParams: wallet_ios_sdk.InvoiceCalculateCommissionFeeInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceCalculateCommissionFeeOutputParams) -> ())
  public func InvoiceCollect(invoiceCollectInputParams: wallet_ios_sdk.InvoiceCollectInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceCollectOutputParams) -> ())
  public func InvoiceGetCorporationOperationParameters(invoiceGetCorporationOperationParametersInputParams: wallet_ios_sdk.InvoiceGetCorporationOperationParametersInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceGetCorporationOperationParametersOutputParams) -> ())
  public func InvoiceGetDebtInfo(invoiceGetDebtInfoInputParams: wallet_ios_sdk.InvoiceGetDebtInfoInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceGetDebtInfoOutputParams) -> ())
  public func InvoiceGetEpinDebtInfo(invoiceGetEpinDebtInfo: wallet_ios_sdk.InvoiceGetEpinDebtInfoInputParam, completion: @escaping (_ result: wallet_ios_sdk.InvoiceGetEpinDebtInfoOutputParams) -> ())
  public func InvoiceGetInstitutionListInterface(invoiceGetInstitutionListInputParams: wallet_ios_sdk.InvoiceGetInstitutionListInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceInstitutionOutputParams) -> ())
  public func InvoiceGetInstitutionTypeInterface(completion: @escaping (_ result: wallet_ios_sdk.InvoiceGetInstitutionTypeOutputParams) -> ())
  public func InvoiceGetPrepaidInformation(invoiceGetPrepaidInformationInputParams: wallet_ios_sdk.InvoiceGetPrepaidInformationInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceGetPrepaidInformationOutputParams) -> ())
  public func InvoiceGetPrepaidPrequeryMessage(invoiceGetPrepaidPrequeryMessageInputParams: wallet_ios_sdk.InvoiceGetPrepaidPrequeryMessageInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceGetPrepaidPrequeryMessageOutputParams) -> ())
  public func InvoiceGetReceiptInfo(invoiceGetReceiptInfo: wallet_ios_sdk.InvoiceGetReceiptInfo, completion: @escaping (_ result: wallet_ios_sdk.InvoiceGetReceiptInfoOutputParams) -> ())
  public func InvoiceInquiryInterface(invoiceInquiryInputParams: wallet_ios_sdk.InvoiceInquiryInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceInquiryOutputParams) -> ())
  public func InvoiceListCollectionTypes(invoiceListCollectionTypesInputParams: wallet_ios_sdk.InvoiceListCollectionTypesInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceListCollectionTypesOutputParams) -> ())
  public func InvoiceListCorporationDefinitions(invoiceListCorporationDefinitionsInputParams: wallet_ios_sdk.InvoiceListCorporationDefinitionsInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceListCorporationDefinitionsOutputParams) -> ())
  public func InvoicePaymentInterface(invoicePaymentInputParams: wallet_ios_sdk.InvoicePaymentInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoicePaymentOutputParams) -> ())
  public func InvoicePrepaidPaymentConfirmMessage(invoicePrepaidPaymentConfirmMessageInputParams: wallet_ios_sdk.InvoicePrepaidPaymentConfirmMessageInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoicePrepaidPaymentConfirmMessageOutputParams) -> ())
  public func InvoiceTransportCardCollect(invoiceTransportCardCollectInputParams: wallet_ios_sdk.InvoiceTransportCardCollectInputParams, completion: @escaping (_ result: wallet_ios_sdk.InvoiceTransportCardCollectOutputParams) -> ())
  public func RefundTopUpInterface(refundTopUpInputParams: wallet_ios_sdk.RefundTopUpInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SendAccountActionsWithEmailInterface(sendAccountActionsWithEmailInputParams: wallet_ios_sdk.SendAccountActionsWithEmailInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SendMoneyInterface(sendMoneyInputParams: wallet_ios_sdk.SendMoneyInputParams, completion: @escaping (_ result: wallet_ios_sdk.SendMoneyOutputParams) -> ())
  public func SendMoneyToMyAccountInterface(sendMoneyToMyAccountInputParams: wallet_ios_sdk.SendMoneyToMyAccountInputParams, completion: @escaping (_ result: wallet_ios_sdk.SendMoneyToMyAccountOutputParams) -> ())
  public func SetMonthlyAtmWithdrawAmountInterface(setMonthlyAtmWithdrawAmountInputParams: wallet_ios_sdk.SetMonthlyAtmWithdrawAmountInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func SetMonthlyPaymentAmountInterface(setMonthlyPaymentAmountInputParams: wallet_ios_sdk.SetMonthlyPaymentAmountInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func splitTheBillInterface(splitTheBillInputParam: wallet_ios_sdk.SplitTheBillInputParam, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func transferMoneyToBankAccountInterface(transferMoneyToBankAccountInputParams: wallet_ios_sdk.TransferMoneyToBankAccountInputParams, completion: @escaping (_ result: wallet_ios_sdk.TransferMoneyToBankAccountOutputParams) -> ())
  public func UnlinkCustomerInterface(completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func UpdateAccountInfoInterface(updateAccountInfoInputParams: wallet_ios_sdk.UpdateAccountInfoInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func updatePrepaidCardStatusInterface(updatePrepaidCardStatusInputParams: wallet_ios_sdk.UpdatePrepaidCardStatusInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func walletPaymentInterface(walletPaymentInputParams: wallet_ios_sdk.WalletPaymentInputParams, completion: @escaping (_ result: wallet_ios_sdk.WalletPaymentOutputParams) -> ())
  public func transferBetweenAccounts(transferBetweenAccountsInputParams: wallet_ios_sdk.TransferBetweenAccountsInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func updateAccountSessionTime(updateAccountSessionTimeInputParams: wallet_ios_sdk.UpdateAccountSessionTimeInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetMonthlyPaymentAmountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UnlinkCustomerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct AddressVerifyResultModel : Swift.Codable {
  public var adresNo: Swift.Int64?
  public var adresText: Swift.String?
  public var dogrulamaKimlikNo: Swift.Int64?
  public var durumAciklama: Swift.String?
  public var durumKod: Swift.Bool?
  public var adresTip: wallet_ios_sdk.AdresTip?
  public var adresTur: wallet_ios_sdk.AdresTip?
  public var hataBilgisi: wallet_ios_sdk.AdresTip?
  @available(*, deprecated, renamed: "adresNo", message: "Use adresNo variable")
  public func getAdresNo() -> Swift.Int64
  @available(*, deprecated, renamed: "adresNo", message: "Use adresNo variable")
  public mutating func setAdresNo(adresNo: Swift.Int64)
  @available(*, deprecated, renamed: "adresText", message: "Use adresText variable")
  public func getAdresText() -> Swift.String
  @available(*, deprecated, renamed: "adresText", message: "Use adresText variable")
  public mutating func setAdresText(adresText: Swift.String)
  @available(*, deprecated, renamed: "dogrulamaKimlikNo", message: "Use dogrulamaKimlikNo variable")
  public func getDogrulamaKimlikNo() -> Swift.Int64
  @available(*, deprecated, renamed: "dogrulamaKimlikNo", message: "Use dogrulamaKimlikNo variable")
  public mutating func setDogrulamaKimlikNo(dogrulamaKimlikNo: Swift.Int64)
  @available(*, deprecated, renamed: "durumAciklama", message: "Use durumAciklama variable")
  public func getDurumAciklama() -> Swift.String
  @available(*, deprecated, renamed: "durumAciklama", message: "Use durumAciklama variable")
  public mutating func setDurumAciklama(durumAciklama: Swift.String)
  @available(*, deprecated, renamed: "durumKod", message: "Use durumKod variable")
  public func getDurumKod() -> Swift.Bool
  @available(*, deprecated, renamed: "durumKod", message: "Use durumKod variable")
  public mutating func setDurumKod(durumKod: Swift.Bool)
  @available(*, deprecated, renamed: "adresTip", message: "Use adresTip variable")
  public func getAdresTip() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "adresTip", message: "Use adresTip variable")
  public mutating func setAdresTip(adresTip: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "adresTur", message: "Use adresTur variable")
  public func getAdresTur() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "adresTur", message: "Use adresTur variable")
  public mutating func setAdresTur(adresTur: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public func getHataBilgisi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public mutating func setHataBilgisi(hataBilgisi: wallet_ios_sdk.AdresTip)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MasterpassGenerateTokenInputParams : wallet_ios_sdk.BaseRequestModel {
  public var AuthenticationMethod: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "AuthenticationMethod", message: "Use AuthenticationMethod variable")
  public func getAuthenticationMethod() -> Swift.String
  @available(*, deprecated, renamed: "AuthenticationMethod", message: "Use AuthenticationMethod variable")
  public func setAuthenticationMethod(AuthenticationMethod: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ErrorDescription {
  public var NOTIFY_IS_PRIMARY: Swift.String
  public var CREATING_SESSION: Swift.String
  public var CREATE_JSON_EXCEPTION: Swift.String
  public var WRONG_PASSWORD: Swift.String
  public var WRONG_PUSH_MESSAGE: Swift.String
  public var DATA_COULD_NOT_ENCODED_TO_STRING: Swift.String
  public var STRING_COULD_NOT_ENCODED_TO_DATA: Swift.String
  public var CLOUDPUBLICKEY_IS_EMPTY: Swift.String
  public var CREATE_URL_ERROR: Swift.String
  public var VARIABLE_CASTING_FAILED: Swift.String
  public var SUCCES: Swift.String
  public var EMPTY: Swift.String
  public var JAIL_BREAK: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SetSecretQuestionAnswerInputParams : wallet_ios_sdk.BaseRequestModel {
  public var questionId: Swift.String
  public var answer: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "questionId", message: "Use questionId variable")
  public func getQuestionId() -> Swift.String
  @available(*, deprecated, renamed: "questionId", message: "Use questionId variable")
  public func setQuestionId(questionId: Swift.String)
  @available(*, deprecated, renamed: "answer", message: "Use answer variable")
  public func getAnswer() -> Swift.String
  @available(*, deprecated, renamed: "answer", message: "Use answer variable")
  public func setAnswer(answer: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetCardBinInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  public var bin: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "bin", message: "Use bin variable")
  public func getBin() -> Swift.String
  @available(*, deprecated, renamed: "bin", message: "Use bin variable")
  public func setBin(bin: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetLimitDefinitionV2OutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var limitDefinitions: [wallet_ios_sdk.LimitTypeModel]?
  @available(*, deprecated, renamed: "limitDefinitions", message: "Use limitDefinitions variable")
  public func getLimitDefinitions() -> [wallet_ios_sdk.LimitTypeModel]
  @available(*, deprecated, renamed: "limitDefinitions", message: "Use limitDefinitions variable")
  public func setLimitDefinitions(limitDefinitions: [wallet_ios_sdk.LimitTypeModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct WalletVirtualCardTxnsModel : Swift.Codable {
  public func getTxnId() -> Swift.Int64
  public mutating func setTxnId(txnId: Swift.Int64)
  public func getTxnTypeId() -> Swift.Int
  public mutating func setTxnTypeId(txnTypeId: Swift.Int)
  public func getAmount() -> Swift.Double
  public mutating func setAmount(amount: Swift.Double)
  public func getDate() -> Swift.String
  public mutating func setDate(date: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetLimitInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var limitInfo: [wallet_ios_sdk.LimitInfo]?
  @available(*, deprecated, renamed: "limitInfo", message: "Use limitInfo variable")
  public func getLimitInfo() -> [wallet_ios_sdk.LimitInfo]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LimitInfo : Swift.Codable {
  public var txnTypeId: Swift.Int?
  public var txnTypeName: Swift.String?
  public var limitGroup: [wallet_ios_sdk.LimitGroup]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LimitGroup : Swift.Codable {
  public var customerSegment: Swift.Int?
  public var limitValue: Swift.Double?
  public var limitPeriodTypeName: Swift.String?
  public var id: Swift.Int?
  public var limitCode: Swift.String?, limitDescripiton: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct AdresTip : Swift.Codable {
  public var aciklama: Swift.String?
  public var kod: Swift.Int?
  @available(*, deprecated, renamed: "aciklama", message: "Use aciklama variable")
  public func getAciklama() -> Swift.String
  @available(*, deprecated, renamed: "aciklama", message: "Use aciklama variable")
  public mutating func setAciklama(aciklama: Swift.String)
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public func getKod() -> Swift.Int
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public mutating func setKod(kod: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SectionResultListModel : Swift.Codable {
  public var adresNo: Swift.Int64?
  public var kod: Swift.Int64?
  public var binaKodu: Swift.Int64?
  public var binaNo: Swift.Int?
  public var icKapiNo: Swift.String?
  public var katNo: Swift.String?
  public var bagimsizBolumDurum: wallet_ios_sdk.AdresTip?
  public var bagimsizBolumTipi: wallet_ios_sdk.AdresTip?
  public var hataBilgisi: wallet_ios_sdk.AdresTip?
  public var yapiKullanimAmac: wallet_ios_sdk.AdresTip?
  @available(*, deprecated, renamed: "adresNo", message: "Use adresNo variable")
  public func getAdresNo() -> Swift.Int64
  @available(*, deprecated, renamed: "adresNo", message: "Use adresNo variable")
  public mutating func setAdresNo(adresNo: Swift.Int64)
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public func getKod() -> Swift.Int64
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public mutating func setKod(kod: Swift.Int64)
  @available(*, deprecated, renamed: "binaKodu", message: "Use binaKodu variable")
  public func getBinaKodu() -> Swift.Int64
  @available(*, deprecated, renamed: "binaKodu", message: "Use binaKodu variable")
  public mutating func setBinaKodu(binaKodu: Swift.Int64)
  @available(*, deprecated, renamed: "binaNo", message: "Use binaNo variable")
  public func getBinaNo() -> Swift.Int
  @available(*, deprecated, renamed: "binaNo", message: "Use binaNo variable")
  public mutating func setBinaNo(binaNo: Swift.Int)
  @available(*, deprecated, renamed: "icKapiNo", message: "Use icKapiNo variable")
  public func getIcKapiNo() -> Swift.String
  @available(*, deprecated, renamed: "icKapiNo", message: "Use icKapiNo variable")
  public mutating func setIcKapiNo(icKapiNo: Swift.String)
  @available(*, deprecated, renamed: "katNo", message: "Use katNo variable")
  public func getKatNo() -> Swift.String
  @available(*, deprecated, renamed: "katNo", message: "Use katNo variable")
  public mutating func setKatNo(katNo: Swift.String)
  @available(*, deprecated, renamed: "bagimsizBolumDurum", message: "Use bagimsizBolumDurum variable")
  public func getBagimsizBolumDurum() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "bagimsizBolumDurum", message: "Use bagimsizBolumDurum variable")
  public mutating func setBagimsizBolumDurum(bagimsizBolumDurum: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "bagimsizBolumTipi", message: "Use bagimsizBolumTipi variable")
  public func getBagimsizBolumTipi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "bagimsizBolumTipi", message: "Use bagimsizBolumTipi variable")
  public mutating func setBagimsizBolumTipi(bagimsizBolumTipi: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "yapiKullanimAmac", message: "Use yapiKullanimAmac variable")
  public func getYapiKullanimAmac() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "yapiKullanimAmac", message: "Use yapiKullanimAmac variable")
  public mutating func setYapiKullanimAmac(yapiKullanimAmac: wallet_ios_sdk.AdresTip)
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public func getHataBilgisi() -> wallet_ios_sdk.AdresTip
  @available(*, deprecated, renamed: "hataBilgisi", message: "Use hataBilgisi variable")
  public mutating func setHataBilgisi(hataBilgisi: wallet_ios_sdk.AdresTip)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BalanceInquiryOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var walletList: [wallet_ios_sdk.WalletListModel]?
  @available(*, deprecated, renamed: "walletList", message: "Use walletList variable")
  public func getWalletList() -> [wallet_ios_sdk.WalletListModel]
  @available(*, deprecated, renamed: "walletList", message: "Use walletList variable")
  public func setWalletList(walletList: [wallet_ios_sdk.WalletListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AskForMoneyOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetTxnTypeCategoryOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var getTxnTypeCategoryList: [wallet_ios_sdk.DictionaryModel]?
  @available(*, deprecated, renamed: "getTxnTypeCategoryList", message: "Use getTxnTypeCategoryList variable")
  public func getGetTxnTypeCategoryList() -> [wallet_ios_sdk.DictionaryModel]
  @available(*, deprecated, renamed: "getTxnTypeCategoryList", message: "Use getTxnTypeCategoryList variable")
  public func setGetTxnTypeCategoryList(getTxnTypeCategoryList: [wallet_ios_sdk.DictionaryModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetReceiptOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var receiptBase64Content: Swift.String?
  @available(*, deprecated, renamed: "receiptBase64Content", message: "Use receiptBase64Content variable")
  public func getReceiptBase64Content() -> Swift.String
  @available(*, deprecated, renamed: "receiptBase64Content", message: "Use receiptBase64Content variable")
  public func setReceiptBase64Content(receiptBase64Content: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetCampaignsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var campaignTypeId: Swift.Int
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetNationalitiesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var nationalities: [wallet_ios_sdk.NationalitiesModel]?
  @available(*, deprecated, renamed: "nationalities", message: "Use nationalities variable")
  public func getNationalities() -> [wallet_ios_sdk.NationalitiesModel]
  @available(*, deprecated, renamed: "nationalities", message: "Use nationalities variable")
  public func setNationalities(nationalities: [wallet_ios_sdk.NationalitiesModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ActivatePhysicalCardInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getCardToken() -> Swift.String
  public func setCardToken(cardToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAllSectionWithBuildingCodeInKpsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var sectionResultList: [wallet_ios_sdk.SectionResultListModel]?
  @available(*, deprecated, renamed: "sectionResultList", message: "Use sectionResultList variable")
  public func getSectionResultList() -> [wallet_ios_sdk.SectionResultListModel]
  @available(*, deprecated, renamed: "sectionResultList", message: "Use sectionResultList variable")
  public func setSectionResultList(sectionResultList: [wallet_ios_sdk.SectionResultListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetAllSectionWithBuildingCodeInKpsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var buildingCode: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "buildingCode", message: "Use buildingCode variable")
  public func getBuildingCode() -> Swift.Int
  @available(*, deprecated, renamed: "buildingCode", message: "Use buildingCode variable")
  public func setBuildingCode(buildingCode: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UpdatePrepaidCardStatusInputParams : wallet_ios_sdk.BaseRequestModel {
  public var institutionCardStatus: Swift.String
  public var cardToken: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @available(*, deprecated, renamed: "institutionCardStatus", message: "Use institutionCardStatus variable")
  public func getInstitutionCardStatus() -> Swift.String
  @available(*, deprecated, renamed: "institutionCardStatus", message: "Use institutionCardStatus variable")
  public func setInstitutionCardStatus(institutionCardStatus: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct GetWalletVirtualCardTxnsDailyByAccountIdModel : Swift.Codable {
  public var totalAmount: Swift.Double?
  public var merchantCategoryGroupId: Swift.Int?
  public var date: Swift.String?
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public func getTotalAmount() -> Swift.Double
  @available(*, deprecated, renamed: "totalAmount", message: "Use totalAmount variable")
  public mutating func setTotalAmount(totalAmount: Swift.Double)
  @available(*, deprecated, renamed: "merchantCategoryGroupId", message: "Use merchantCategoryGroupId variable")
  public func getMerchantCategoryGroupId() -> Swift.Int
  @available(*, deprecated, renamed: "merchantCategoryGroupId", message: "Use merchantCategoryGroupId variable")
  public mutating func setMerchantCategoryGroupId(merchantCategoryGroupId: Swift.Int)
  @available(*, deprecated, renamed: "date", message: "Use date variable")
  public func getDate() -> Swift.String
  @available(*, deprecated, renamed: "date", message: "Use date variable")
  public mutating func setDate(date: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class NotifyOutputParams : wallet_ios_sdk.BaseResponse {
  override public init()
  override public init(_ meta: wallet_ios_sdk.Meta)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InvoiceListCollectionTypesInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UpdateDigitalSlipPreferenceInputParams : wallet_ios_sdk.BaseRequestModel {
  public var digitalSlipPreferenceId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "digitalSlipPreferenceId", message: "Use digitalSlipPreferenceId variable")
  public func getDigitalSlipPreferenceId() -> Swift.Int64
  @available(*, deprecated, renamed: "digitalSlipPreferenceId", message: "Use digitalSlipPreferenceId variable")
  public func setDigitalSlipPreferenceId(digitalSlipPreferenceId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BankAccountDeleteInputParams : wallet_ios_sdk.BaseRequestModel {
  public var targetAccountID: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "targetAccountID", message: "Use targetAccountID variable")
  public func getTargetAccountID() -> Swift.Int64
  @available(*, deprecated, renamed: "targetAccountID", message: "Use targetAccountID variable")
  public func setTargetAccountID(targetAccountID: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CompleteRegistrationOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var accountId: Swift.Int64?
  public var gender: Swift.Int64?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct WalletCardModel {
  public var logo: UIKit.UIImage?
  public var backgroundImage: UIKit.UIImage?
  public var backgroundColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor
  public init()
}
@_hasMissingDesignatedInitializers public class Instance {
  final public let ERRORS: wallet_ios_sdk.Errors
  final public let DESC: wallet_ios_sdk.ErrorDescription
  final public let GENERATOR: wallet_ios_sdk.ResultGenerator
  final public let METHODS: wallet_ios_sdk.Methods
  public static let THIS: wallet_ios_sdk.Instance
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetAccountActionsReceiptInputParams : wallet_ios_sdk.BaseRequestModel {
  public var accountId: Swift.Int64?
  public var startDate: Swift.String
  public var endDate: Swift.String
  public var cardToken: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func setAccountId(accountId: Swift.Int64)
  @available(*, deprecated, renamed: "startDate", message: "Use startDate variable")
  public func getStartDate() -> Swift.String
  @available(*, deprecated, renamed: "startDate", message: "Use startDate variable")
  public func setStartDate(startDate: Swift.String)
  @available(*, deprecated, renamed: "endDate", message: "Use endDate variable")
  public func getEndDate() -> Swift.String
  @available(*, deprecated, renamed: "endDate", message: "Use endDate variable")
  public func setEndDate(endDate: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct ExpenseAmountListModel : Swift.Codable {
  public func getTxnTypeId() -> Swift.Int
  public mutating func setTxnTypeId(txnTypeId: Swift.Int)
  public func getAmount() -> Swift.Double
  public mutating func setAmount(amount: Swift.Double)
  public func getExpenseAmount() -> Swift.Double
  public mutating func setExpenseAmount(expenseAmount: Swift.Double)
  public func getTotalAmount() -> Swift.Double
  public mutating func setTotalAmount(totalAmount: Swift.Double)
  public func getvisible() -> Swift.Bool
  public mutating func setVisible(visible: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExpensesModel : Swift.Codable {
  public var txnTypeId: Swift.Int?
  public var persentage: Swift.Double?
  public var amount: Swift.Double?
  public var visible: Swift.Bool?
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int
  @available(*, deprecated, renamed: "persentage", message: "Use persentage variable")
  public func getPersentage() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public func getVisible() -> Swift.Bool
  @available(*, deprecated, renamed: "visible", message: "Use visible variable")
  public mutating func setVisible(visible: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SetOpenConsentPreferencesInputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletOwnerPersonalizedAdvertising: Swift.Bool
  public var walletPersonalizedAdvertising: Swift.Bool
  public var walletOwnerDataEnrichment: Swift.Bool
  public var walletDataEnrichment: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "walletOwnerPersonalizedAdvertising", message: "Use walletOwnerPersonalizedAdvertising variable")
  public func getWalletOwnerPersonalizedAdvertising() -> Swift.Bool
  @available(*, deprecated, renamed: "walletOwnerPersonalizedAdvertising", message: "Use walletOwnerPersonalizedAdvertising variable")
  public func setWalletOwnerPersonalizedAdvertising(walletOwnerPersonalizedAdvertising: Swift.Bool)
  @available(*, deprecated, renamed: "walletPersonalizedAdvertising", message: "Use walletPersonalizedAdvertising variable")
  public func getWalletPersonalizedAdvertising() -> Swift.Bool
  @available(*, deprecated, renamed: "walletPersonalizedAdvertising", message: "Use walletPersonalizedAdvertising variable")
  public func setWalletPersonalizedAdvertising(walletPersonalizedAdvertising: Swift.Bool)
  @available(*, deprecated, renamed: "walletOwnerDataEnrichment", message: "Use walletOwnerDataEnrichment variable")
  public func getWalletOwnerDataEnrichment() -> Swift.Bool
  @available(*, deprecated, renamed: "walletOwnerDataEnrichment", message: "Use walletOwnerDataEnrichment variable")
  public func setWalletOwnerDataEnrichment(walletOwnerDataEnrichment: Swift.Bool)
  @available(*, deprecated, renamed: "walletDataEnrichment", message: "Use walletDataEnrichment variable")
  public func getWalletDataEnrichment() -> Swift.Bool
  @available(*, deprecated, renamed: "walletDataEnrichment", message: "Use walletDataEnrichment variable")
  public func setWalletDataEnrichment(walletDataEnrichment: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InitParam : wallet_ios_sdk.BaseRequest {
  public func getBundle() -> Foundation.Bundle
  public func setBundle(bundle: Foundation.Bundle)
  public func getEnvironmentInfo() -> Swift.String
  public func setEnvironmentInfo(environmentInfo: Swift.String)
  public func getRunLogger() -> Swift.Bool
  public func setRunLogger(runLogger: Swift.Bool)
  public func getAppID() -> Swift.String
  public func setAppID(appID: Swift.String)
  public func getClientRandomNumber() -> Swift.String
  public func setClientRandomNumber(clientRandomNumber: Swift.String)
  @objc override dynamic public init()
  override public init(_ proecessRef: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetCorporationOperationParametersInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  public var corporationCode: Swift.String
  public var collectionTypeCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getCollectionTypeCode() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setCollectionTypeCode(collectionTypeCode: Swift.String)
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetLimitDefinitionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var limitDefinition: [wallet_ios_sdk.LimitDefinitionModel]?
  @available(*, deprecated, renamed: "limitDefinition", message: "Use limitDefinition variable")
  public func getLimitDefinition() -> [wallet_ios_sdk.LimitDefinitionModel]
  @available(*, deprecated, renamed: "limitDefinition", message: "Use limitDefinition variable")
  public func setLimitDefinition(limitDefinition: [wallet_ios_sdk.LimitDefinitionModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct InvoicesModel : Swift.Codable {
  public func getCustomerName() -> Swift.String
  public mutating func setCustomerName(customerName: Swift.String)
  public func getInvoiceNumber() -> Swift.String
  public mutating func setInvoiceNumber(invoiceNumber: Swift.String)
  public func getIssueDate() -> Swift.String
  public mutating func setIssueDate(issueDate: Swift.String)
  public func getDueDate() -> Swift.String
  public mutating func setDueDate(dueDate: Swift.String)
  public func getInvoiceAmount() -> Swift.Double
  public mutating func setInvoiceAmount(invoiceAmount: Swift.Double)
  public func getkey1() -> Swift.String
  public mutating func setkey1(key1: Swift.String)
  public func getKey2() -> Swift.String
  public mutating func setKey2(key2: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public let HOST_SWITCH: Swift.String
public let HOST_ACCOUNT_ENC_SWITCH: Swift.String
public var REQUEST_PUBLIC_KEY: Swift.String
public var REGISTER_DEVICE: Swift.String
public var SCSESSION: Swift.String
public var HOST_CREATE: Swift.String
public let PARAMETER_UNIQUE_MPA_NUMBER: Swift.String
public let PARAMETER_FCM_ID: Swift.String
public let PARAMETER_FINGER_PRINT: Swift.String
public let PARAMETER_APP_ID: Swift.String
public let PARAMETER_CLIENT_RANDOM_NUMBER: Swift.String
public let PARAMETER_MESSAGE_COUNT: Swift.String
public let PARAMETER_WALLET_NAME: Swift.String
public let PARAMETER_CURRENCY: Swift.String
public let PARAMETER_ENC_DATA: Swift.String
public let POST: Swift.String
public var ENVIRONMENT_UAT: Swift.String
public var ENVIRONMENT_PRE_PROD: Swift.String
public var ENVIRONMENT_PROD: Swift.String
public var ENVIRONMENT_TEST: Swift.String
public var uniqueMPANumber: Swift.String
public var publicIPAddress: Swift.String
public var baseTenantId: Swift.Int
public var mpaFingerPrint: Swift.String
public var messageGUID: Swift.String
public var randomNum: Swift.String
public var mpaPublicKey: Swift.String
public var clientRandomNumber: Swift.String
public var sessionKey: Swift.String
public var messageCount: Swift.String
public var randA: Swift.String
public var runLoggerValue: Swift.Bool
public var secureRandomNumber: Swift.String
public var absentSession: Swift.String
public var SessionUniqueID: Swift.String
public var isSuccessNotify: Swift.Bool
public var resultCodeSuccess: Swift.Int
public var resultCodeError: Swift.Int
public var bundlePackageName: Swift.String
public func insertLog(message: Swift.String)
public struct ValueModel : Swift.Codable {
  public var orderNo: Swift.Int?
  public var label: Swift.String?
  public var valueDescription: Swift.String?
  public var padWithZero: Swift.Int?, minimum: Swift.Int?, maximum: Swift.Int?
  public init()
  public func getOrderNo() -> Swift.Int
  public func getLabel() -> Swift.String
  public func getValueDescription() -> Swift.String
  public func getPadWithZero() -> Swift.Int
  public func getMinimum() -> Swift.Int
  public func getMaximum() -> Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetWalletVirtualCardTxnsMonthlyByAccountIdInputParams : wallet_ios_sdk.BaseRequestModel {
  public var merchantCategoryGroupId: Swift.Int16
  public var txnCategoryId: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "merchantCategoryGroupId", message: "Use merchantCategoryGroupId variable")
  public func getMerchantCategoryGroupId() -> Swift.Int16
  @available(*, deprecated, renamed: "merchantCategoryGroupId", message: "Use merchantCategoryGroupId variable")
  public func setMerchantCategoryGroupId(merchantCategoryGroupId: Swift.Int16)
  @available(*, deprecated, renamed: "txnCategoryId", message: "Use txnCategoryId variable")
  public func getTxnCategoryId() -> Swift.Int
  @available(*, deprecated, renamed: "txnCategoryId", message: "Use txnCategoryId variable")
  public func setTxnCategoryId(txnCategoryId: Swift.Int)
  @available(*, deprecated, renamed: "size", message: "Use size variable")
  public func getSize() -> Swift.Int
  @available(*, deprecated, renamed: "size", message: "Use size variable")
  public func setSize(size: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetDigitalSlipOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var base64Content: Swift.String?
  @available(*, deprecated, renamed: "base64Content", message: "Use base64Content variable")
  public func getDigitalSlipBase64Content() -> Swift.String
  @available(*, deprecated, renamed: "base64Content", message: "Use base64Content variable")
  public func setDigitalSlipBase64Content(receiptBase64Content: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetInstitutionNameByIbanOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var institutionName: Swift.String?
  @available(*, deprecated, renamed: "institutionName", message: "Use institutionName variable")
  public func getInstitutionName() -> Swift.String
  @available(*, deprecated, renamed: "institutionName", message: "Use institutionName variable")
  public func setInstitutionName(institutionName: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class DgFinGetTokenLoanCreateInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phoneNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddBalanceToWalletByStoredCardOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var htmlForm: Swift.String?
  @available(*, deprecated, renamed: "htmlForm", message: "Use htmlForm variable")
  public func getHtmlFormn() -> Swift.String
  @available(*, deprecated, renamed: "htmlForm", message: "Use htmlForm variable")
  public func setHtmlForm(htmlForm: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetPrepaidCardTrnPermissionInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cardToken: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResultGenerator {
  public func succesGenerator(method: Swift.Int, processRef: Swift.String) -> wallet_ios_sdk.Meta
  public func succesResponseGenerator(method: Swift.Int, responseCode: Swift.Int, message: Swift.String, processRef: Swift.String) -> wallet_ios_sdk.Meta
  public func responseMetaGenerator(method: Swift.Int, responseCode: Swift.Int, trace: Swift.String, responseMessage: Swift.String, processRef: Swift.String) -> wallet_ios_sdk.Meta
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetEpinDebtInfoInputParam : wallet_ios_sdk.BaseRequestModel {
  public var corporationCode: Swift.String
  public var referenceList: [wallet_ios_sdk.ReferenceListModel]
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "referenceList", message: "Use referenceList variable")
  public func getReferenceList() -> [wallet_ios_sdk.ReferenceListModel]
  @available(*, deprecated, renamed: "referenceList", message: "Use referenceList variable")
  public func setReferenceList(referenceList: [wallet_ios_sdk.ReferenceListModel])
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CardAndBankInputParams : wallet_ios_sdk.BaseRequestModel {
  public var binNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "binNumber", message: "Use binNumber variable")
  public func getBinNumber() -> Swift.String
  @available(*, deprecated, renamed: "binNumber", message: "Use binNumber variable")
  public func setBinNumber(binNumber: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetJobsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var jobList: [wallet_ios_sdk.JobListModel]?
  @available(*, deprecated, renamed: "questionList", message: "Use questionList variable")
  public func getJobList() -> [wallet_ios_sdk.JobListModel]
  @available(*, deprecated, renamed: "questionList", message: "Use questionList variable")
  public func setJobList(jobList: [wallet_ios_sdk.JobListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BankAccountCreateOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var targetAccountId: Swift.Int64?
  @available(*, deprecated, renamed: "targetAccountId", message: "Use targetAccountId variable")
  public func getTargetAccountID() -> Swift.Int64
  @available(*, deprecated, renamed: "targetAccountId", message: "Use targetAccountId variable")
  public func setTargetAccountID(targetAccountID: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionRestrictionList : Swift.Codable {
  public var operationMethodId: Swift.Int16?
  public var description: Swift.String?
  public var operationPermission: Swift.Int16?
  public func getOperationMethodId() -> Swift.Int16
  public mutating func setOperationMethodId(operationMethodId: Swift.Int16)
  public func getOperationPermission() -> Swift.Int16
  public mutating func setOperationPermission(operationPermission: Swift.Int16)
  public func getDescription() -> Swift.String
  public mutating func setDescription(description: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ApplyPrepaidCardOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SetPasswordInputParams : wallet_ios_sdk.BaseRequestModel {
  public var password: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func getPassword() -> Swift.String
  @available(*, deprecated, renamed: "password", message: "Use password variable")
  public func setPassword(password: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ForgotPasswordWithParametersOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var unblockDatetime: Swift.String?
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func getUnblockDatetime() -> Swift.String
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func setUnblockDatetime(unblockDatetime: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class WalletPaymentInputParams : wallet_ios_sdk.BaseRequestModel {
  public var paymentType: Swift.String
  public var amount: Foundation.Decimal
  public var expenseAmount: Foundation.Decimal
  public var walletPaymentDescription: Swift.String
  public var walletVirtualCardToken: Swift.String
  public var storedCardToken: Swift.String
  public var userValidationType: Swift.String
  public var cardholderName: Swift.String
  public var cardNumber: Swift.String
  public var expiryMonth: Swift.String
  public var expiryYear: Swift.String
  public var cvv2: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "paymentType", message: "Use paymentType variable")
  public func getPaymentType() -> Swift.String
  @available(*, deprecated, renamed: "paymentType", message: "Use paymentType variable")
  public func setPaymentType(paymentType: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getWalletPaymentDescription() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setWalletPaymentDescription(walletPaymentDescription: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getWalletVirtualCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setWalletVirtualCardToken(walletVirtualCardToken: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getStoredCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setStoredCardToken(storedCardToken: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getUserValidationType() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setUserValidationType(userValidationType: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardholderName() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardholderName(cardholderName: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardNumber() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardNumber(cardNumber: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getExpiryMonth() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setExpiryMonth(expiryMonth: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getExpiryYear() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setExpiryYear(expiryYear: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCvv2() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCvv2(cvv2: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AcceptSplitTheBillInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getSplitTheBillId() -> Swift.Int64
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setSplitTheBillId(splitTheBillId: Swift.Int64)
  @available(*, deprecated, renamed: "descriptionAcceptSplitTheBill", message: "Use descriptionAcceptSplitTheBill variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "descriptionAcceptSplitTheBill", message: "Use descriptionAcceptSplitTheBill variable")
  public func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func getSourceAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func setSourceAccountId(sourceAccountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RefundTopUpOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SetDefaultAccountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var accountId: Swift.Int64
  public var clientDeviceTypeId: Swift.Int64
  public func setAccountId(accountId: Swift.Int64)
  public func setClientDeviceTypeId(clientDeviceTypeId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
public struct CityResultListModel : Swift.Codable {
  public var ad: Swift.String?
  public var kod: Swift.Int?
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public func getAd() -> Swift.String
  @available(*, deprecated, renamed: "ad", message: "Use ad variable")
  public mutating func setAd(ad: Swift.String)
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public func getKod() -> Swift.Int
  @available(*, deprecated, renamed: "kod", message: "Use kod variable")
  public mutating func setKod(kod: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TypesListModel : Swift.Codable {
  public var processType: Swift.Int?
  public var typeNumber: Swift.Int?
  public var typeName: Swift.String?
  @available(*, deprecated, renamed: "processType", message: "Use processType variable")
  public func getProcessType() -> Swift.Int
  @available(*, deprecated, renamed: "processType", message: "Use processType variable")
  public mutating func setProcessType(processType: Swift.Int)
  @available(*, deprecated, renamed: "typeNumber", message: "Use typeNumber variable")
  public func getTypeNumber() -> Swift.Int
  @available(*, deprecated, renamed: "typeNumber", message: "Use typeNumber variable")
  public mutating func setTypeNumber(typeNumber: Swift.Int)
  @available(*, deprecated, renamed: "typeName", message: "Use typeName variable")
  public func getTypeName() -> Swift.String
  @available(*, deprecated, renamed: "typeName", message: "Use typeName variable")
  public mutating func setTypeName(typeName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class BankAccountUpdateInputParams : wallet_ios_sdk.BaseRequestModel {
  public var accountName: Swift.String
  public var targetAccountId: Swift.Int64
  public var isDefaultBankAccount: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "targetAccountId", message: "Use targetAccountId variable")
  public func getTargetAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "targetAccountId", message: "Use targetAccountId variable")
  public func setTargetAccountId(targetAccountId: Swift.Int64)
  @available(*, deprecated, renamed: "accountName", message: "Use accountName variable")
  public func getAccountName() -> Swift.String
  @available(*, deprecated, renamed: "accountName", message: "Use accountName variable")
  public func setAccountName(AccountName: Swift.String)
  @available(*, deprecated, renamed: "isDefaultBankAccount", message: "Use isDefaultBankAccount variable")
  public func getIsDefaultBankAccount() -> Swift.String
  @available(*, deprecated, renamed: "isDefaultBankAccount", message: "Use isDefaultBankAccount variable")
  public func setIsDefaultBankAccount(isDefaultBankAccount: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InvoiceInquiryInputParams : wallet_ios_sdk.BaseRequestModel {
  public var institutionNumber: Swift.Int
  public var value1: Swift.String
  public var value2: Swift.String
  public var value3: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public func getInstitutionNumber() -> Swift.Int
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public func setInstitutionNumber(institutionNumber: Swift.Int)
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public func getValue1() -> Swift.String
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public func setValue1(value1: Swift.String)
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public func getValue2() -> Swift.String
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public func setValue2(value2: Swift.String)
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public func getValue3() -> Swift.String
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public func setValue3(value3: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChangePasswordOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class AskForMoneyInputParams : wallet_ios_sdk.BaseRequestModel {
  public var destinationPhone: Swift.String
  public var descriptionAskForMoney: Swift.String
  public var amount: Foundation.Decimal
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "destinationPhone", message: "Use destinationPhone variable")
  public func getDestinationPhone() -> Swift.String
  @available(*, deprecated, renamed: "destinationPhone", message: "Use destinationPhone variable")
  public func setDestinationPhone(destinationPhone: Swift.String)
  @available(*, deprecated, renamed: "descriptionAskForMoney", message: "Use descriptionAskForMoney variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "descriptionAskForMoney", message: "Use descriptionAskForMoney variable")
  public func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SetPrepaidCardPinInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cardToken: Swift.String
  public var oldPinBlock: Swift.String
  public var newPinBlock: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  public func setCardToken(cardToken: Swift.String)
  public func setOldPinBlock(oldPinBlock: Swift.String)
  public func setNewPinBlock(newPinBlock: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetReceiptInputParams : wallet_ios_sdk.BaseRequestModel {
  public var refNumber: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
public struct NationalitiesModel : Swift.Codable {
  public var code: Swift.String?
  public var name: Swift.String?
  public var alpha2: Swift.String?
  public var alpha3: Swift.String?
  public var numeric: Swift.String?
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public func getCode() -> Swift.String
  @available(*, deprecated, renamed: "code", message: "Use code variable")
  public mutating func setCode(code: Swift.String)
  @available(*, deprecated, renamed: "alpha2", message: "Use alpha2 variable")
  public func getAlpha2() -> Swift.String
  @available(*, deprecated, renamed: "alpha2", message: "Use alpha2 variable")
  public mutating func setAlpha2(alpha2: Swift.String)
  @available(*, deprecated, renamed: "alpha3", message: "Use alpha3 variable")
  public func getAlpha3() -> Swift.String
  @available(*, deprecated, renamed: "alpha3", message: "Use alpha3 variable")
  public mutating func setAlpha3(alpha3: Swift.String)
  @available(*, deprecated, renamed: "numeric", message: "Use numeric variable")
  public func getNumeric() -> Swift.String
  @available(*, deprecated, renamed: "numeric", message: "Use numeric variable")
  public mutating func setNumeric(numeric: Swift.String)
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public mutating func setName(name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class TransferBetweenAccountsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var sourceAccountId: Swift.Int64
  public var destinationAccountId: Swift.Int64
  public var amount: Foundation.Decimal
  public var expenseAmount: Foundation.Decimal
  public var descriptionTransferMoney: Swift.String
  public var orderId: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "descriptionTransferMoney", message: "Use descriptionTransferMoney variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "descriptionTransferMoney", message: "Use descriptionTransferMoney variable")
  public func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func getSourceAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func setSourceAccountId(sourceAccountId: Swift.Int64)
  @available(*, deprecated, renamed: "destinationAccountId", message: "Use destinationAccountId variable")
  public func getDestinationAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "destinationAccountId", message: "Use destinationAccountId variable")
  public func setDestinationAccountId(destinationAccountId: Swift.Int64)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func setOrderId(orderId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerRemainingLimitInfoV3OutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerRemainingLimits: [wallet_ios_sdk.LimitTypeModel]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetTransactionRestrictionsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var operationMethodId: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Errors {
  public var EMPTY: Swift.Int
  public var SUCCES: Swift.Int
  public var M_REQEUST_JSON_PARSE: Swift.Int
  public var M_RESPONSE_JSON_PARSE: Swift.Int
  public var GLOBAL_EXCEPTION: Swift.Int
  public var RESPONSE_GLOBAL_EXCEPTION: Swift.Int
  public var M_REQUEST_HTTP_ERROR: Swift.Int
  public var M_FILE_ERROR: Swift.Int
  public var RECORD_NOT_FOUND: Swift.Int
  public var REGISTERED_DEVICE_NOT_FOUND: Swift.Int
  public var REGISTERED_DEVICE_GET_ERROR: Swift.Int
  public var CUSTOMER_NOT_FOUND: Swift.Int
  public var CUSTOMER_DEVICE_NOT_FOUND: Swift.Int
  public var CUSTOMER_NOT_ACTIVE: Swift.Int
  public var CUSTOMER_ALREADY_EXIST: Swift.Int
  public var CUSTOER_GET_ERROR: Swift.Int
  public var CUSTOER_ADDED: Swift.Int
  public var CUSTOER_ADD_ERROR: Swift.Int
  public var CUSTOER_ADD_DEVICE_RROR: Swift.Int
  public var CUSTOER_UPDATED: Swift.Int
  public var CUSTOER_UPDATE_ERROR: Swift.Int
  public var SET_PASSWORD_ERROR: Swift.Int
  public var CHANGE_PASSWORD_ERROR: Swift.Int
  public var FORGOT_PASSWORD_ERROR: Swift.Int
  public var PASSWORD_ERROR: Swift.Int
  public var REQUEST_NULL: Swift.Int
  public var ACCCOUNT_ALREADY_EXIST: Swift.Int
  public var ACCCOUNT_UPDATED: Swift.Int
  public var ACCOUNT_ADD_ERROR: Swift.Int
  public var ACCOUNT_NOT_ACTIVE: Swift.Int
  public var ACCOUNT_UPDATE_ERROR: Swift.Int
  public var ACCOUNT_INCUFFICENT_FUNDS: Swift.Int
  public var ACCOUNT_NOT_FOUND: Swift.Int
  public var BANK_ACCOUNT_NOT_FOUND: Swift.Int
  public var DELETE_BANK_ACCOUNT_ERROR: Swift.Int
  public var DELETE_DEFAULT_BANK_ACCOUNT_ERROR: Swift.Int
  public var HASH_ERROR: Swift.Int
  public var AMOUNT_ERROR: Swift.Int
  public var UNDEFINED_CURRENCY: Swift.Int
  public var TARGET_CUSTOMER_NO_REQUIRED: Swift.Int
  public var ORDER_REQUIRED: Swift.Int
  public var FAILED_TRANSACTION_EXIST: Swift.Int
  public var OUT_OF_TRANSFER_TIME: Swift.Int
  public var HOLIDAYS_NOT_DEFINED: Swift.Int
  public var TODAYS_IS_HOLIDAY: Swift.Int
  public var INVALID_IBAN: Swift.Int
  public var TOKEN_IS_REQUIRED: Swift.Int
  public var ATM_TOKEN_NOT_FOUND: Swift.Int
  public var ACCOUNT_BALANCE_ERROR: Swift.Int
  public var TOKEN_MATCH_ERROR: Swift.Int
  public var ALREADY_REFUNDED: Swift.Int
  public var NOT_ABLE_REFUND: Swift.Int
  public var CLIENT_ERROR: Swift.Int
  public var VPOS_TRANSACTION_FAILED: Swift.Int
  public var BALANCE_MUST_BE_ZERO: Swift.Int
  public var PASSWORD_NOT_DEFINED: Swift.Int
  public var PASSWORD_REQUIRED: Swift.Int
  public var IDENTY_NUMBER_MATCH_ERROR: Swift.Int
  public var FORGOT_PASSWORD_BLOCKED: Swift.Int
  public var LOGIN_TEMPORARY_BLOCKED: Swift.Int
  public var LOGIN_BLOCKED: Swift.Int
  public var IDENTY_LENGHT_ERROR: Swift.Int
  public var SUBJECT_REQUIRED: Swift.Int
  public var BODY_REQUIRED: Swift.Int
  public var CLIENT_MAIL_ADDRESS_REQUIRED: Swift.Int
  public var SUPPORT_TYPE_REQUIRED: Swift.Int
  public var UNKNOWN_SUPPORT_TYPE: Swift.Int
  public var MAIL_ADDRESS_VALIDATION_ERROR: Swift.Int
  public var TARGET_ACCOUNT_INFORMATION_REQUIRED: Swift.Int
  public var BIRTH_DATE_VALIDATION_ERROR: Swift.Int
  public var SERI_SIRA_REQUIRED: Swift.Int
  public var CUSTOMER_STATUS_FOR_FORGOT_PASSWORD: Swift.Int
  public var CUSTOMER_SESSION_ISNT_ACTIVE: Swift.Int
  public var INVALID_OPERATION_REQUEST: Swift.Int
  public var AGREEMENT_NOT_FOUND: Swift.Int
  public var LATEST_AGREEMENT_MUST_BE_CONFIRMED: Swift.Int
  public var AGREEMENT_VERSION_REQUIRED: Swift.Int
  public var THIS_TXN_ALREADY_COMPLETED: Swift.Int
  public var BANK_ACCOUNT_EXIST: Swift.Int
  public var FILE_SIZE_ERROR: Swift.Int
  public var FILE_EXTENSION_ERROR: Swift.Int
  public var AGREEMENT_ALREADY_CONFIRMED: Swift.Int
  public var ORDER_ID_MUST_BE_UNIQ: Swift.Int
  public var VPOS_REQUEST_IS_READY: Swift.Int
  public var VPOS_ERROR_OCCURED_WHILE_REQUEST: Swift.Int
  public var VPOS_REQUEST_STATUS_NOT_ELIGIBLE: Swift.Int
  public var VPOS_TXN_VOIDED_OR_REFUNDED: Swift.Int
  public var VPOS_TXN_IS_SUCCESEDED_ACCOUNT_UPDATE_FAILED: Swift.Int
  public var PHONE_NUMBERS_NOT_MATHCED: Swift.Int
  public var UNDEFINED_ACTION_TYPE: Swift.Int
  public var NOT_ALLOWED_ACTION_TYPE: Swift.Int
  public var OTP_LIMIT_REACHED: Swift.Int
  public var SUPPORT_LIMIT_REACHED: Swift.Int
  public var CUSTOMER_PHONE_AND_IDENTITY_MISMATHC: Swift.Int
  public var ALLOWED_AGE_TO_CREATE_ACCOUNT: Swift.Int
  public var BLACK_LIST: Swift.Int
  public var RECONSILLATION_MISMATHC: Swift.Int
  public var VALIDATION_ERROR: Swift.Int
  public var IDENTY_VERIFICATION_FAIL: Swift.Int
  public var IDENTY_VERIFICATION_ERROR: Swift.Int
  public var OTP_REQUEST_FAILED: Swift.Int
  public var OTP_VERIFICATION_FAILED: Swift.Int
  public var OTP_TOKEN_NOT_FOUND: Swift.Int
  public var OTP_TOKEN_VERIFCATION_SUCCESEDED: Swift.Int
  public var SESSION_NOT_FOUND: Swift.Int
  public var SESSION_CLOSE_ERROR: Swift.Int
  public var SESSION_OPEN_ERROR: Swift.Int
  public var PASSWORD_VALIDATION_ERROR: Swift.Int
  public var IDENTY_VERIFICATION_RESPONSE_FAIL: Swift.Int
  public var LIMIT_ACCOUNT_MAX_AMOUNT: Swift.Int
  public var LIMIT_MAX_TXN_AMOUNT: Swift.Int
  public var LIMIT_MAX_WITHDRAW_AMOUNT: Swift.Int
  public var LIMIT_MAX_TRANSFER_AMOUNT: Swift.Int
  public var LIMIT_DAILY_TRANSFER_COUNT: Swift.Int
  public var LIMIT_DAILY_TRANSFER_AMOUNT: Swift.Int
  public var LIMIT_MONTHLY_TRANSFER_COUNT: Swift.Int
  public var LIMIT_MONTHLY_TRANSFER_AMOUNT: Swift.Int
  public var LIMIT_YEARLY_TRANSFER_COUNT: Swift.Int
  public var LIMIT_YEARLY_TRANSFER_AMOUNT: Swift.Int
  public var LIMIT_DAILY_TXT_COUNT: Swift.Int
  public var LIMIT_DAILY_TXT_AMOUNT: Swift.Int
  public var LIMIT_MONTHLY_TXT_COUNT: Swift.Int
  public var LIMIT_MONTHLY_TXT_AMOUNT: Swift.Int
  public var LIMIT_YEARLY_TXT_COUNT: Swift.Int
  public var LIMIT_YEARLY_TXT_AMOUNT: Swift.Int
  public var LIMIT_DAILY_ATM_COUNT: Swift.Int
  public var LIMIT_DAILY_ATM_AMOUNT: Swift.Int
  public var LIMIT_MONTHLY_ATM_COUNT: Swift.Int
  public var LIMIT_MONTHLY_ATM_AMOUNT: Swift.Int
  public var LIMIT_YEARLY_ATM_COUNT: Swift.Int
  public var LIMIT_YEARLY_ATM_AMOUNT: Swift.Int
  public var LIMIT_MAX_TRANSFER_AMOUNT_BANK: Swift.Int
  public var LIMIT_MAX_TRANSFER_AMOUNT_VPOS: Swift.Int
  public var LIMIT_DAILY_BANK_COUNT: Swift.Int
  public var LIMIT_DAILY_BANK_AMOUNT: Swift.Int
  public var LIMIT_MONTHLY_BANK_COUNT: Swift.Int
  public var LIMIT_MONTHLY_BANK_AMOUNT: Swift.Int
  public var LIMIT_YEALRY_BANK_COUNT: Swift.Int
  public var LIMIT_YEARLY_BANK_AMOUNT: Swift.Int
  public var LIMIT_DAILY_VPOS_COUNT: Swift.Int
  public var LIMIT_DAILY_VPOS_AMOUNT: Swift.Int
  public var LIMIT_MONTHLY_VPOS_COUNT: Swift.Int
  public var LIMIT_MONTHLY_VPOS_AMOUNT: Swift.Int
  public var LIMIT_YEALRY_VPOS_COUNT: Swift.Int
  public var LIMIT_YEARLY_VPOS_AMOUNT: Swift.Int
  public var DATABASE_ERROR: Swift.Int
  public var NOTIFY_ERROR: Swift.Int
  public var NETWORK_ERROR: Swift.Int
  public var SESSION_ERROR: Swift.Int
  public var LOGIN_RESPONSE_HASH_ERROR: Swift.Int
  public var NOTIFY_PARSE_ERROR: Swift.Int
  public var PUSH_MESSAGE_ERROR: Swift.Int
  public var DATA_ENCODING_TO_STRING_ERROR: Swift.Int
  public var STRING_ENCODING_TO_DATA_ERROR: Swift.Int
  public var CLOUDPUBLICKEY_IS_EMPTY: Swift.Int
  public var CREATE_URL_ERROR: Swift.Int
  public var VARIBALE_CASTING_ERROR: Swift.Int
  public var JAIL_BREAK: Swift.Int
  @objc deinit
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func userVerificationStatusInterface(userVerificationStatusInputParams: wallet_ios_sdk.UserVerificationStatusInputParams, completion: @escaping (_ result: wallet_ios_sdk.UserVerificationStatusOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceGetCorporationOperationParametersOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var corpOperationParams: [wallet_ios_sdk.CorpOperationParamsModel]?
  public var creditCardInstructionsAllowed: Swift.String?
  public var creditCardAllowed: Swift.String?
  public var additionalInfo: Swift.String?
  public var partialCollectionAllowed: Swift.String?
  public var corporationTitle: Swift.String?
  public var walletInvoiceInformation: wallet_ios_sdk.WalletInvoiceInformation?
  @available(*, deprecated, renamed: "walletInvoiceInformation", message: "Use walletInvoiceInformation variable")
  public func getWalletInvoiceInformation() -> wallet_ios_sdk.WalletInvoiceInformation
  @available(*, deprecated, renamed: "walletInvoiceInformation", message: "Use walletInvoiceInformation variable")
  public func setWalletInvoiceInformation(walletInvoiceInformation: wallet_ios_sdk.WalletInvoiceInformation)
  @available(*, deprecated, renamed: "corpOperationParams", message: "Use corpOperationParams variable")
  public func getCorporationDefinitions() -> [wallet_ios_sdk.CorpOperationParamsModel]
  @available(*, deprecated, renamed: "corpOperationParams", message: "Use corpOperationParams variable")
  public func setCorporationDefinitions(corpOperationParams: [wallet_ios_sdk.CorpOperationParamsModel])
  @available(*, deprecated, renamed: "creditCardInstructionsAllowed", message: "Use creditCardInstructionsAllowed variable")
  public func getCreditCardInstructionsAllowed() -> Swift.String
  @available(*, deprecated, renamed: "creditCardInstructionsAllowed", message: "Use creditCardInstructionsAllowed variable")
  public func setCreditCardInstructionsAllowed(creditCardInstructionsAllowed: Swift.String)
  @available(*, deprecated, renamed: "creditCardAllowed", message: "Use creditCardAllowed variable")
  public func getCreditCardAllowed() -> Swift.String
  @available(*, deprecated, renamed: "creditCardAllowed", message: "Use creditCardAllowed variable")
  public func setCreditCardAllowed(creditCardAllowed: Swift.String)
  @available(*, deprecated, renamed: "additionalInfo", message: "Use additionalInfo variable")
  public func getAdditionalInfo() -> Swift.String
  @available(*, deprecated, renamed: "additionalInfo", message: "Use additionalInfo variable")
  public func setAdditionalInfo(additionalInfo: Swift.String)
  @available(*, deprecated, renamed: "partialCollectionAllowed", message: "Use partialCollectionAllowed variable")
  public func getPartialCollectionAllowed() -> Swift.String
  @available(*, deprecated, renamed: "partialCollectionAllowed", message: "Use partialCollectionAllowed variable")
  public func setPartialCollectionAllowed(partialCollectionAllowed: Swift.String)
  @available(*, deprecated, renamed: "corporationTitle", message: "Use corporationTitle variable")
  public func getCorporationTitle() -> Swift.String
  @available(*, deprecated, renamed: "corporationTitle", message: "Use corporationTitle variable")
  public func setCorporationTitle(corporationTitle: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PersonalizedAnonymousCardOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetInstitutionTypeInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetLatestAgreementOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var walletAgreementDtos: [wallet_ios_sdk.WalletAgreementDtosListModel]?
  @available(*, deprecated, renamed: "walletAgreementDtos", message: "Use walletAgreementDtos variable")
  public func getWalletAgreementDtosList() -> [wallet_ios_sdk.WalletAgreementDtosListModel]
  @available(*, deprecated, renamed: "walletAgreementDtos", message: "Use walletAgreementDtos variable")
  public func setWalletAgreementDtosList(walletAgreementDtosList: [wallet_ios_sdk.WalletAgreementDtosListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getUserCommunicationPreferenceInterface(getUserCommunicationPreferenceInputParams: wallet_ios_sdk.GetUserCommunicationPreferenceInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetUserCommunicationPreferenceOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SwitchSessionCheckOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class TransferMoneyToBankAccountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var iban: Swift.String
  public var fullName: Swift.String
  public var amount: Foundation.Decimal
  public var descriptionSendMoneyToBankAccount: Swift.String
  public var expenseAmount: Foundation.Decimal
  public var paymentPurpose: Swift.String
  public var sourceAccountId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  public func SendMoneyToBankAccountInputParams()
  @available(*, deprecated, renamed: "descriptionSendMoneyToBankAccount", message: "Use descriptionSendMoneyToBankAccount variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "descriptionSendMoneyToBankAccount", message: "Use descriptionSendMoneyToBankAccount variable")
  public func setDescription(Description: Swift.String)
  @available(*, deprecated, renamed: "iban", message: "Use iban variable")
  public func getIBAN() -> Swift.String
  @available(*, deprecated, renamed: "iban", message: "Use iban variable")
  public func setIBAN(IBAN: Swift.String)
  @available(*, deprecated, renamed: "fullName", message: "Use fullName variable")
  public func getFullName() -> Swift.String
  @available(*, deprecated, renamed: "fullName", message: "Use fullName variable")
  public func setFullName(FullName: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(Amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(ExpenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "paymentPurpose", message: "Use paymentPurpose variable")
  public func getPaymentPurpose() -> Swift.String
  @available(*, deprecated, renamed: "paymentPurpose", message: "Use paymentPurpose variable")
  public func setPaymentPurpose(PaymentPurpose: Swift.String)
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func getSourceAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func setSourceAccountId(sourceAccountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AddBalanceToWalletByStoredCardInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cardToken: Swift.String
  public var amount: Foundation.Decimal
  public var expenseAmount: Foundation.Decimal
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UpdateDigitalSlipPreferenceOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CheckOnlinePaymentLimitOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var token: Swift.String?
  public var orderId: Swift.String?
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func getToken() -> Swift.String
  @available(*, deprecated, renamed: "token", message: "Use token variable")
  public func setToken(_ token: Swift.String)
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getOrderId() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func setOrderId(_ orderId: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InvoiceGetReceiptInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var receiptBase64Content: Swift.String?
  @available(*, deprecated, renamed: "receiptBase64Content", message: "Use receiptBase64Content variable")
  public func getReceiptBase64Content() -> Swift.String
  @available(*, deprecated, renamed: "receiptBase64Content", message: "Use receiptBase64Content variable")
  public func setReceiptBase64Content(receiptBase64Content: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct PrepaidInfoListModel : Swift.Codable {
  public var amount: Swift.String?
  public var name: Swift.String?
  public var counter: Swift.String?
  public var packageCode: Swift.String?
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public mutating func setAmount(amount: Swift.String)
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public mutating func setName(name: Swift.String)
  @available(*, deprecated, renamed: "counter", message: "Use counter variable")
  public func getCounter() -> Swift.String
  @available(*, deprecated, renamed: "counter", message: "Use counter variable")
  public mutating func setCounter(counter: Swift.String)
  @available(*, deprecated, renamed: "counter", message: "Use counter variable")
  public func getPackageCode() -> Swift.String
  @available(*, deprecated, renamed: "prepaidInfoList", message: "Use prepaidInfoList variable")
  public mutating func setPackageCode(packageCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DenyAskForMoneyOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RSA {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MasterpassGenerateTokenOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var MasterpassToken: Swift.String?
  @available(*, deprecated, renamed: "MasterpassToken", message: "Use MasterpassToken variable")
  public func getMasterpassToken() -> Swift.String
  @available(*, deprecated, renamed: "MasterpassToken", message: "Use MasterpassToken variable")
  public func setMasterpassToken(MasterpassToken: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoiceGetPrepaidInformationInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phoneNumber: Swift.String
  public var corporationCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func getPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "phoneNumber", message: "Use phoneNumber variable")
  public func setPhoneNumber(phoneNumber: Swift.String)
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InvoicePaymentInputParams : wallet_ios_sdk.BaseRequestModel {
  public var typeName: Swift.String
  public var institutionNumber: Swift.Int
  public var customerName: Swift.String
  public var value1: Swift.String
  public var value2: Swift.String
  public var value3: Swift.String
  public var invoiceNumber: Swift.String
  public var dueDate: Swift.String
  public var InvoiceAmount: Foundation.Decimal
  public var ExpenseAmount: Foundation.Decimal
  public var key1: Swift.String
  public var key2: Swift.String
  public var UseStoredCard: Swift.Bool
  public var UserValidationType: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "UseStoredCard", message: "Use UseStoredCard variable")
  public func getUseStoredCard() -> Swift.Bool
  @available(*, deprecated, renamed: "UseStoredCard", message: "Use UseStoredCard variable")
  public func setUseStoredCard(UseStoredCard: Swift.Bool)
  @available(*, deprecated, renamed: "UserValidationType", message: "Use UserValidationType variable")
  public func getUserValidationType() -> Swift.String
  @available(*, deprecated, renamed: "UserValidationType", message: "Use UserValidationType variable")
  public func setUserValidationType(UserValidationType: Swift.String)
  @available(*, deprecated, renamed: "typeName", message: "Use typeName variable")
  public func getTypeName() -> Swift.String
  @available(*, deprecated, renamed: "typeName", message: "Use typeName variable")
  public func setTypeName(typeName: Swift.String)
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public func getInstitutionNumber() -> Swift.Int
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public func setInstitutionNumber(institutionNumber: Swift.Int)
  @available(*, deprecated, renamed: "customerName", message: "Use customerName variable")
  public func getCustomerName() -> Swift.String
  @available(*, deprecated, renamed: "customerName", message: "Use customerName variable")
  public func setCustomerName(customerName: Swift.String)
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public func getValue1() -> Swift.String
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public func setValue1(value1: Swift.String)
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public func getValue2() -> Swift.String
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public func setValue2(value2: Swift.String)
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public func getValue3() -> Swift.String
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public func setValue3(value3: Swift.String)
  @available(*, deprecated, renamed: "invoiceNumber", message: "Use invoiceNumber variable")
  public func getInvoiceNumber() -> Swift.String
  @available(*, deprecated, renamed: "invoiceNumber", message: "Use invoiceNumber variable")
  public func setInvoiceNumber(invoiceNumber: Swift.String)
  @available(*, deprecated, renamed: "dueDate", message: "Use dueDate variable")
  public func getDueDate() -> Swift.String
  @available(*, deprecated, renamed: "dueDate", message: "Use dueDate variable")
  public func setDueDate(dueDate: Swift.String)
  @available(*, deprecated, renamed: "InvoiceAmount", message: "Use InvoiceAmount variable")
  public func getInvoiceAmount() -> Swift.Double
  @available(*, deprecated, renamed: "InvoiceAmount", message: "Use InvoiceAmount variable")
  public func setInvoiceAmount(InvoiceAmount: Swift.Double)
  @available(*, deprecated, renamed: "ExpenseAmount", message: "Use ExpenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "ExpenseAmount", message: "Use ExpenseAmount variable")
  public func setExpenseAmount(ExpenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "key1", message: "Use key1 variable")
  public func getKey1() -> Swift.String
  @available(*, deprecated, renamed: "key1", message: "Use key1 variable")
  public func setKey1(key1: Swift.String)
  @available(*, deprecated, renamed: "key2", message: "Use key2 variable")
  public func getKey2() -> Swift.String
  @available(*, deprecated, renamed: "key2", message: "Use key2 variable")
  public func setKey2(key2: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetMonthlyAtmWithdrawAmountOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SetMonthlyAtmWithdrawAmountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var monthlyAtmWithdrawAmount: Foundation.Decimal
  public var isControlEnabled: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "monthlyAtmWithdrawAmount", message: "Use monthlyAtmWithdrawAmount variable")
  public func getMonthlyAtmWithdrawAmount() -> Swift.Double
  @available(*, deprecated, renamed: "monthlyAtmWithdrawAmount", message: "Use monthlyAtmWithdrawAmount variable")
  public func setMonthlyAtmWithdrawAmount(monthlyAtmWithdrawAmount: Swift.Double)
  @available(*, deprecated, renamed: "isControlEnabled", message: "Use isControlEnabled variable")
  public func getIsControlEnabled() -> Swift.Bool
  @available(*, deprecated, renamed: "isControlEnabled", message: "Use isControlEnabled variable")
  public func setIsControlEnabled(isControlEnabled: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SendMoneyOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var targetPhoneNumber: Swift.String?
  public var orderId: Swift.String?
  public var refNumber: Swift.Int64?
  public var targetCustomerSegmentId: Swift.String?
  @available(*, deprecated, renamed: "targetPhoneNumber", message: "Use targetPhoneNumber variable")
  public func getTargetPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "orderId", message: "Use orderId variable")
  public func getCustomerOrderId() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getCustomerRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "targetCustomerSegmentId", message: "Use targetCustomerSegmentId variable")
  public func getCustomerTargetCustomerSegmentId() -> Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetCustomerLabelsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct CapitalBankModel : Swift.Codable {
  public func getBuyingExchangeRate() -> Swift.String
  public func getBuyingParity() -> Swift.String
  public func getCurrencyName() -> Swift.String
  public func getCurrencyType() -> Swift.String
  public func getEffectiveBuyingExchangeRate() -> Swift.String
  public func getEffectiveBuyingParity() -> Swift.String
  public func getParity() -> Swift.String
  public func getSellingExchangeRate() -> Swift.String
  public func getSellingParity() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CompleteRegistrationInputParams : wallet_ios_sdk.BaseRequestModel {
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var tckn: Swift.Int64
  public var birthDate: Swift.String
  public var phone: Swift.String
  public var email: Swift.String
  public var customerNo: Swift.String
  public var confirmAgreements: [wallet_ios_sdk.ConfirmAgreementListInputModel]
  public var communicationPreferences: wallet_ios_sdk.CommunicationPreferenceObjModel
  public var openConsentPreferences: wallet_ios_sdk.OpenConsentPreferencesModel
  public var nationalityCode: Swift.String
  public var cityCode: Swift.Int64
  public var passportNumber: Swift.String
  public var passportExpireDate: Swift.String
  public var genderId: Swift.Int64
  public var identityNumber: Swift.String
  public var customerLoyaltySegment: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public struct InstitutionValue : Swift.Codable {
  public var label: Swift.String?
  public var description: Swift.String?
  public var padWithZero: Swift.Int?
  public var minimum: Swift.Int?
  public var maximum: Swift.Int?
  @available(*, deprecated, renamed: "label", message: "Use label variable")
  public func getLabel() -> Swift.String
  @available(*, deprecated, renamed: "label", message: "Use label variable")
  public mutating func setLabel(label: Swift.String)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getdescription() -> Swift.String
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public mutating func setdescription(description: Swift.String)
  @available(*, deprecated, renamed: "padWithZero", message: "Use padWithZero variable")
  public func getPadWithZero() -> Swift.Int
  @available(*, deprecated, renamed: "padWithZero", message: "Use padWithZero variable")
  public mutating func setPadWithZero(padWithZero: Swift.Int)
  @available(*, deprecated, renamed: "minimum", message: "Use minimum variable")
  public func getMinimum() -> Swift.Int
  @available(*, deprecated, renamed: "minimum", message: "Use minimum variable")
  public mutating func setMinimum(minimum: Swift.Int)
  @available(*, deprecated, renamed: "maximum", message: "Use maximum variable")
  public func getMaximum() -> Swift.Int
  @available(*, deprecated, renamed: "maximum", message: "Use maximum variable")
  public mutating func setMaximum(maximum: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetSecretQuestionAnswerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct GetAvailableCashBalanceUsedTransactionList : Swift.Codable {
  public var key: Swift.String?
  public var value: Swift.String?
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public func getKey() -> Swift.String
  @available(*, deprecated, renamed: "key", message: "Use key variable")
  public mutating func setKey(key: Swift.String)
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public func getValue() -> Swift.String
  @available(*, deprecated, renamed: "value", message: "Use value variable")
  public mutating func setValue(value: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuestionListModel : Swift.Codable {
  public var id: Swift.String?
  public var text: Swift.String?
  @available(*, deprecated, renamed: "id", message: "Use id variable")
  public func getId() -> Swift.String
  @available(*, deprecated, renamed: "id", message: "Use id variable")
  public mutating func setId(id: Swift.String)
  @available(*, deprecated, renamed: "text", message: "Use text variable")
  public func getText() -> Swift.String
  @available(*, deprecated, renamed: "text", message: "Use text variable")
  public mutating func setText(text: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class BeginInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phone: Swift.String
  public var hasSuccessLogin: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func getPhone() -> Swift.String
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func setPhone(phone: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CreatePrepaidCardTrnPermissionInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cardToken: Swift.String?
  public var permissionList: [wallet_ios_sdk.PermissionListModel]?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @available(*, deprecated, renamed: "permissionList", message: "Use permissionList variable")
  public func getPermissionList() -> [wallet_ios_sdk.PermissionListModel]
  @available(*, deprecated, renamed: "permissionList", message: "Use permissionList variable")
  public func setPermissionList(permissionList: [wallet_ios_sdk.PermissionListModel])
  @objc override dynamic public init()
  @objc deinit
}
public struct InstitutionsModel : Swift.Codable {
  public var institutionNumber: Swift.Int?
  public var processType: Swift.Int?
  public var type: Swift.Int?
  public var name: Swift.String?
  public var status: Swift.Int?
  public var description: Swift.String?
  public var startTime: Swift.String?
  public var endTime: Swift.String?
  public var workingDays: Swift.String?
  public var partialPayment: Swift.Int?
  public var value1: wallet_ios_sdk.InstitutionValue?
  public var value2: wallet_ios_sdk.InstitutionValue?
  public var value3: wallet_ios_sdk.InstitutionValue?
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public func getInstitutionNumber() -> Swift.Int
  @available(*, deprecated, renamed: "institutionNumber", message: "Use institutionNumber variable")
  public mutating func setInstitutionNumber(institutionNumber: Swift.Int)
  @available(*, deprecated, renamed: "processType", message: "Use processType variable")
  public func getProcessType() -> Swift.Int
  @available(*, deprecated, renamed: "processType", message: "Use processType variable")
  public mutating func setProcessType(processType: Swift.Int)
  @available(*, deprecated, renamed: "type", message: "Use type variable")
  public func getType() -> Swift.Int
  @available(*, deprecated, renamed: "type", message: "Use type variable")
  public mutating func setType(type: Swift.Int)
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use name variable")
  public mutating func setName(name: Swift.String)
  @available(*, deprecated, renamed: "status", message: "Use status variable")
  public func getStatus() -> Swift.Int
  @available(*, deprecated, renamed: "status", message: "Use status variable")
  public mutating func setStatus(status: Swift.Int)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public mutating func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "startTime", message: "Use startTime variable")
  public func getStartTime() -> Swift.String
  @available(*, deprecated, renamed: "startTime", message: "Use startTime variable")
  public mutating func setStartTime(startTime: Swift.String)
  @available(*, deprecated, renamed: "endTime", message: "Use endTime variable")
  public func getEndTime() -> Swift.String
  @available(*, deprecated, renamed: "endTime", message: "Use endTime variable")
  public mutating func setEndTime(endTime: Swift.String)
  @available(*, deprecated, renamed: "workingDays", message: "Use workingDays variable")
  public func getWorkingDays() -> Swift.String
  @available(*, deprecated, renamed: "workingDays", message: "Use workingDays variable")
  public mutating func setWorkingDays(workingDays: Swift.String)
  @available(*, deprecated, renamed: "partialPayment", message: "Use partialPayment variable")
  public func getPartialPayment() -> Swift.Int
  @available(*, deprecated, renamed: "partialPayment", message: "Use partialPayment variable")
  public mutating func setPartialPayment(partialPayment: Swift.Int)
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public func getValue1() -> wallet_ios_sdk.InstitutionValue
  @available(*, deprecated, renamed: "value1", message: "Use value1 variable")
  public mutating func setValue1(value1: wallet_ios_sdk.InstitutionValue)
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public func getValue2() -> wallet_ios_sdk.InstitutionValue
  @available(*, deprecated, renamed: "value2", message: "Use value2 variable")
  public mutating func setValue2(value2: wallet_ios_sdk.InstitutionValue)
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public func getValue3() -> wallet_ios_sdk.InstitutionValue
  @available(*, deprecated, renamed: "value3", message: "Use value3 variable")
  public mutating func setValue4(value3: wallet_ios_sdk.InstitutionValue)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetInstrumentsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var instrumentList: [wallet_ios_sdk.DictionaryModel]?
  @available(*, deprecated, renamed: "instrumentList", message: "Use instrumentList variable")
  public func getInstrumentList() -> [wallet_ios_sdk.DictionaryModel]
  @available(*, deprecated, renamed: "instrumentList", message: "Use instrumentList variable")
  public func setInstrumentList(instrumentList: [wallet_ios_sdk.DictionaryModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddPrepaidCardMasterPassOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAtmTokenOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var atmToken: Swift.String?
  @available(*, deprecated, renamed: "atmToken", message: "Use atmToken variable")
  public func getAtmToken() -> Swift.String
  @available(*, deprecated, renamed: "atmToken", message: "Use atmToken variable")
  public func setAtmToken(atmToken: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class DeleteAccountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var accountId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func setAccountId(accountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func getInfoLimit(getLimitInfoInputParams: wallet_ios_sdk.GetLimitInfoInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetLimitInfoOutputParams) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InitialOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var underMaintenance: Swift.Bool?
  public var canLogin: Swift.Bool?
  public var isNewVersionExist: Swift.Bool?
  public var applicationLink: Swift.String?
  public var config: wallet_ios_sdk.ConfigModel?
  @available(*, deprecated, renamed: "underMaintenance", message: "Use underMaintenance variable")
  public func getUnderMaintenance() -> Swift.Bool
  @available(*, deprecated, renamed: "underMaintenance", message: "Use underMaintenance variable")
  public func setUnderMaintenance(underMaintenance: Swift.Bool)
  @available(*, deprecated, renamed: "canLogin", message: "Use canLogin variable")
  public func getCanLogin() -> Swift.Bool
  @available(*, deprecated, renamed: "canLogin", message: "Use canLogin variable")
  public func setCanLogin(canLogin: Swift.Bool)
  @available(*, deprecated, renamed: "isNewVersionExist", message: "Use isNewVersionExist variable")
  public func getIsNewVersionExist() -> Swift.Bool
  @available(*, deprecated, renamed: "isNewVersionExist", message: "Use isNewVersionExist variable")
  public func setIsNewVersionExist(isNewVersionExist: Swift.Bool)
  @available(*, deprecated, renamed: "applicationLink", message: "Use applicationLink variable")
  public func getApplicationLink() -> Swift.String
  @available(*, deprecated, renamed: "applicationLink", message: "Use applicationLink variable")
  public func setApplicationLink(applicationLink: Swift.String)
  @available(*, deprecated, renamed: "config", message: "Use config variable")
  public func getConfig() -> wallet_ios_sdk.ConfigModel
  @available(*, deprecated, renamed: "config", message: "Use config confiq")
  public func setConfig(config: wallet_ios_sdk.ConfigModel)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class DgFinGetTokenInputParams : wallet_ios_sdk.BaseRequestModel {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RefundTopUpInputParams : wallet_ios_sdk.BaseRequestModel {
  public var refNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CardView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var cardCopiedcompletion: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public func initView(view: wallet_ios_sdk.CardView)
  @_Concurrency.MainActor @preconcurrency public func getCardView() -> wallet_ios_sdk.CardView
  @_Concurrency.MainActor @preconcurrency public func cardCopied()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CancelArafInputParams : wallet_ios_sdk.BaseRequestModel {
  public var arafId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "arafId", message: "Use arafId variable")
  public func getArafId() -> Swift.Int64
  @available(*, deprecated, renamed: "arafId", message: "Use arafId variable")
  public func setArafId(arafId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CreateAccountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletName: Swift.String
  public var currency: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "walletName", message: "Use walletName variable")
  public func getWalletName() -> Swift.String
  @available(*, deprecated, renamed: "walletName", message: "Use walletName variable")
  public func setWalletName(WalletName: Swift.String)
  @available(*, deprecated, renamed: "currency", message: "Use currency variable")
  public func getCurrency() -> Swift.String
  @available(*, deprecated, renamed: "currency", message: "Use currency variable")
  public func setCurrency(Currency: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AmountListModel : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getAmount() -> Swift.Double
  public func setAmount(amount: Swift.Double)
  public func getTxnTypeId() -> Swift.Int16
  public func setTxnTypeId(txnTypeId: Swift.Int16)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetAddressTypesInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetAllVillageWithDistrictCodeInKpsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var districtCode: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "districtCode", message: "Use districtCode variable")
  public func getDistrictCode() -> Swift.Int
  @available(*, deprecated, renamed: "districtCode", message: "Use districtCode variable")
  public func setDistrictCode(districtCode: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BaseRequest : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  public init(_ proecessRef: Swift.String)
  public func getProcessRef() -> Swift.String
  public func setProcessRef(_ proecessRef: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerAdressesModel : Swift.Codable {
  public var addressType: Swift.Int?
  public var countryCode: Swift.String?
  public var city: Swift.String?
  public var district: Swift.String?
  public var neighborhood: Swift.String?
  public var detail: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FailLoginAttemptSeenOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetSecretQuestionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var questionList: [wallet_ios_sdk.QuestionListModel]?
  @available(*, deprecated, renamed: "questionList", message: "Use questionList variable")
  public func getQuestionList() -> [wallet_ios_sdk.QuestionListModel]
  @available(*, deprecated, renamed: "questionList", message: "Use questionList variable")
  public func setQuestionList(questionList: [wallet_ios_sdk.QuestionListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct LimitDefinitionModel : Swift.Codable {
  public var status: Swift.Int?
  public var key: Swift.String?
  public var value: Swift.Double?
  public var description: Swift.String?
  public var limitValueTypeId: Swift.Int?
  public var visible: Swift.Bool?
  public func getStatus() -> Swift.Int
  public func getKey() -> Swift.String
  public func getValue() -> Swift.Double
  public func getDescription() -> Swift.String
  public func getVisible() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetMasterpassConfigInputParams : wallet_ios_sdk.BaseRequestModel {
  public var masterPassReferenceNumber: Swift.Int?
  public var userValidationType: Swift.String?
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public typealias ServiceClosureType<M> = (_ completion: @escaping (_ result: M) -> Swift.Void) -> Swift.Void where M : wallet_ios_sdk.BaseResponseMeta
public typealias ServiceClosureTypeWithRequest<T, M> = (T, _ completion: @escaping (_ result: M) -> Swift.Void) -> Swift.Void where T : Swift.Encodable, M : wallet_ios_sdk.BaseResponseMeta
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WalletCoreSDKServices : ObjectiveC.NSObject {
  public static let shared: wallet_ios_sdk.WalletCoreSDKServices
  final public let getFailLoginAttemptInterface: (@escaping (_ result: wallet_ios_sdk.GetFailLoginAttemptOutputParams) -> ()) -> ()
  final public let getCustomerInfo: (@escaping (_ result: wallet_ios_sdk.GetCustomerInfoOutputParams) -> ()) -> ()
  final public let unlinkCustomerInterface: (@escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getMerchantCategoryGroupList: (@escaping (_ result: wallet_ios_sdk.GetMerchantCategoryGroupListOutputParams) -> ()) -> ()
  final public let GetCustomerLimitInfo: (@escaping (_ result: wallet_ios_sdk.GetCustomerLimitInfoOutputParams) -> ()) -> ()
  final public let getCustomerRemainingLimitInfoV2: (@escaping (_ result: wallet_ios_sdk.GetCustomerRemainingLimitInfoV2OutputParams) -> ()) -> ()
  final public let getCustomerRemainingLimitInfoV3: (@escaping (_ result: wallet_ios_sdk.GetCustomerRemainingLimitInfoV3OutputParams) -> ()) -> ()
  final public let getLimitDefinitionV2: (wallet_ios_sdk.GetLimitDefinitionV2InputParams, @escaping (_ result: wallet_ios_sdk.GetLimitDefinitionV2OutputParams) -> ()) -> ()
  final public let checkOnlinePaymentLimit: (wallet_ios_sdk.CheckOnlinePaymentLimitInputParams, @escaping (_ result: wallet_ios_sdk.CheckOnlinePaymentLimitOutputParams) -> ()) -> ()
  final public let getCustomerSecretQuestionId: (wallet_ios_sdk.GetCustomerSecretQuestionInputParams, @escaping (_ result: wallet_ios_sdk.GetCustomerSecretQuestionOutputParams) -> ()) -> ()
  final public let initialize: (wallet_ios_sdk.InitParam, @escaping (_ result: wallet_ios_sdk.InitResponse) -> ()) -> ()
  final public let getResponseMessages: (wallet_ios_sdk.GetResponseMessagesInputParams, @escaping (_ result: wallet_ios_sdk.GetResponseMessagesOutputParams) -> ()) -> ()
  final public let getCustomerPrepaidCardList: (wallet_ios_sdk.GetCustomerPrepaidCardListInputParams, @escaping (_ result: wallet_ios_sdk.GetCustomerPrepaidCardListOutputParams) -> ()) -> ()
  final public let applyPrepaidCard: (wallet_ios_sdk.ApplyPrepaidCardInputParams, @escaping (_ result: wallet_ios_sdk.ApplyPrepaidCardOutputParams) -> ()) -> ()
  final public let getReceipt: (wallet_ios_sdk.GetReceiptInputParams, @escaping (_ result: wallet_ios_sdk.GetReceiptOutputParams) -> ()) -> ()
  final public let getPendingOrders: (wallet_ios_sdk.GetPendingOrdersInputParams, @escaping (_ result: wallet_ios_sdk.GetPendingOrdersOutputParams) -> ()) -> ()
  final public let denyAskForMoney: (wallet_ios_sdk.DenyAskForMoneyInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let cancelAskForMoney: (wallet_ios_sdk.CancelAskForMoneyInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let acceptAskForMoney: (wallet_ios_sdk.AcceptAskForMoneyInputParams, @escaping (_ result: wallet_ios_sdk.AcceptAskForMoneyOutputParams) -> ()) -> ()
  final public let askForMoney: (wallet_ios_sdk.AskForMoneyInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let transferMoneyToBankAccount: (wallet_ios_sdk.TransferMoneyToBankAccountInputParams, @escaping (_ result: wallet_ios_sdk.TransferMoneyToBankAccountOutputParams) -> ()) -> ()
  final public let cancelSplitTheBill: (wallet_ios_sdk.CancelSplitTheBillInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let denySplitTheBill: (wallet_ios_sdk.DenySplitTheBillInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let acceptSplitTheBill: (wallet_ios_sdk.AcceptSplitTheBillInputParams, @escaping (_ result: wallet_ios_sdk.AcceptSplitTheBillOutputParams) -> ()) -> ()
  final public let splitTheBill: (wallet_ios_sdk.SplitTheBillInputParam, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let addBalanceToWalletByVpos: (wallet_ios_sdk.AddBalanceToWalletByVposInputParams, @escaping (_ result: wallet_ios_sdk.AddBalanceToWalletByVposOutputParams) -> ()) -> ()
  final public let balanceInquiry: (wallet_ios_sdk.BalanceInquiryInputParams, @escaping (_ result: wallet_ios_sdk.BalanceInquiryOutputParams) -> ()) -> ()
  final public let getBalanceExpenseAmount: (wallet_ios_sdk.BalanceGetExpenseAmountInputParams, @escaping (_ result: wallet_ios_sdk.BalanceGetExpenseAmountOutputParams) -> ()) -> ()
  final public let paymentWalletMobile: (wallet_ios_sdk.PaymentWalletMobileInputParams, @escaping (_ result: wallet_ios_sdk.PaymentWalletMobileOutputParams) -> ()) -> ()
  final public let topupPayStart: (wallet_ios_sdk.TopupPayStartInputParams, @escaping (_ result: wallet_ios_sdk.TopupPayStartOutputParams) -> ()) -> ()
  final public let topupPayCommit: (wallet_ios_sdk.TopupPayCommitInputParams, @escaping (_ result: wallet_ios_sdk.TopupPayCommitOutputParams) -> ()) -> ()
  final public let getMasterpassConfig: (wallet_ios_sdk.GetMasterpassConfigInputParams, @escaping (_ result: wallet_ios_sdk.GetMasterpassConfigOutputParams) -> ()) -> ()
  final public let cancelAraf: (wallet_ios_sdk.CancelArafInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let accountActionsInquiry: (wallet_ios_sdk.AccountActionsInquiryInputParams, @escaping (_ result: wallet_ios_sdk.AccountActionsInquiryOutputParams) -> ()) -> ()
  final public let begin: (wallet_ios_sdk.BeginInputParams, @escaping (_ result: wallet_ios_sdk.BeginOutputParams) -> ()) -> ()
  final public let userVerificationStatus: (wallet_ios_sdk.UserVerificationStatusInputParams, @escaping (_ result: wallet_ios_sdk.UserVerificationStatusOutputParams) -> ()) -> ()
  final public let getLatestAgreement: (wallet_ios_sdk.GetLatestAgreementInputParams, @escaping (_ result: wallet_ios_sdk.GetLatestAgreementOutputParams) -> ()) -> ()
  final public let confirmAgreement: (wallet_ios_sdk.ConfirmAgreementInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getPendingOrderTypes: (wallet_ios_sdk.GetPendingOrderTypesInputParams, @escaping (_ result: wallet_ios_sdk.GetPendingOrderTypesOutputParams) -> ()) -> ()
  final public let getExpenseAmount: (wallet_ios_sdk.GetExpenseAmountInputParams, @escaping (_ result: wallet_ios_sdk.GetExpenseAmountOutputParams) -> ()) -> ()
  final public let setPassword: (wallet_ios_sdk.SetPasswordInputParams, @escaping (_ result: wallet_ios_sdk.SetPasswordOutputParams) -> ()) -> ()
  final public let confirmPassword: (wallet_ios_sdk.ConfirmPasswordInputParams, @escaping (_ result: wallet_ios_sdk.ConfirmPasswordOutputParams) -> ()) -> ()
  final public let verifyOTP: (wallet_ios_sdk.VerifyOTPInputParams, @escaping (_ result: wallet_ios_sdk.VerifyOTPOutputParams) -> ()) -> ()
  final public let updateCustomerPhoneNumber: (wallet_ios_sdk.UpdateCustomerPhoneNumberInputParams, @escaping (_ result: wallet_ios_sdk.UpdateCustomerPhoneNumberOutputParams) -> ()) -> ()
  final public let updateCustomerInfo: (wallet_ios_sdk.UpdateCustomerInfoInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let phoneNumberUpdate: (wallet_ios_sdk.PhoneNumberUpdateInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let addAnonimCustomer: (wallet_ios_sdk.AddAnonimCustomerInputParams, @escaping (_ result: wallet_ios_sdk.AddAnonimCustomerOutputParams) -> ()) -> ()
  final public let completeRegistration: (wallet_ios_sdk.CompleteRegistrationInputParams, @escaping (_ result: wallet_ios_sdk.CompleteRegistrationOutputParams) -> ()) -> ()
  final public let reOtp: (wallet_ios_sdk.ReOtpInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let forgotPassword: (wallet_ios_sdk.ForgotPasswordInputParams, @escaping (_ result: wallet_ios_sdk.ForgotPasswordOutputParams) -> ()) -> ()
  final public let sendAccountActionsWithEmail: (wallet_ios_sdk.SendAccountActionsWithEmailInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let verifyUserMailAddress: (@escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let deleteAccount: (wallet_ios_sdk.DeleteAccountInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let updateAccountSessionTime: (wallet_ios_sdk.UpdateAccountSessionTimeInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getMonthlyBalance: (wallet_ios_sdk.GetMonthlyBalanceInputParams, @escaping (_ result: wallet_ios_sdk.GetMonthlyBalanceOutputParams) -> ()) -> ()
  final public let getTxnTypeCategory: (wallet_ios_sdk.GetTxnTypeCategoryInputParams, @escaping (_ result: wallet_ios_sdk.GetTxnTypeCategoryOutputParams) -> ()) -> ()
  final public let getWalletVirtualCardTxns: (wallet_ios_sdk.GetWalletVirtualCardTxnsInputParams, @escaping (_ result: wallet_ios_sdk.GetWalletVirtualCardTxnsOutputParams) -> ()) -> ()
  final public let getAccountActionsReceipt: (wallet_ios_sdk.GetAccountActionsReceiptInputParams, @escaping (_ result: wallet_ios_sdk.GetAccountActionsReceiptOutputParams) -> ()) -> ()
  final public let getWalletVirtualCardTxnsMonthlyByAccountId: (wallet_ios_sdk.GetWalletVirtualCardTxnsMonthlyByAccountIdInputParams, @escaping (_ result: wallet_ios_sdk.GetWalletVirtualCardTxnsMonthlyByAccountIdOutputParams) -> ()) -> ()
  final public let getMfsToken: (wallet_ios_sdk.GetMfsTokenInputParams, @escaping (_ result: wallet_ios_sdk.GetMfsTokenOutputParams) -> ()) -> ()
  final public let updatePrepaidCardStatus: (wallet_ios_sdk.UpdatePrepaidCardStatusInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getPrepaidCardTrnPermission: (wallet_ios_sdk.GetPrepaidCardTrnPermissionInputParams, @escaping (_ result: wallet_ios_sdk.GetPrepaidCardTrnPermissionOutputParams) -> ()) -> ()
  final public let createPrepaidCardTrnPermission: (wallet_ios_sdk.CreatePrepaidCardTrnPermissionInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let setMonthlyAtmWithdrawAmount: (wallet_ios_sdk.SetMonthlyAtmWithdrawAmountInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let changePassword: (wallet_ios_sdk.ChangePasswordInputParams, @escaping (_ result: wallet_ios_sdk.ChangePasswordOutputParams) -> ()) -> ()
  final public let checkCustomerSecretQuestionAnswer: (wallet_ios_sdk.CheckCustomerSecretQuestionAnswerInputParams, @escaping (_ result: wallet_ios_sdk.CheckCustomerSecretQuestionAnswerOutputParams) -> ()) -> ()
  final public let addEnquraIntegrationInterface: (wallet_ios_sdk.AddEnquraIntegrationInputParams, @escaping (_ result: wallet_ios_sdk.AddEnquraIntegrationOutputParams) -> ()) -> ()
  final public let setCommunicationPreferencesInterface: (wallet_ios_sdk.SetCommunicationPreferencesInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getCommunicationPreferencesInterface: (wallet_ios_sdk.GetCommunicationPreferencesInputParams, @escaping (_ result: wallet_ios_sdk.GetCommunicationPreferencesOutputParams) -> ()) -> ()
  final public let commitPurchase: (wallet_ios_sdk.CommitPurchaseInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getCustomerSegments: (wallet_ios_sdk.GetCustomerSegmentsInputParams, @escaping (_ result: wallet_ios_sdk.GetCustomerSegmentsOutputParams) -> ()) -> ()
  final public let getInstitutionNameByIban: (wallet_ios_sdk.GetInstitutionNameByIbanInputParams, @escaping (_ result: wallet_ios_sdk.GetInstitutionNameByIbanOutputParams) -> ()) -> ()
  final public let setMonthlyPaymentAmount: (wallet_ios_sdk.SetMonthlyPaymentAmountInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getPaymentPurpose: (wallet_ios_sdk.GetPaymentPurposeInputParams, @escaping (_ result: wallet_ios_sdk.GetPaymentPurposeOutputParams) -> ()) -> ()
  final public let getExpenses: (wallet_ios_sdk.GetExpensesInputParams, @escaping (_ result: wallet_ios_sdk.GetExpensesOutputParams) -> ()) -> ()
  final public let setOpenConsentPreferences: (wallet_ios_sdk.SetOpenConsentPreferencesInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getOpenConsentPreferences: (wallet_ios_sdk.GetOpenConsentPreferencesInputParams, @escaping (_ result: wallet_ios_sdk.GetOpenConsentPreferencesOutputParams) -> ()) -> ()
  final public let SetPasswordAndSecretQuestionAnswer: (wallet_ios_sdk.SetPasswordAndSecretQuestionAnswerInputParams, @escaping (_ result: wallet_ios_sdk.SetPasswordAndSecretQuestionAnswerOutputParams) -> ()) -> ()
  final public let sendMoney: (wallet_ios_sdk.SendMoneyInputParams, @escaping (_ result: wallet_ios_sdk.SendMoneyOutputParams) -> ()) -> ()
  final public let getPendingOrderDetail: (wallet_ios_sdk.GetPendingOrderDetailInputParams, @escaping (_ result: wallet_ios_sdk.GetPendingOrderDetailOutputParams) -> ()) -> ()
  final public let getSecretQuestion: (wallet_ios_sdk.GetSecretQuestionInputParams, @escaping (_ result: wallet_ios_sdk.GetSecretQuestionOutputParams) -> ()) -> ()
  final public let setSecretQuestionAnswer: (wallet_ios_sdk.SetSecretQuestionAnswerInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let securityQuestionReset: (@escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getJobs: (wallet_ios_sdk.GetJobsInputParams, @escaping (_ result: wallet_ios_sdk.GetJobsOutputParams) -> ()) -> ()
  final public let getCampaigns: (wallet_ios_sdk.GetCampaignsInputParams, @escaping (_ result: wallet_ios_sdk.GetCampaignsOutputParams) -> ()) -> ()
  final public let failLoginAttemptSeen: (@escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let LoginWithPassword: (wallet_ios_sdk.LoginWithPasswordInputParams, @escaping (_ result: wallet_ios_sdk.LoginWithPasswordOutputParams) -> ()) -> ()
  final public let logoutInterface: (@escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let checkEmail: (wallet_ios_sdk.CheckEmailInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getQrInfo: (wallet_ios_sdk.GetQrInfoInputParams, @escaping (_ result: wallet_ios_sdk.GetQrInfoOutputParams) -> ()) -> ()
  final public let startQrTransaction: (wallet_ios_sdk.StartQrTransactionInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let turkcellInvoiceGetInstitutionList: (wallet_ios_sdk.TurkcellInvoiceGetInstitutionListInputParams, @escaping (_ result: wallet_ios_sdk.TurkcellInvoiceGetInstitutionListOutputParams) -> ()) -> ()
  final public let turkcellInvoiceInquiry: (wallet_ios_sdk.TurkcellInvoiceInquiryInputParams, @escaping (_ result: wallet_ios_sdk.TurkcellInvoiceInquiryOutputParams) -> ()) -> ()
  final public let turkcellInvoicePayment: (wallet_ios_sdk.TurkcellInvoicePaymentInputParams, @escaping (_ result: wallet_ios_sdk.TurkcellInvoicePaymentOutputParams) -> ()) -> ()
  final public let turkcellInvoiceGetInstitutionType: (@escaping (_ result: wallet_ios_sdk.TurkcellInvoiceGetInstitutionTypeOutputParams) -> ()) -> ()
  final public let dgFinGetToken: (wallet_ios_sdk.DgFinGetTokenInputParams, @escaping (_ result: wallet_ios_sdk.DgFinGetTokenOutputParams) -> ()) -> ()
  final public let dgFinGetTokenLoanCreate: (wallet_ios_sdk.DgFinGetTokenLoanCreateInputParams, @escaping (_ result: wallet_ios_sdk.DgFinGetTokenLoanCreateOutputParams) -> ()) -> ()
  final public let dgFinGetCustomerInfoGsm: (wallet_ios_sdk.DgFinGetCustomerInputParams, @escaping (_ result: wallet_ios_sdk.GetCustomerInfoOutputParams) -> ()) -> ()
  final public let dgFinGetCustomer: (wallet_ios_sdk.DgFinGetCustomerInputParams, @escaping (_ result: wallet_ios_sdk.DgFinGetCustomerOutputParams) -> ()) -> ()
  final public let getDigitalSlip: (wallet_ios_sdk.GetDigitalSlipInputParams, @escaping (_ result: wallet_ios_sdk.GetDigitalSlipOutputParams) -> ()) -> ()
  final public let getDigitalSlipPereferance: (@escaping (_ result: wallet_ios_sdk.GetDigitalSlipPreferenceOutputParams) -> ()) -> ()
  final public let updateDigitalSlipPereferance: (wallet_ios_sdk.UpdateDigitalSlipPreferenceInputParams, @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ()) -> ()
  final public let getLimitInfo: (wallet_ios_sdk.GetLimitInfoInputParams, @escaping (_ result: wallet_ios_sdk.GetLimitInfoOutputParams) -> ()) -> ()
  final public let getKpsAdressVerify: (wallet_ios_sdk.GetKpsAddressVerifyInputParams, @escaping (_ result: wallet_ios_sdk.GetKpsAddressVerifyOutputParams) -> ()) -> ()
  final public let getKpsAddressInquiry: (wallet_ios_sdk.KpsAddressInquiryInputParams, @escaping (_ result: wallet_ios_sdk.KpsAddressInquiryOutputParams) -> ()) -> ()
  public func call<M>(service: (_ completion: @escaping (_ result: M) -> Swift.Void) -> Swift.Void, onSuccess: @escaping () -> Swift.Void = {}, onResult: @escaping (M) -> Swift.Void = { _ in }) where M : wallet_ios_sdk.BaseResponseMeta
  public func call<T, M>(request: T, service: (T, _ completion: @escaping (_ result: M) -> Swift.Void) -> Swift.Void, onSuccess: @escaping () -> Swift.Void = {}, onResult: @escaping (M) -> Swift.Void = { _ in }) where T : Swift.Encodable, M : wallet_ios_sdk.BaseResponseMeta
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerPrepaidCardListOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var cardList: [wallet_ios_sdk.GetCustomerPrepaidCardListModel]?
  public var customerId: Swift.Int64?
  @available(*, deprecated, renamed: "customerId", message: "Use customerId variable")
  public func getCustomerId() -> Swift.Int64
  @available(*, deprecated, renamed: "customerId", message: "Use customerId variable")
  public func setCustomerId(customerId: Swift.Int64)
  @available(*, deprecated, renamed: "cardList", message: "Use cardList variable")
  public func getCardList() -> [wallet_ios_sdk.GetCustomerPrepaidCardListModel]
  @available(*, deprecated, renamed: "cardList", message: "Use cardList variable")
  public func setCardList(cardList: [wallet_ios_sdk.GetCustomerPrepaidCardListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class NotifyInputParams : wallet_ios_sdk.BaseRequest {
  public func NotifyInputParams()
  public func getFcmMessage() -> Swift.String
  public func setFcmMessage(fcmMessage: Swift.String)
  @objc override dynamic public init()
  override public init(_ proecessRef: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UpdateCustomerInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  public var email: Swift.String
  public var job: Swift.String
  public var birthPlace: Swift.String
  public var monthlyNetIncome: Foundation.Decimal
  public var estimatedWalletBalance: Foundation.Decimal
  public var monthlyTransactionCount: Swift.Int
  public var products: [Swift.String]
  public var sourceOfIncome: [Swift.String]
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "email", message: "Use email variable")
  public func getEmail() -> Swift.String
  @available(*, deprecated, renamed: "email", message: "Use email variable")
  public func setEmail(Email: Swift.String)
  @available(*, deprecated, renamed: "job", message: "Use job variable")
  public func getjob() -> Swift.String
  @available(*, deprecated, renamed: "job", message: "Use job variable")
  public func setjob(job: Swift.String)
  @available(*, deprecated, renamed: "birthPlace", message: "Use birthPlace variable")
  public func getBirthPlace() -> Swift.String
  @available(*, deprecated, renamed: "birthPlace", message: "Use birthPlace variable")
  public func setBirthPlace(BirthPlace: Swift.String)
  public func getMonthlyNetIncome() -> Swift.Double
  public func setMonthlyNetIncome(MonthlyNetIncome: Swift.Double)
  public func getEstimatedWalletBalance() -> Swift.Double
  public func setEstimatedWalletBalance(EstimatedWalletBalance: Swift.Double)
  @available(*, deprecated, renamed: "monthlyTransactionCount", message: "Use monthlyTransactionCount variable")
  public func getMonthlyTransactionCount() -> Swift.Int
  @available(*, deprecated, renamed: "monthlyTransactionCount", message: "Use monthlyTransactionCount variable")
  public func setMonthlyTransactionCount(MonthlyTransactionCount: Swift.Int)
  @available(*, deprecated, renamed: "products", message: "Use products variable")
  public func getProducts() -> [Swift.String]
  @available(*, deprecated, renamed: "products", message: "Use products variable")
  public func setProducts(Products: [Swift.String])
  @available(*, deprecated, renamed: "sourceOfIncome", message: "Use sourceOfIncome variable")
  public func getSourceOfIncome() -> [Swift.String]
  @available(*, deprecated, renamed: "sourceOfIncome", message: "Use sourceOfIncome variable")
  public func setSourceOfIncome(sourceOfIncome: [Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ForgotPasswordOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var unblockDatetime: Swift.String?
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func getUnblockDatetime() -> Swift.String
  @available(*, deprecated, renamed: "unblockDatetime", message: "Use unblockDatetime variable")
  public func setUnblockDatetime(unblockDatetime: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetExpensesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var expenseAmountList: [wallet_ios_sdk.ExpensesModel]?
  @available(*, deprecated, renamed: "expenseAmountList", message: "Use expenseAmountList variable")
  public func getExpenseAmountList() -> [wallet_ios_sdk.ExpensesModel]
  @available(*, deprecated, renamed: "expenseAmountList", message: "Use expenseAmountList variable")
  public func setExpenseAmountList(expenseAmountList: [wallet_ios_sdk.ExpensesModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAllCityWithKpsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var cityResultList: [wallet_ios_sdk.CityResultListModel]?
  @available(*, deprecated, renamed: "cityResultList", message: "Use cityResultList variable")
  public func getCityResultList() -> [wallet_ios_sdk.CityResultListModel]
  @available(*, deprecated, renamed: "cityResultList", message: "Use cityResultList variable")
  public func setCityResultList(cityResultList: [wallet_ios_sdk.CityResultListModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCampaignsOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var campaigns: [wallet_ios_sdk.Campaign]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Campaign : Swift.Codable {
  public var name: Swift.String?, title: Swift.String?, description: Swift.String?, conditionIconBase64Content: Swift.String?, smsContent: Swift.String?
  public var campaignTypeId: Swift.Int?
  public var images: [wallet_ios_sdk.Image]?
  public var conditions: [wallet_ios_sdk.Condition]?
  public init(name: Swift.String?, title: Swift.String?, description: Swift.String?, conditionIconBase64Content: Swift.String?, smsContent: Swift.String?, campaignTypeId: Swift.Int?, images: [wallet_ios_sdk.Image]?, conditions: [wallet_ios_sdk.Condition]?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Condition : Swift.Codable {
  public var content: Swift.String?
  public var order: Swift.Int?
  public init(content: Swift.String?, order: Swift.Int?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Image : Swift.Codable {
  public var name: Swift.String?, base64Content: Swift.String?
  public var order: Swift.Int?
  public init(name: Swift.String?, base64Content: Swift.String?, order: Swift.Int?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CorpOperationParamsModel : Swift.Codable {
  public var mustFill: Swift.String?
  public var referenceLength: Swift.String?
  public var referenceDesc: Swift.String?
  public var referenceType: Swift.String?
  public var fillChar: Swift.String?
  public var hasLeadingZero: Swift.String?
  public var hasLeadingChars: Swift.String?
  public var referenceName: Swift.String?
  @available(*, deprecated, renamed: "mustFill", message: "Use mustFill variable")
  public func getMustFill() -> Swift.String
  @available(*, deprecated, renamed: "mustFill", message: "Use mustFill variable")
  public mutating func setMustFill(mustFill: Swift.String)
  @available(*, deprecated, renamed: "referenceLength", message: "Use referenceLength variable")
  public func getReferenceLength() -> Swift.String
  @available(*, deprecated, renamed: "referenceLength", message: "Use referenceLength variable")
  public mutating func setReferenceLength(referenceLength: Swift.String)
  @available(*, deprecated, renamed: "referenceDesc", message: "Use referenceDesc variable")
  public func getReferenceDesc() -> Swift.String
  @available(*, deprecated, renamed: "referenceDesc", message: "Use referenceDesc variable")
  public mutating func setReferenceDesc(referenceDesc: Swift.String)
  @available(*, deprecated, renamed: "referenceType", message: "Use referenceType variable")
  public func getReferenceType() -> Swift.String
  @available(*, deprecated, renamed: "referenceType", message: "Use referenceType variable")
  public mutating func setReferenceType(referenceType: Swift.String)
  @available(*, deprecated, renamed: "fillChar", message: "Use fillChar variable")
  public func getFillChar() -> Swift.String
  @available(*, deprecated, renamed: "fillChar", message: "Use fillChar variable")
  public mutating func setFillChar(fillChar: Swift.String)
  @available(*, deprecated, renamed: "hasLeadingZero", message: "Use hasLeadingZero variable")
  public func getHasLeadingZero() -> Swift.String
  @available(*, deprecated, renamed: "hasLeadingZero", message: "Use hasLeadingZero variable")
  public mutating func setHasLeadingZero(hasLeadingZero: Swift.String)
  @available(*, deprecated, renamed: "hasLeadingChars", message: "Use hasLeadingChars variable")
  public func getHasLeadingChars() -> Swift.String
  @available(*, deprecated, renamed: "hasLeadingChars", message: "Use hasLeadingChars variable")
  public mutating func setHasLeadingChars(hasLeadingChars: Swift.String)
  @available(*, deprecated, renamed: "referenceName", message: "Use referenceName variable")
  public func getReferenceName() -> Swift.String
  @available(*, deprecated, renamed: "referenceName", message: "Use referenceName variable")
  public mutating func setReferenceName(referenceName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KpsAddressInquiryOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var address: Swift.String?
  public var addressNo: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class InitResponse : wallet_ios_sdk.BaseResponseMeta {
  public init()
  public init(_ meta: wallet_ios_sdk.Meta)
  override public func getMeta() -> wallet_ios_sdk.Meta
  override public func setMeta(meta: wallet_ios_sdk.Meta)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetCommunicationPreferencesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetAvailableCashBalanceUsedTransactionOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var getAvailableCashBalanceUsedTransactionList: [wallet_ios_sdk.GetAvailableCashBalanceUsedTransactionList]?
  @available(*, deprecated, renamed: "getAvailableCashBalanceUsedTransactionList", message: "Use getAvailableCashBalanceUsedTransactionList variable")
  public func getGetAvailableCashBalanceUsedTransactionList() -> [wallet_ios_sdk.GetAvailableCashBalanceUsedTransactionList]
  @available(*, deprecated, renamed: "getAvailableCashBalanceUsedTransactionList", message: "Use getAvailableCashBalanceUsedTransactionList variable")
  public func setGetAvailableCashBalanceUsedTransactionList(getAvailableCashBalanceUsedTransactionList: [wallet_ios_sdk.GetAvailableCashBalanceUsedTransactionList])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DgFinGetCustomerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerNumber: Swift.String?
  public var isCustomer: Swift.Bool?
  public var id: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetQrInfoOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var countryCode: Swift.String?
  public var amountAvailable: Swift.String?
  public var transactionType: Swift.String?
  public var terminalType: Swift.Int?
  public var supportedSchema: Swift.String?
  public var supportedBrand: Swift.String?
  public var installmentNumber: Swift.String?
  public var amount: Swift.Double?
  public var mcc: Swift.String?
  public var currencyCode: Swift.String?
  public var merchantName: Swift.String?
  public var merchantId: Swift.String?
  public var postalCode: Swift.String?
  public var qrGenerationDate: Swift.String?
  public var qrExpireDate: Swift.String?
  @available(*, deprecated, renamed: "countryCode", message: "Use countryCode variable")
  public func getCountryCode() -> Swift.String
  @available(*, deprecated, renamed: "countryCode", message: "Use countryCode variable")
  public func setCountryCode(countryCode: Swift.String)
  @available(*, deprecated, renamed: "amountAvailable", message: "Use amountAvailable variable")
  public func getAmountAvailable() -> Swift.String
  @available(*, deprecated, renamed: "amountAvailable", message: "Use amountAvailable variable")
  public func setAmountAvailable(amountAvailable: Swift.String)
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func getTransactionType() -> Swift.String
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func setTransactionType(transactionType: Swift.String)
  @available(*, deprecated, renamed: "terminalType", message: "Use terminalType variable")
  public func getTerminalType() -> Swift.Int
  @available(*, deprecated, renamed: "terminalType", message: "Use terminalType variable")
  public func setTerminalType(terminalType: Swift.Int)
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func getSupportedSchema() -> Swift.String
  @available(*, deprecated, renamed: "supportedSchema", message: "Use supportedSchema variable")
  public func setSupportedSchema(supportedSchema: Swift.String)
  @available(*, deprecated, renamed: "supportedBrand", message: "Use supportedBrand variable")
  public func getSupportedBrand() -> Swift.String
  @available(*, deprecated, renamed: "supportedBrand", message: "Use supportedBrand variable")
  public func setSupportedBrand(supportedBrand: Swift.String)
  @available(*, deprecated, renamed: "installmentNumber", message: "Use installmentNumber variable")
  public func getInstallmentNumber() -> Swift.String
  @available(*, deprecated, renamed: "installmentNumber", message: "Use installmentNumber variable")
  public func setInstallmentNumber(installmentNumber: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "mcc", message: "Use mcc variable")
  public func getMcc() -> Swift.String
  @available(*, deprecated, renamed: "mcc", message: "Use mcc variable")
  public func setMcc(mcc: Swift.String)
  @available(*, deprecated, renamed: "currencyCode", message: "Use currencyCode variable")
  public func getCurrencyCode() -> Swift.String
  @available(*, deprecated, renamed: "currencyCode", message: "Use currencyCode variable")
  public func setCurrencyCode(currencyCode: Swift.String)
  @available(*, deprecated, renamed: "merchantName", message: "Use merchantName variable")
  public func getMerchantName() -> Swift.String
  @available(*, deprecated, renamed: "merchantName", message: "Use merchantName variable")
  public func setMerchantName(merchantName: Swift.String)
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func getMerchantId() -> Swift.String
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func setMerchantId(merchantId: Swift.String)
  @available(*, deprecated, renamed: "postalCode", message: "Use postalCode variable")
  public func getPostalCode() -> Swift.String
  @available(*, deprecated, renamed: "postalCode", message: "Use postalCode variable")
  public func setPostalCode(postalCode: Swift.String)
  @available(*, deprecated, renamed: "qrGenerationDate", message: "Use qrGenerationDate variable")
  public func getQrGenerationDate() -> Swift.String
  @available(*, deprecated, renamed: "qrGenerationDate", message: "Use qrGenerationDate variable")
  public func setQrGenerationDate(qrGenerationDate: Swift.String)
  @available(*, deprecated, renamed: "qrExpireDate", message: "Use qrExpireDate variable")
  public func getQrExpireDate() -> Swift.String
  @available(*, deprecated, renamed: "qrExpireDate", message: "Use qrExpireDate variable")
  public func setQrExpireDate(qrExpireDate: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetAllBuildingWithStreetCodeInKpsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var streetCode: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "streetCode", message: "Use streetCode variable")
  public func getStreetCode() -> Swift.Int
  @available(*, deprecated, renamed: "streetCode", message: "Use streetCode variable")
  public func setStreetCode(streetCode: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PersonalizedAnonymousCardInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cardNumber: Swift.String
  public var month: Swift.String
  public var year: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "cardNumber", message: "Use cardNumber variable")
  public func getCardNumber() -> Swift.String
  @available(*, deprecated, renamed: "cardNumber", message: "Use cardNumber variable")
  public func setCardNumber(cardNumber: Swift.String)
  @available(*, deprecated, renamed: "month", message: "Use month variable")
  public func getMonth() -> Swift.String
  @available(*, deprecated, renamed: "month", message: "Use month variable")
  public func setMonth(month: Swift.String)
  @available(*, deprecated, renamed: "year", message: "Use year variable")
  public func getYear() -> Swift.String
  @available(*, deprecated, renamed: "year", message: "Use year variable")
  public func setYear(year: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ChangePasswordInputParams : wallet_ios_sdk.BaseRequestModel {
  public var oldPassword: Swift.String
  public var newPassword: Swift.String
  public var securiytQuestionAnswer: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "oldPasswordd", message: "Use oldPassword variable")
  public func getOldPIN() -> Swift.String
  @available(*, deprecated, renamed: "oldPassword", message: "Use oldPassword variable")
  public func setOldPIN(oldPIN: Swift.String)
  @available(*, deprecated, renamed: "newPassword", message: "Use newPassword variable")
  public func getNewPIN() -> Swift.String
  @available(*, deprecated, renamed: "newPassword", message: "Use newPassword variable")
  public func setNewPIN(newPIN: Swift.String)
  @available(*, deprecated, renamed: "securiytQuestionAnswer", message: "Use securiytQuestionAnswer variable")
  public func getSecuriytQuestionAnswer() -> Swift.String
  @available(*, deprecated, renamed: "securiytQuestionAnswer", message: "Use securiytQuestionAnswer variable")
  public func setSecuriytQuestionAnswer(securiytQuestionAnswer: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ReOtpInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phone: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func getPhone() -> Swift.String
  @available(*, deprecated, renamed: "phone", message: "Use phone variable")
  public func setPhone(phone: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CommunicationPreferenceModel : wallet_ios_sdk.BaseRequestModel {
  public var type: Swift.String
  public var allowed: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "type", message: "Use type variable")
  public func getType() -> Swift.String
  @available(*, deprecated, renamed: "type", message: "Use type variable")
  public func setType(type: Swift.String)
  @available(*, deprecated, renamed: "allowed", message: "Use allowed variable")
  public func getAllowed() -> Swift.Bool
  @available(*, deprecated, renamed: "allowed", message: "Use allowed variable")
  public func setAllowed(allowed: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CommitPurchaseOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class AddBalanceToWalletByVposInputParams : wallet_ios_sdk.BaseRequestModel {
  public var destinationAccountId: Swift.Int64?
  public var cardholderName: Swift.String
  public var cardNumber: Swift.String
  public var expiryYear: Swift.String
  public var expiryMonth: Swift.String
  public var cvv2: Swift.String
  public var amount: Foundation.Decimal
  public var expenseAmount: Foundation.Decimal
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "destinationAccountId", message: "Use destinationAccountId variable")
  public func getDestinationAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "destinationAccountId", message: "Use destinationAccountId variable")
  public func setDestinationAccountId(destinationAccountId: Swift.Int64)
  @available(*, deprecated, renamed: "cardholderName", message: "Use cardholderName variable")
  public func getCardholderName() -> Swift.String
  @available(*, deprecated, renamed: "cardholderName", message: "Use cardholderName variable")
  public func setCardholderName(cardholderName: Swift.String)
  @available(*, deprecated, renamed: "cardNumber", message: "Use cardNumber variable")
  public func getCardNumber() -> Swift.String
  @available(*, deprecated, renamed: "cardNumber", message: "Use cardNumber variable")
  public func setCardNumber(cardNumber: Swift.String)
  @available(*, deprecated, renamed: "expiryYear", message: "Use expiryYear variable")
  public func getExpiryYear() -> Swift.String
  @available(*, deprecated, renamed: "expiryYear", message: "Use expiryYear variable")
  public func setExpiryYear(expiryYear: Swift.String)
  @available(*, deprecated, renamed: "expiryMonth", message: "Use expiryMonth variable")
  public func getExpiryMonth() -> Swift.String
  @available(*, deprecated, renamed: "expiryMonth", message: "Use expiryMonth variable")
  public func setExpiryMonth(expiryMonth: Swift.String)
  @available(*, deprecated, renamed: "cvv2", message: "Use cvv2 variable")
  public func getCvv2() -> Swift.String
  @available(*, deprecated, renamed: "cvv2", message: "Use cvv2 variable")
  public func setCvv2(cvv2: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
public struct AccountActionListModel : Swift.Codable {
  public var accountId: Swift.Int64?, refNumber: Swift.Int64?
  public var dateTime: Swift.String?
  public var amount: Swift.Double?, balance: Swift.Double?
  public var txnTypeId: Swift.Int16?
  public var txnName: Swift.String?
  public var txnCategoryId: Swift.Int64?
  public var txnCategoryName: Swift.String?
  public var instrumentId: Swift.Int16?
  public var instrumentName: Swift.String?, actionType: Swift.String?, holdByFraud: Swift.String?, targetFullName: Swift.String?
  public var showDigitalSlip: Swift.Bool?
  public var actionDetail: wallet_ios_sdk.ActionDetailModel?
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.Int64
  @available(*, deprecated, renamed: "dateTime", message: "Use dateTime variable")
  public func getDateTime() -> Swift.String
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "balance", message: "Use balance variable")
  public func getBalance() -> Swift.Double
  @available(*, deprecated, renamed: "txnCategoryId", message: "Use txnCategoryId variable")
  public func getTxnCategoryId() -> Swift.Int64
  @available(*, deprecated, renamed: "txnTypeId", message: "Use txnTypeId variable")
  public func getTxnTypeId() -> Swift.Int16
  @available(*, deprecated, renamed: "instrumentId", message: "Use instrumentId variable")
  public func getInstrumentId() -> Swift.Int16
  @available(*, deprecated, renamed: "actionType", message: "Use actionType variable")
  public func getActionType() -> Swift.String
  @available(*, deprecated, renamed: "targetFullName", message: "Use targetFullName variable")
  public func getTargetFullName() -> Swift.String
  @available(*, deprecated, renamed: "showDigitalSlip", message: "Use showDigitalSlip variable")
  public func getShowDigitalSlip() -> Swift.Bool
  @available(*, deprecated, renamed: "actionDetail", message: "Use actionDetail variable")
  public func getActionDetail() -> wallet_ios_sdk.ActionDetailModel
  @available(*, deprecated, renamed: "holdByFraud", message: "Use holdByFraud variable")
  public func getHoldByFraud() -> Swift.String
  @available(*, deprecated, renamed: "holdByFraud", message: "Use holdByFraud variable")
  public mutating func setHoldByFraud(holdByFraud: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SupportV2InputParams : wallet_ios_sdk.BaseRequestModel {
  public var clientFirstName: Swift.String
  public var clientLastName: Swift.String
  public var clientTckn: Swift.String
  public var clientMailAddress: Swift.String
  public var subject: Swift.String
  public var body: Swift.String
  public var supportType: Swift.String
  public var fileName: Swift.String
  public var fileBase64Content: Swift.String
  public var clientPhoneNumber: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "clientFirstName", message: "Use clientFirstName variable")
  public func getClientFirstName() -> Swift.String
  @available(*, deprecated, renamed: "clientFirstName", message: "Use clientFirstName variable")
  public func setClientFirstName(clientFirstName: Swift.String)
  @available(*, deprecated, renamed: "clientLastName", message: "Use clientLastName variable")
  public func getClientLastName() -> Swift.String
  @available(*, deprecated, renamed: "clientFirstName", message: "Use clientLastName variable")
  public func setClientLastName(clientLastName: Swift.String)
  @available(*, deprecated, renamed: "clientTckn", message: "Use clientTckn variable")
  public func getClientTckn() -> Swift.String
  @available(*, deprecated, renamed: "clientTckn", message: "Use clientTckn variable")
  public func setClientTckn(clientTckn: Swift.String)
  @available(*, deprecated, renamed: "clientPhoneNumber", message: "Use clientPhoneNumber variable")
  public func getClientPhoneNumber() -> Swift.String
  @available(*, deprecated, renamed: "clientPhoneNumber", message: "Use clientPhoneNumber variable")
  public func setClientPhoneNumber(clientPhoneNumber: Swift.String)
  @available(*, deprecated, renamed: "clientMailAddress", message: "Use clientMailAddress variable")
  public func getClientMailAddress() -> Swift.String
  @available(*, deprecated, renamed: "clientMailAddress", message: "Use clientMailAddress variable")
  public func setClientMailAddress(clientMailAddress: Swift.String)
  @available(*, deprecated, renamed: "subject", message: "Use subject variable")
  public func getSubject() -> Swift.String
  @available(*, deprecated, renamed: "subject", message: "Use subject variable")
  public func setSubject(subject: Swift.String)
  @available(*, deprecated, renamed: "body", message: "Use body variable")
  public func getBody() -> Swift.String
  @available(*, deprecated, renamed: "body", message: "Use body variable")
  public func setBody(body: Swift.String)
  @available(*, deprecated, renamed: "supportType", message: "Use supportType variable")
  public func getSupportType() -> Swift.String
  @available(*, deprecated, renamed: "supportType", message: "Use supportType variable")
  public func setSupportType(supportType: Swift.String)
  @available(*, deprecated, renamed: "fileName", message: "Use fileName variable")
  public func getFileName() -> Swift.String
  @available(*, deprecated, renamed: "fileName", message: "Use fileName variable")
  public func setFileName(FileName: Swift.String)
  @available(*, deprecated, renamed: "fileBase64Content", message: "Use fileBase64Content variable")
  public func getFileBase64Content() -> Swift.String
  @available(*, deprecated, renamed: "fileBase64Content", message: "Use fileBase64Content variable")
  public func setFileBase64Content(FileBase64Content: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ForgotPasswordInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phoneNumber: Swift.String
  public var answer: Swift.String
  public var email: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetPendingOrderTypesInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct LimitTypeModel : Swift.Codable {
  public var limitTypeName: Swift.String?
  public var limitTypeId: Swift.Int?
  public var limitSubTypes: [wallet_ios_sdk.LimitSubTypesModel]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AcceptSplitTheBillOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var refNumber: Swift.String?
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func getRefNumber() -> Swift.String
  @available(*, deprecated, renamed: "refNumber", message: "Use refNumber variable")
  public func setRefNumber(refNumber: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct GameListModel : Swift.Codable {
  public var gameID: Swift.String?
  public var gameName: Swift.String?
  public var imageUrl: Swift.String?
  @available(*, deprecated, renamed: "imageUrl", message: "Use imageUrl variable")
  public func getImageUrl() -> Swift.String
  @available(*, deprecated, renamed: "imageUrl", message: "Use imageUrl variable")
  public mutating func setImageUrl(imageUrl: Swift.String)
  @available(*, deprecated, renamed: "gameID", message: "Use gameID variable")
  public func getGameID() -> Swift.String
  @available(*, deprecated, renamed: "gameID", message: "Use gameID variable")
  public mutating func setGameID(gameID: Swift.String)
  @available(*, deprecated, renamed: "gameName", message: "Use gameName variable")
  public func getGameName() -> Swift.String
  @available(*, deprecated, renamed: "gameName", message: "Use gameName variable")
  public mutating func setGameName(gameName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoiceListCorporationDefinitionsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  public var collectionTypeCode: Swift.String
  public var collectionType: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getCollectionTypeCode() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setCollectionTypeCode(collectionTypeCode: Swift.String)
  @available(*, deprecated, renamed: "collectionType", message: "Use collectionType variable")
  public func getCollectionType() -> Swift.String
  @available(*, deprecated, renamed: "collectionType", message: "Use collectionType variable")
  public func setCollectionType(collectionType: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddEnquraIntegrationOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var referenceId: Swift.Int64?
  public var tckn: Swift.String?
  public var birthDate: Swift.String?
  public var serialNumber: Swift.String?
  public var tckkExpireDate: Swift.String?
  public var birthPlace: Swift.String?
  @available(*, deprecated, renamed: "referenceId", message: "Use referenceId variable")
  public func getReferenceId() -> Swift.Int64
  @available(*, deprecated, renamed: "referenceId", message: "Use referenceId variable")
  public func setReferenceId(referenceId: Swift.Int64)
  @available(*, deprecated, renamed: "tckn", message: "Use tckn variable")
  public func getTckn() -> Swift.String
  @available(*, deprecated, renamed: "tckn", message: "Use tckn variable")
  public func setTckn(tckn: Swift.String)
  @available(*, deprecated, renamed: "birthDate", message: "Use birthDate variable")
  public func getBirthDate() -> Swift.String
  @available(*, deprecated, renamed: "birthDate", message: "Use birthDate variable")
  public func setBirthDate(birthDate: Swift.String)
  @available(*, deprecated, renamed: "serialNumber", message: "Use serialNumber variable")
  public func getSerialNumber() -> Swift.String
  @available(*, deprecated, renamed: "serialNumber", message: "Use serialNumber variable")
  public func setSerialNumber(serialNumber: Swift.String)
  @available(*, deprecated, renamed: "tckkExpireDate", message: "Use tckkExpireDate variable")
  public func getTckkExpireDate() -> Swift.String
  @available(*, deprecated, renamed: "tckkExpireDate", message: "Use tckkExpireDate variable")
  public func setTckkExpireDate(tckkExpireDate: Swift.String)
  @available(*, deprecated, renamed: "birthPlace", message: "Use birthPlace variable")
  public func getBirthPlace() -> Swift.String
  @available(*, deprecated, renamed: "birthPlace", message: "Use birthPlace variable")
  public func setBirthPlace(birthPlace: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InvoiceTransportCardCollectInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cardReferenceNumber: Swift.String
  public var invoiceNumber: Swift.String
  public var bsmvAmount: Swift.String
  public var commissionAmount: Swift.String
  public var corporationCode: Swift.String
  public var debtInqOprRefNo: Swift.String
  public var paymentAmount: Swift.String
  public var collectionTypeCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @available(*, deprecated, renamed: "cardReferenceNumber", message: "Use cardReferenceNumber variable")
  public func getCardReferenceNumber() -> Swift.String
  @available(*, deprecated, renamed: "cardReferenceNumber", message: "Use cardReferenceNumber variable")
  public func setCardReferenceNumber(cardReferenceNumber: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getInvoiceNumber() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setInvoiceNumber(invoiceNumber: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getBsmvAmount() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setBsmvAmount(bsmvAmount: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getCommissionAmount() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setCommissionAmount(commissionAmount: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getDebtInqOprRefNo() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setDebtInqOprRefNo(debtInqOprRefNo: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getPaymentAmount() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setPaymentAmount(paymentAmount: Swift.String)
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func getCollectionTypeCode() -> Swift.String
  @available(*, deprecated, renamed: "collectionTypeCode", message: "Use collectionTypeCode variable")
  public func setCollectionTypeCode(collectionTypeCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CancelAtmTokenOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct WalletAgreementDtosListModel : Swift.Codable {
  public var agreementType: Swift.String?
  public var agreementVersion: Swift.String?
  public var isRequired: Swift.String?
  public var agreementText: Swift.String?
  public var name: Swift.String?
  public var description: Swift.String?
  public var isViewingMandatory: Swift.String?
  public var isAcceptanceRequired: Swift.String?
  public var isRejetionPossible: Swift.String?
  @available(*, deprecated, renamed: "agreementType", message: "Use accountId variable")
  public func getAgreementType() -> Swift.String
  @available(*, deprecated, renamed: "agreementType", message: "Use accountId variable")
  public mutating func setAgreementType(agreementType: Swift.String)
  @available(*, deprecated, renamed: "agreementVersion", message: "Use accountId variable")
  public func getAgreementVersion() -> Swift.String
  @available(*, deprecated, renamed: "agreementVersion", message: "Use accountId variable")
  public mutating func setAgreementVersion(agreementVersion: Swift.String)
  @available(*, deprecated, renamed: "isRequired", message: "Use accountId variable")
  public func getIsRequired() -> Swift.String
  @available(*, deprecated, renamed: "isRequired", message: "Use accountId variable")
  public mutating func setIsRequired(isRequired: Swift.String)
  @available(*, deprecated, renamed: "agreementText", message: "Use accountId variable")
  public func getAgreementText() -> Swift.String
  @available(*, deprecated, renamed: "agreementText", message: "Use accountId variable")
  public mutating func setAgreementText(agreementText: Swift.String)
  @available(*, deprecated, renamed: "name", message: "Use accountId variable")
  public func getName() -> Swift.String
  @available(*, deprecated, renamed: "name", message: "Use accountId variable")
  public mutating func setName(name: Swift.String)
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "description", message: "Use description variable")
  public mutating func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "isViewingMandatory", message: "Use isViewingMandatory variable")
  public func getIsViewingMandatory() -> Swift.String
  @available(*, deprecated, renamed: "isViewingMandatory", message: "Use isViewingMandatory variable")
  public mutating func setIsViewingMandatory(isViewingMandatory: Swift.String)
  @available(*, deprecated, renamed: "isAcceptanceRequired", message: "Use isAcceptanceRequired variable")
  public func getIsAcceptanceRequired() -> Swift.String
  @available(*, deprecated, renamed: "isAcceptanceRequired", message: "Use isAcceptanceRequired variable")
  public mutating func setIsAcceptanceRequired(isAcceptanceRequired: Swift.String)
  @available(*, deprecated, renamed: "isRejetionPossible", message: "Use isRejetionPossible variable")
  public func getIsRejetionPossible() -> Swift.String
  @available(*, deprecated, renamed: "isRejetionPossible", message: "Use isRejetionPossible variable")
  public mutating func setIsRejetionPossible(isRejetionPossible: Swift.String)
  public func isViewingMandatoryConvertedBool() -> Swift.Bool?
  public func isAcceptanceRequiredConvertedBool() -> Swift.Bool?
  public func isRejetionPossibleConvertedBool() -> Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class AccountActionsInquiryInputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletID: Swift.Int64
  public var size: Swift.Int
  public var index: Swift.Int
  public var startDate: Swift.String
  public var endDate: Swift.String
  public var merchantCategoryGroupId: Swift.Int
  public var txnCategorylist: [Swift.Int64]
  public var txnTypelist: [Swift.Int16]
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getTxnCategorylist() -> [Swift.Int64]
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setTxnCategorylist(txnCategorylist: [Swift.Int64])
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getSize() -> Swift.Int
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setSize(size: Swift.Int)
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getWalletID() -> Swift.Int64
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setWalletID(WalletID: Swift.Int64)
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getIndex() -> Swift.Int
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setIndex(index: Swift.Int)
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getStartDate() -> Swift.String
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setStartDate(StartDate: Swift.String)
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getEndDate() -> Swift.String
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setEndDate(EndDate: Swift.String)
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func getMerchantCategoryGroupId() -> Swift.Int
  @available(*, deprecated, renamed: "splitTheBillId", message: "Use splitTheBillId variable")
  public func setMerchantCategoryGroupId(merchantCategoryGroupId: Swift.Int)
  public func getTxnTypelist() -> [Swift.Int16]
  public func setTxnTypelist(txnTypelist: [Swift.Int16])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetResponseMessagesInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct TreasuryModel : Swift.Codable {
  public func getBuyingExchangeRate() -> Swift.String
  public func getBuyingParity() -> Swift.String
  public func getCurrencyName() -> Swift.String
  public func getCurrencyType() -> Swift.String
  public func getEffectiveBuyingExchangeRate() -> Swift.String
  public func getEffectiveBuyingParity() -> Swift.String
  public func getParity() -> Swift.String
  public func getSellingExchangeRate() -> Swift.String
  public func getSellingParity() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class UpdateAccountInfoInputParams : wallet_ios_sdk.BaseRequestModel {
  public var walletId: Swift.Int64
  public var walletName: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "walletName", message: "Use walletName variable")
  public func getWalletName() -> Swift.String
  @available(*, deprecated, renamed: "walletName", message: "Use walletName variable")
  public func setWalletName(walletName: Swift.String)
  @available(*, deprecated, renamed: "walletId", message: "Use walletId variable")
  public func getWalletId() -> Swift.Int64
  @available(*, deprecated, renamed: "walletId", message: "Use walletId variable")
  public func setWalletId(walletId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AccountActionsInquiryOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var totalCount: Swift.Int?
  public var txnList: [wallet_ios_sdk.TxnListModel]?
  public var totalAmount: Swift.Double?
  @available(*, deprecated, renamed: "totalCount", message: "Use totalCount variable")
  public func getTotalCount() -> Swift.Int
  @available(*, deprecated, renamed: "totalCount", message: "Use totalCount variable")
  public func setTotalCount(totalCount: Swift.Int)
  @available(*, deprecated, renamed: "txnList", message: "Use txnList variable")
  public func getTxnList() -> [wallet_ios_sdk.TxnListModel]
  @available(*, deprecated, renamed: "txnList", message: "Use txnList variable")
  public func setTxnList(txnList: [wallet_ios_sdk.TxnListModel])
  public func getTotalAmount() -> Swift.Double
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BaseResponse : Swift.Codable {
  public init()
  public init(_ meta: wallet_ios_sdk.Meta)
  public func getMeta() -> wallet_ios_sdk.Meta
  public func setMeta(meta: wallet_ios_sdk.Meta)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BaseResponseMeta {
  public func getMeta() -> wallet_ios_sdk.Meta
  public func setMeta(meta: wallet_ios_sdk.Meta)
  @objc deinit
}
public struct SubscriberInfoModel : Swift.Codable {
  public var orderNo: Swift.Int?
  public var subscriberNo: Swift.String?
  public init()
  public func getOrderNo() -> Swift.Int
  public func getSubscriberNo() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension wallet_ios_sdk.WalletCoreSDK {
  public func AddCustomerInferface(addCustomerInputParams: wallet_ios_sdk.AddCustomerInputParams, completion: @escaping (_ result: wallet_ios_sdk.AddCustomerOutputParams) -> ())
  public func getCustomerSecretQuestionIdInterface(request: wallet_ios_sdk.GetCustomerSecretQuestionInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCustomerSecretQuestionOutputParams) -> ())
  public func checkCustomerSecretQuestionAnswerInterface(checkCustomerSecretQuestionAnswerInputParams: wallet_ios_sdk.CheckCustomerSecretQuestionAnswerInputParams, completion: @escaping (_ result: wallet_ios_sdk.CheckCustomerSecretQuestionAnswerOutputParams) -> ())
  public func PhoneNumberUpdateInterface(phoneNumberUpdateInputParams: wallet_ios_sdk.PhoneNumberUpdateInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func setCommunicationPreferencesInterface(setCommunicationPreferencesInputParams: wallet_ios_sdk.SetCommunicationPreferencesInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func UpdateCustomerInfoInterface(updateCustomerInfoInputParams: wallet_ios_sdk.UpdateCustomerInfoInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func VerifyCustomerByKpsInterface(verifyCustomerByKpsInputParams: wallet_ios_sdk.VerifyCustomerByKpsInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func VerifyUserMailAddressInterface(completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func GetCustomerInfoInterface(completion: @escaping (_ result: wallet_ios_sdk.GetCustomerInfoOutputParams) -> ())
  public func getCustomerAdressInfo(completion: @escaping (_ result: wallet_ios_sdk.GetCustomerAdressInfoOutputParams) -> ())
  public func getCommunicationPreferencesInterface(getCommunicationPreferencesInputParams: wallet_ios_sdk.GetCommunicationPreferencesInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCommunicationPreferencesOutputParams) -> ())
  public func getCustomerCashbackDataInterface(getCustomerCashbackDataInputParams: wallet_ios_sdk.GetCustomerCashbackDataInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetCustomerCashbackDataOutputParams) -> ())
  public func getOpenConsentPreferencesInterface(getOpenConsentPreferencesInputParams: wallet_ios_sdk.GetOpenConsentPreferencesInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetOpenConsentPreferencesOutputParams) -> ())
  public func getFaq(getFAQInputParams: wallet_ios_sdk.GetFAQInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetFAQOutputParams) -> ())
  public func setOpenConsentPreferencesInterface(setOpenConsentPreferencesInputParams: wallet_ios_sdk.SetOpenConsentPreferencesInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
  public func getDigitalSlipInterface(getDigitalSlipInputParams: wallet_ios_sdk.GetDigitalSlipInputParams, completion: @escaping (_ result: wallet_ios_sdk.GetDigitalSlipOutputParams) -> ())
  public func getDigitalSlipPreferenceInterface(completion: @escaping (_ result: wallet_ios_sdk.GetDigitalSlipPreferenceOutputParams) -> ())
  public func updateDigitalSlipPreferenceInterface(updateDigitalSlipPreferenceInputParams: wallet_ios_sdk.UpdateDigitalSlipPreferenceInputParams, completion: @escaping (_ result: wallet_ios_sdk.BaseOutputParams) -> ())
}
@objc @_inheritsConvenienceInitializers public class InvoiceCalculateCommissionFeeInputParams : wallet_ios_sdk.BaseRequestModel {
  public var debtInquiryOperationReferenceNumber: Swift.String
  public var corporationCode: Swift.String
  public var paymentAmount: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "debtInquiryOperationReferenceNumber", message: "Use debtInquiryOperationReferenceNumber variable")
  public func getDebtInquiryOperationReferenceNumber() -> Swift.String
  @available(*, deprecated, renamed: "debtInquiryOperationReferenceNumber", message: "Use debtInquiryOperationReferenceNumber variable")
  public func setDebtInquiryOperationReferenceNumber(debtInquiryOperationReferenceNumber: Swift.String)
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func getCorporationCode() -> Swift.String
  @available(*, deprecated, renamed: "corporationCode", message: "Use corporationCode variable")
  public func setCorporationCode(corporationCode: Swift.String)
  @available(*, deprecated, renamed: "paymentAmount", message: "Use paymentAmount variable")
  public func getPaymentAmount() -> Swift.String
  @available(*, deprecated, renamed: "paymentAmount", message: "Use paymentAmount variable")
  public func setPaymentAmount(paymentAmount: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetJobsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var statusId: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "statusId", message: "Use statusId variable")
  public func getStatusId() -> Swift.Int
  @available(*, deprecated, renamed: "statusId", message: "Use statusId variable")
  public func setStatusId(statusId: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TopupPayCommitInputParams : wallet_ios_sdk.BaseRequestModel {
  public var commitToken: Swift.String?, orderID: Swift.String?, masterpassCardID: Swift.String?
  public var amount: Swift.Double?
  public var merchantId: Swift.Int?
  public var stationId: Swift.Int?
  public var transactionType: Swift.Int?
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "commitToken", message: "Use commitToken variable")
  public func getCommitToken() -> Swift.String
  @available(*, deprecated, renamed: "commitToken", message: "Use commitToken variable")
  public func setCommitToken(commitToken: Swift.String)
  @available(*, deprecated, renamed: "orderID", message: "Use orderID variable")
  public func getOrderID() -> Swift.String
  @available(*, deprecated, renamed: "orderID", message: "Use orderID variable")
  public func setOrderID(orderID: Swift.String)
  @available(*, deprecated, renamed: "masterpassCardID", message: "Use masterpassCardID variable")
  public func getMasterpassCardID() -> Swift.String
  @available(*, deprecated, renamed: "masterpassCardID", message: "Use masterpassCardID variable")
  public func setMasterpassCardID(masterpassCardID: Swift.String)
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func getAmount() -> Swift.Double
  @available(*, deprecated, renamed: "amount", message: "Use amount variable")
  public func setAmount(amount: Swift.Double)
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func getMerchantId() -> Swift.Int
  @available(*, deprecated, renamed: "merchantId", message: "Use merchantId variable")
  public func setMerchantId(merchantId: Swift.Int)
  @available(*, deprecated, renamed: "stationId", message: "Use stationId variable")
  public func getStationId() -> Swift.Int
  @available(*, deprecated, renamed: "stationId", message: "Use stationId variable")
  public func setStationId(stationId: Swift.Int)
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func getTransactionType() -> Swift.Int
  @available(*, deprecated, renamed: "transactionType", message: "Use transactionType variable")
  public func setTransactionType(transactionType: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public class SingleParamRequest : Swift.Encodable {
  public var UniqueMPANumber: Swift.String
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetCommunicationPreferencesInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AddAnonimCustomerInputParams : wallet_ios_sdk.BaseRequestModel {
  public var phone: Swift.String
  public var referanceNumber: Swift.String
  public var password: Swift.String
  public var confirmAgreements: [wallet_ios_sdk.ConfirmAgreementListInputModel]
  public var communicationPreferences: wallet_ios_sdk.CommunicationPreferenceObjModel
  public var openConsentPreferences: wallet_ios_sdk.OpenConsentPreferencesModel
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCitiesOutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var cities: [wallet_ios_sdk.CityModel]?
  public func getCities() -> [wallet_ios_sdk.CityModel]
  public func setCities(cities: [wallet_ios_sdk.CityModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct TargetAccountListModel : Swift.Codable {
  public var accountName: Swift.String?
  public var iban: Swift.String?
  public var bankCode: Swift.String?
  public var branchCode: Swift.String?
  public var accountNumber: Swift.String?
  public var currency: Swift.Int?
  public var targetAccountId: Swift.Int64?
  public var isDefaultBankAccount: Swift.String?
  @available(*, deprecated, renamed: "isDefaultBankAccount", message: "Use isDefaultBankAccount variable")
  public func getIsDefaultBankAccount() -> Swift.String
  @available(*, deprecated, renamed: "accountName", message: "Use accountName variable")
  public func getAccountName() -> Swift.String
  @available(*, deprecated, renamed: "iban", message: "Use iban variable")
  public func getIBAN() -> Swift.String
  @available(*, deprecated, renamed: "bankCode", message: "Use bankCode variable")
  public func getBankCode() -> Swift.String
  @available(*, deprecated, renamed: "branchCode", message: "Use branchCode variable")
  public func getBranchCode() -> Swift.String
  @available(*, deprecated, renamed: "accountNumber", message: "Use accountNumber variable")
  public func getAccountNumber() -> Swift.String
  @available(*, deprecated, renamed: "currency", message: "Use currency variable")
  public func getCurrency() -> Swift.Int
  @available(*, deprecated, renamed: "targetAccountId", message: "Use targetAccountId variable")
  public func getTargetAccountID() -> Swift.Int64
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SetMonthlyPaymentAmountInputParams : wallet_ios_sdk.BaseRequestModel {
  public var MonthlyPaymentAmount: Foundation.Decimal
  public var isControlEnabled: Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "MonthlyPaymentAmount", message: "Use MonthlyPaymentAmount variable")
  public func getMonthlyAtmWithdrawAmount() -> Swift.Double
  @available(*, deprecated, renamed: "MonthlyPaymentAmount", message: "Use MonthlyPaymentAmount variable")
  public func setMonthlyPaymentAmount(MonthlyPaymentAmount: Swift.Double)
  @available(*, deprecated, renamed: "isControlEnabled", message: "Use isControlEnabled variable")
  public func getIsControlEnabled() -> Swift.Bool
  @available(*, deprecated, renamed: "isControlEnabled", message: "Use isControlEnabled variable")
  public func setIsControlEnabled(isControlEnabled: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LogoutInputParams : wallet_ios_sdk.BaseRequestModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetPasswordAndSecretQuestionAnswerOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct AdressModel : Swift.Codable {
  public var countryCode: Swift.String?
  public var cityCode: Swift.Int?
  public var town: Swift.String?
  public var district: Swift.String?
  public var street: Swift.String?
  public var detail: Swift.String?
  public var postalCode: Swift.String?
  public init()
  @available(*, deprecated, renamed: "countryCode", message: "Use countryCode variable")
  public func getCountryCode() -> Swift.String
  @available(*, deprecated, renamed: "countryCode", message: "Use countryCode variable")
  public mutating func setCountryCode(countryCode: Swift.String)
  @available(*, deprecated, renamed: "cityCode", message: "Use cityCode variable")
  public func getCityCode() -> Swift.Int
  @available(*, deprecated, renamed: "cityCode", message: "Use cityCode variable")
  public mutating func setCityCode(cityCode: Swift.Int)
  @available(*, deprecated, renamed: "town", message: "Use town variable")
  public func getTown() -> Swift.String
  @available(*, deprecated, renamed: "town", message: "Use town variable")
  public mutating func setTown(town: Swift.String)
  @available(*, deprecated, renamed: "district", message: "Use district variable")
  public func getDistrict() -> Swift.String
  @available(*, deprecated, renamed: "district", message: "Use district variable")
  public mutating func setDistrict(district: Swift.String)
  @available(*, deprecated, renamed: "street", message: "Use street variable")
  public func getStreet() -> Swift.String
  @available(*, deprecated, renamed: "street", message: "Use street variable")
  public mutating func setStreet(street: Swift.String)
  @available(*, deprecated, renamed: "detail", message: "Use detail variable")
  public func getDetail() -> Swift.String
  @available(*, deprecated, renamed: "detail", message: "Use detail variable")
  public mutating func setDetail(detail: Swift.String)
  @available(*, deprecated, renamed: "postalCode", message: "Use postalCode variable")
  public func getPostalCode() -> Swift.String
  @available(*, deprecated, renamed: "postalCode", message: "Use postalCode variable")
  public mutating func setPostalCode(postalCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class TurkcellInvoiceInquiryInputParams : wallet_ios_sdk.BaseRequestModel {
  public var institutionNumber: Swift.String
  public var parameters: [wallet_ios_sdk.InvoiceInquiryModel]
  public var partialPaymentAmount: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  public func setInstitutionNumber(institutionNumber: Swift.String)
  public func setParameters(parameters: [wallet_ios_sdk.InvoiceInquiryModel])
  public func setPartialPaymentAmount(partialPaymentAmount: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ReOtpOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SendAccountActionsWithEmailOutPutParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SendAccountActionsWithEmailInputParams : wallet_ios_sdk.BaseRequestModel {
  public var startDate: Swift.String
  public var endDate: Swift.String
  public var cardToken: Swift.String
  public var accountId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "startDate", message: "Use startDate variable")
  public func getStartDate() -> Swift.String
  @available(*, deprecated, renamed: "startDate", message: "Use startDate variable")
  public func setStartDate(startDate: Swift.String)
  @available(*, deprecated, renamed: "endDate", message: "Use endDate variable")
  public func getEndDate() -> Swift.String
  @available(*, deprecated, renamed: "endDate", message: "Use endDate variable")
  public func setEndDate(endDate: Swift.String)
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func getCardToken() -> Swift.String
  @available(*, deprecated, renamed: "cardToken", message: "Use cardToken variable")
  public func setCardToken(cardToken: Swift.String)
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func getAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "accountId", message: "Use accountId variable")
  public func setAccountId(accountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetAllDistrictWithCityCodeInKpsInputParams : wallet_ios_sdk.BaseRequestModel {
  public var cityCode: Swift.Int
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "cityCode", message: "Use cityCode variable")
  public func getCityCode() -> Swift.Int
  @available(*, deprecated, renamed: "cityCode", message: "Use cityCode variable")
  public func setCityCode(cityCode: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AcceptAskForMoneyInputParams : wallet_ios_sdk.BaseRequestModel {
  public var askForMoneyId: Swift.Int64
  public var descriptionAcceptAskForMoney: Swift.String
  public var expenseAmount: Foundation.Decimal
  public var sourceAccountId: Swift.Int64
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "askForMoneyId", message: "Use askForMoneyId variable")
  public func getAskForMoneyId() -> Swift.Int64
  @available(*, deprecated, renamed: "askForMoneyId", message: "Use askForMoneyId variable")
  public func setAskForMoneyId(askForMoneyId: Swift.Int64)
  @available(*, deprecated, renamed: "descriptionAcceptAskForMoney", message: "Use descriptionAcceptAskForMoney variable")
  public func getDescription() -> Swift.String
  @available(*, deprecated, renamed: "descriptionAcceptAskForMoney", message: "Use descriptionAcceptAskForMoney variable")
  public func setDescription(description: Swift.String)
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func getExpenseAmount() -> Swift.Double
  @available(*, deprecated, renamed: "expenseAmount", message: "Use expenseAmount variable")
  public func setExpenseAmount(expenseAmount: Swift.Double)
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func getSourceAccountId() -> Swift.Int64
  @available(*, deprecated, renamed: "sourceAccountId", message: "Use sourceAccountId variable")
  public func setSourceAccountId(sourceAccountId: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CancelArafOutputParams : wallet_ios_sdk.BaseResponseMeta {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GetPaymentPurposeInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UpdateCustomerPhoneNumberInputParams : wallet_ios_sdk.BaseRequestModel {
  public var customerId: Swift.Int?
  public var phoneNumber: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SetCommunicationPreferencesInputParams : wallet_ios_sdk.BaseRequestModel {
  public var communicationPreferences: [wallet_ios_sdk.CommunicationPreferenceModel]
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "communicationPreferences", message: "Use communicationPreferences variable")
  public func getCommunicationPreferences() -> [wallet_ios_sdk.CommunicationPreferenceModel]
  @available(*, deprecated, renamed: "communicationPreferences", message: "Use communicationPreferences variable")
  public func setCommunicationPreferences(communicationPreferences: [wallet_ios_sdk.CommunicationPreferenceModel])
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 12.0, *)
extension wallet_ios_sdk.WalletCoreSDK {
  public func preloadRemoteIpAddress(completion: @escaping (Swift.String?) -> Swift.Void)
  public func isRemoteIpAddressAvailable() -> Swift.Bool
  public func ensureRemoteIpAddressIsAvailable(completion: @escaping (Swift.Bool) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @available(iOS 12.0, *)
public class PublicIPService {
  public static let shared: wallet_ios_sdk.PublicIPService
  public func fetchPublicIP(completion: @escaping (Swift.Result<Swift.String, wallet_ios_sdk.PublicIPError>) -> Swift.Void)
  public func clearCachedIP()
  @objc deinit
}
public enum PublicIPError : Swift.Error, Foundation.LocalizedError {
  case networkUnavailable
  case allServicesFailed
  case invalidResponse
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: wallet_ios_sdk.PublicIPError, b: wallet_ios_sdk.PublicIPError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GetCustomerRemainingLimitInfoV2OutputParams : wallet_ios_sdk.BaseResponseMeta {
  public var customerRemainingLimits: [wallet_ios_sdk.CustomerRemainingLimitsModel]?
  @available(*, deprecated, renamed: "customerRemainingLimits", message: "Use customerRemainingLimits variable")
  public func getCustomerRemainingLimits() -> [wallet_ios_sdk.CustomerRemainingLimitsModel]
  @available(*, deprecated, renamed: "customerRemainingLimits", message: "Use customerRemainingLimits variable")
  public func setCustomerRemainingLimits(customerRemainingLimits: [wallet_ios_sdk.CustomerRemainingLimitsModel])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class BaseRequestModel : ObjectiveC.NSObject, Swift.Encodable {
  public var UniqueMPANumber: Swift.String
  public var tenantId: Swift.Int
  public var remoteIpAddress: Swift.String
  @objc override dynamic public init()
  public func setRemoteIpAddress(_ ip: Swift.String)
  public func getPublicIP() -> Swift.String
  public func getRemoteIpAddress() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GetSecretQuestionInputParams : wallet_ios_sdk.BaseRequestModel {
  public var languageCode: Swift.String
  override public func encode(to encoder: any Swift.Encoder) throws
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func getLanguageCode() -> Swift.String
  @available(*, deprecated, renamed: "languageCode", message: "Use languageCode variable")
  public func setLanguageCode(languageCode: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension wallet_ios_sdk.GetMonthlyBalanceOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetMonthlyBalanceOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetPendingOrderTypesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetPendingOrderTypesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAllBuildingWithStreetCodeInKpsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAllBuildingWithStreetCodeInKpsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CreateAccountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CreateAccountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetDigitalSlipPreferenceOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetDigitalSlipPreferenceOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.WalletPaymentOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.WalletPaymentOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceInstitutionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceInstitutionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AcceptAskForMoneyOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AcceptAskForMoneyOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetWalletVirtualCardTxnsMonthlyByAccountIdOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetWalletVirtualCardTxnsMonthlyByAccountIdOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCommunicationPreferencesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCommunicationPreferencesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetPaymentPurposeOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetPaymentPurposeOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.DeleteAccountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.DeleteAccountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UpdatePrepaidCardStatusOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UpdatePrepaidCardStatusOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetTransactionRestrictionsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetTransactionRestrictionsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TurkcellInvoiceGetInstitutionTypeOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TurkcellInvoiceGetInstitutionTypeOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.PaymentWalletMobileOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.PaymentWalletMobileOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerSegmentsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerSegmentsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BeginOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BeginOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.DgFinGetTokenLoanCreateOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.DgFinGetTokenLoanCreateOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SecurityQuestionResetOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SecurityQuestionResetOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.MasterpassUnlinkCustomerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.MasterpassUnlinkCustomerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceGetInstitutionTypeOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceGetInstitutionTypeOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetKpsAddressVerifyOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetKpsAddressVerifyOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetMobileComponentsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetMobileComponentsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CardAndBankOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CardAndBankOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetOpenConsentPreferencesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetOpenConsentPreferencesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAllDistrictWithCityCodeInKpsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAllDistrictWithCityCodeInKpsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceListCorporationDefinitionsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceListCorporationDefinitionsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceCollectOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceCollectOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TurkcellInvoiceGetInstitutionListOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TurkcellInvoiceGetInstitutionListOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BankAccountListOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BankAccountListOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetSupportedLanguagesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetSupportedLanguagesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TopupPayCommitOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TopupPayCommitOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TurkcellInvoicePaymentOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TurkcellInvoicePaymentOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetMerchantCategoryGroupListOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetMerchantCategoryGroupListOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetFailLoginAttemptOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetFailLoginAttemptOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SetDefaultAccountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetDefaultAccountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceCalculateCommissionFeeOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceCalculateCommissionFeeOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.VerifyOTPOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.VerifyOTPOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UpdateAccountSessionTimeOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UpdateAccountSessionTimeOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BalanceGetExpenseAmountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BalanceGetExpenseAmountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceInquiryOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceInquiryOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UserVerificationStatusOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UserVerificationStatusOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.DenySplitTheBillOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.DenySplitTheBillOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoicePaymentOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoicePaymentOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetExchangeRatesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetExchangeRatesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetPendingOrdersOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetPendingOrdersOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SupportV2OutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SupportV2OutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerAdressInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerAdressInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetPendingOrderDetailOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetPendingOrderDetailOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.LoginWithPasswordOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.LoginWithPasswordOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.RenewSessionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.RenewSessionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CreatePrepaidCardTrnPermissionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CreatePrepaidCardTrnPermissionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UpdateAccountInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UpdateAccountInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.ConfirmAgreementOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.ConfirmAgreementOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerSecretQuestionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerSecretQuestionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceGetEpinDebtInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceGetEpinDebtInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TurkcellInvoiceInquiryOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TurkcellInvoiceInquiryOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SetOpenConsentPreferencesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetOpenConsentPreferencesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.EncDataResponseOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.EncDataResponseOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetFAQOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetFAQOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SendMoneyToMyAccountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SendMoneyToMyAccountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.PhoneNumberUpdateOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.PhoneNumberUpdateOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AddCustomerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AddCustomerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceGetDebtInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceGetDebtInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.VerifyCustomerByKpsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.VerifyCustomerByKpsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetWalletCardInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetWalletCardInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BankAccountUpdateOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BankAccountUpdateOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoicePrepaidPaymentConfirmMessageOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoicePrepaidPaymentConfirmMessageOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCardBinInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCardBinInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetWalletVirtualCardTxnsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetWalletVirtualCardTxnsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerLimitInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerLimitInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetWalletVirtualCardTxnsDailyByAccountIdOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetWalletVirtualCardTxnsDailyByAccountIdOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetResponseMessagesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetResponseMessagesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CustomOtpVerificationOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CustomOtpVerificationOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TopupPayStartOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TopupPayStartOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SupportOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SupportOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.MasterpassPaymentOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.MasterpassPaymentOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAddressTypesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAddressTypesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.StartQrTransactionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.StartQrTransactionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetTxnTypeOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetTxnTypeOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AddAnonimCustomerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AddAnonimCustomerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerLabelsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerLabelsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CancelAskForMoneyOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CancelAskForMoneyOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.VerifyUserMailAddressOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.VerifyUserMailAddressOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceListCollectionTypesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceListCollectionTypesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SetPasswordOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetPasswordOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAccountActionsReceiptOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAccountActionsReceiptOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AddBalanceToWalletByVposOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AddBalanceToWalletByVposOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TransferBetweenAccountsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TransferBetweenAccountsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetUserCommunicationPreferenceOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetUserCommunicationPreferenceOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerRemainingLimitInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerRemainingLimitInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceGetPrepaidPrequeryMessageOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceGetPrepaidPrequeryMessageOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAllStreetWithVillageCodeInKpsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAllStreetWithVillageCodeInKpsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BankAccountDeleteOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BankAccountDeleteOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetPrepaidCardTrnPermissionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetPrepaidCardTrnPermissionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetMasterpassConfigOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetMasterpassConfigOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.MasterpassPaymentCompleteOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.MasterpassPaymentCompleteOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceGetPrepaidInformationOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceGetPrepaidInformationOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.TransferMoneyToBankAccountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.TransferMoneyToBankAccountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetExpenseAmountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetExpenseAmountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetMfsTokenOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetMfsTokenOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UpdateCustomerPhoneNumberOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UpdateCustomerPhoneNumberOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SplitTheBillOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SplitTheBillOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.LogoutOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.LogoutOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CheckCustomerSecretQuestionAnswerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CheckCustomerSecretQuestionAnswerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.DgFinGetTokenOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.DgFinGetTokenOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerCashbackDataOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerCashbackDataOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAllVillageWithDistrictCodeInKpsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAllVillageWithDistrictCodeInKpsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceTransportCardCollectOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceTransportCardCollectOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CancelSplitTheBillOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CancelSplitTheBillOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.ConfirmPasswordOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.ConfirmPasswordOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UpdateCustomerInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UpdateCustomerInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SetMonthlyPaymentAmountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetMonthlyPaymentAmountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UnlinkCustomerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UnlinkCustomerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetLimitDefinitionV2OutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetLimitDefinitionV2OutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetLimitInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetLimitInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BalanceInquiryOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BalanceInquiryOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AskForMoneyOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AskForMoneyOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetTxnTypeCategoryOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetTxnTypeCategoryOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetReceiptOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetReceiptOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BaseOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BaseOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetNationalitiesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetNationalitiesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAllSectionWithBuildingCodeInKpsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAllSectionWithBuildingCodeInKpsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CompleteRegistrationOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CompleteRegistrationOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetLimitDefinitionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetLimitDefinitionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetDigitalSlipOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetDigitalSlipOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetInstitutionNameByIbanOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetInstitutionNameByIbanOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AddBalanceToWalletByStoredCardOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AddBalanceToWalletByStoredCardOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetJobsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetJobsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.BankAccountCreateOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.BankAccountCreateOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.ApplyPrepaidCardOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.ApplyPrepaidCardOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.ForgotPasswordWithParametersOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.ForgotPasswordWithParametersOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.RefundTopUpOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.RefundTopUpOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.ChangePasswordOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.ChangePasswordOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerRemainingLimitInfoV3OutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerRemainingLimitInfoV3OutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceGetCorporationOperationParametersOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceGetCorporationOperationParametersOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.PersonalizedAnonymousCardOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.PersonalizedAnonymousCardOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetLatestAgreementOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetLatestAgreementOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SwitchSessionCheckOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SwitchSessionCheckOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.UpdateDigitalSlipPreferenceOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.UpdateDigitalSlipPreferenceOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CheckOnlinePaymentLimitOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CheckOnlinePaymentLimitOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InvoiceGetReceiptInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InvoiceGetReceiptInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.DenyAskForMoneyOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.DenyAskForMoneyOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.MasterpassGenerateTokenOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.MasterpassGenerateTokenOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SetMonthlyAtmWithdrawAmountOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetMonthlyAtmWithdrawAmountOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SendMoneyOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SendMoneyOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SetSecretQuestionAnswerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetSecretQuestionAnswerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetInstrumentsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetInstrumentsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AddPrepaidCardMasterPassOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AddPrepaidCardMasterPassOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAtmTokenOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAtmTokenOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InitialOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.InitialOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.FailLoginAttemptSeenOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.FailLoginAttemptSeenOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetSecretQuestionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetSecretQuestionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCustomerPrepaidCardListOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerPrepaidCardListOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.ForgotPasswordOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.ForgotPasswordOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetExpensesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetExpensesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAllCityWithKpsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAllCityWithKpsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCampaignsOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCampaignsOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.KpsAddressInquiryOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.KpsAddressInquiryOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.InitResponse : Swift.Encodable {}
extension wallet_ios_sdk.InitResponse : Swift.Decodable {}
extension wallet_ios_sdk.SetCommunicationPreferencesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetCommunicationPreferencesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetAvailableCashBalanceUsedTransactionOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetAvailableCashBalanceUsedTransactionOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.DgFinGetCustomerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.DgFinGetCustomerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetQrInfoOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetQrInfoOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CommitPurchaseOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CommitPurchaseOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AcceptSplitTheBillOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AcceptSplitTheBillOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AddEnquraIntegrationOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AddEnquraIntegrationOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.CancelAtmTokenOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CancelAtmTokenOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.AccountActionsInquiryOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.AccountActionsInquiryOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.GetCitiesOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCitiesOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SetPasswordAndSecretQuestionAnswerOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.SetPasswordAndSecretQuestionAnswerOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.ReOtpOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.ReOtpOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.SendAccountActionsWithEmailOutPutParams : Swift.Encodable {}
extension wallet_ios_sdk.SendAccountActionsWithEmailOutPutParams : Swift.Decodable {}
extension wallet_ios_sdk.CancelArafOutputParams : Swift.Encodable {}
extension wallet_ios_sdk.CancelArafOutputParams : Swift.Decodable {}
extension wallet_ios_sdk.PublicIPError : Swift.Equatable {}
extension wallet_ios_sdk.PublicIPError : Swift.Hashable {}
extension wallet_ios_sdk.GetCustomerRemainingLimitInfoV2OutputParams : Swift.Encodable {}
extension wallet_ios_sdk.GetCustomerRemainingLimitInfoV2OutputParams : Swift.Decodable {}

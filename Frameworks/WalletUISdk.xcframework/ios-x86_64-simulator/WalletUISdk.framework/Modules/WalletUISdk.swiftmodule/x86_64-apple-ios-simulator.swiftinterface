// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name WalletUISdk
import AVFoundation
import Combine
import CommonCrypto
import Contacts
import CoreLocation
import CoreMedia
import CoreText
import CryptoKit
import DeveloperToolsSupport
import EnQualify
import FirebaseAnalytics
import FirebaseCore
import Foundation
import Lottie
import Network
import ReplayKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UIKit.UIView
@_exported import WalletUISdk
import WebKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
import wallet_ios_sdk
public protocol WalletOutputParams {
}
extension wallet_ios_sdk.BalanceGetExpenseAmountOutputParams : WalletUISdk.WalletOutputParams {
}
extension wallet_ios_sdk.PaymentWalletMobileOutputParams : WalletUISdk.WalletOutputParams {
}
extension wallet_ios_sdk.TopupPayStartOutputParams : WalletUISdk.WalletOutputParams {
}
extension wallet_ios_sdk.TopupPayCommitOutputParams : WalletUISdk.WalletOutputParams {
}
extension wallet_ios_sdk.GetMasterpassConfigOutputParams : WalletUISdk.WalletOutputParams {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LoadingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func show(in view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) final public func showInWindow()
  @_Concurrency.MainActor(unsafe) final public func hide()
  @_Concurrency.MainActor(unsafe) final public func setLoadingMessage(_ message: Swift.String)
  @objc deinit
}
final public class ActivityTracker {
  public init()
  final public func addActivity()
  final public func removeActivity()
  @objc deinit
}
public enum WalletAgreementAgreementStatus : Swift.String {
  case viewed
  case accepted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class WalletUiSDK {
  public enum HomeTabType {
    case transactions
    case pending
    public static func == (a: WalletUISdk.WalletUiSDK.HomeTabType, b: WalletUISdk.WalletUiSDK.HomeTabType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Navigate {
    public static func navigate(page: Swift.String, params: [Swift.String : Any] = [:])
    public static func logout(result: @escaping (Swift.Result<wallet_ios_sdk.BaseOutputParams, WalletUISdk.GeneralError>) -> Swift.Void)
    public static func dashboard(selectedTab: WalletUISdk.WalletUiSDK.HomeTabType = .transactions)
    public static func cardList()
    public static func history()
    public static func sendMoney()
    public static func sendMoneyPhone()
    public static func sendMoneyIBAN()
    public static func loadMoney()
    public static func loadMoneyWithIban()
    public static func askMoney()
    public static func QR()
    public static func inviteFriend()
    public static func getMassterpassConfig() -> [Swift.String : Swift.String]
    public static func dgfinDashboard()
    public static func dgfinLoanInfo()
    public static func dgfinPaybackPlan()
    public static func dgfinCustomerApplication()
    public static func dgfinLoanCreate(amount: Swift.Double, itemsInBasket: [[Swift.String : Any]], externalReference: Swift.String, merchantId: Swift.Int64? = nil)
  }
  public static let shared: WalletUISdk.WalletUiSDK
  public init()
  public static func setDefaultHomeTab(_ tab: WalletUISdk.WalletUiSDK.HomeTabType)
  public func setWindow(with window: UIKit.UIWindow)
  public func setController(_ viewController: UIKit.UINavigationController)
  public func goToDashboard()
  public enum Phone {
    public static func set(phone: Swift.String)
  }
  public enum Balance {
    public static func getExpenseAmountBalance(amount: Swift.Double, txnTypeId: Swift.Int16, completion: @escaping (Swift.Result<wallet_ios_sdk.BalanceGetExpenseAmountOutputParams, WalletUISdk.GeneralError>) -> Swift.Void)
    public static func paymentWalletMobilePhone(transactCode: Swift.Int? = nil, amount: Swift.Double? = nil, referenceNumber: Swift.Int? = nil, originalReferenceNumber: Swift.Int? = nil, descriptionText: Swift.String? = nil, userName: Swift.String? = nil, merchantId: Swift.Int = 1000, stationId: Swift.Int = 0, transactionType: Swift.Int = 1, completion: @escaping (Swift.Result<wallet_ios_sdk.PaymentWalletMobileOutputParams, WalletUISdk.GeneralError>) -> Swift.Void)
    public static func topupPayStart(amount: Swift.Double? = nil, expenseAmount: Swift.Double? = nil, userValidationType: Swift.String? = nil, destinationAccountID: Swift.Int? = nil, descriptionText: Swift.String? = nil, referenceNumber: Swift.Int? = nil, merchantId: Swift.Int = 1000, stationId: Swift.Int = 0, transactionType: Swift.Int = 1, completion: @escaping (Swift.Result<wallet_ios_sdk.TopupPayStartOutputParams, WalletUISdk.GeneralError>) -> Swift.Void)
    public static func topupPayCommit(commitToken: Swift.String? = nil, orderID: Swift.String? = nil, masterpassCardID: Swift.String? = nil, amount: Swift.Double? = nil, merchantId: Swift.Int = 1000, stationId: Swift.Int = 0, transactionType: Swift.Int = 1, completion: @escaping (Swift.Result<wallet_ios_sdk.TopupPayCommitOutputParams, WalletUISdk.GeneralError>) -> Swift.Void)
    public static func getMasterpassConfig(userValidationType: Swift.String?, referenceNumber: Swift.Int?, completion: @escaping (Swift.Result<wallet_ios_sdk.GetMasterpassConfigOutputParams, WalletUISdk.GeneralError>) -> Swift.Void)
  }
  @objc deinit
}
public enum QrTransactionType : Swift.String, Swift.CaseIterable {
  case cancelationAmountWithoutPaymentMethod
  case refundAmountWithoutPaymentMethod
  case withPaymentMethod
  case transactionSummary
  case error
  public init?(rawValue: Swift.String)
  public typealias AllCases = [WalletUISdk.QrTransactionType]
  public typealias RawValue = Swift.String
  public static var allCases: [WalletUISdk.QrTransactionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUI.Color {
  public var uiColor: UIKit.UIColor {
    get
  }
}
public protocol EnquraSessionProtocol {
  var idVerifyMainSSView: UIKit.UIViewController? { get set }
  var customerIdentityNumber: Swift.String? { get set }
  var delegate: (any WalletUISdk.EnquraSessionDelegate)? { get set }
  var alertDelegate: (any WalletUISdk.EnquraSessionManagerDelegate)? { get set }
  var isAllowedPermissions: Swift.Bool { get }
  var isDeviceNFCAvailable: Swift.Bool { get }
  var nfcStoredCustomerIdentityData: EnQualify.EnVerifyCustomerIdentityDoc { get }
  var initialFlow: WalletUISdk.EnquraSessionStartFlow { get set }
  static var shared: any WalletUISdk.EnquraSessionProtocol { get }
  func setRootNavigationController(_ navigationController: UIKit.UINavigationController)
  func getNavigation() -> UIKit.UINavigationController?
  func initializeSession(onComplete: @escaping () -> Swift.Void)
  func startSession(with flow: WalletUISdk.EnquraSessionStartFlow, onComplete: @escaping () -> Swift.Void)
  func continueSession(with flow: WalletUISdk.AgentRequestType, onComplete: @escaping () -> Swift.Void)
  func requestVideoAudioPermissions()
  func setNFCBACData()
  func getCustomerSegmentId(completion: @escaping (Swift.Bool) -> Swift.Void)
  func faceDetectStart()
  func nfcStart()
  func ocrStart()
  func closeSession()
  func callSessionClose()
  func callSessionCloseWithoutFinish()
  func faceRetry()
  func nfcRetry()
  func idRetry()
}
public enum AgentRequestType {
  case none
  case nfc
  case ocr
  case liveness
  case faceRecognition
  case agent
  case busy
  public static func == (a: WalletUISdk.AgentRequestType, b: WalletUISdk.AgentRequestType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AgentRequestEventType : Swift.String {
  case livenessControlRetried
  case nfcRetried
  case ocrRetried
  case faceRecognitionRetried
  case backToVideoCall
  case camOpen
  case camClose
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EnquraSessionStartFlow {
  case nfc
  case ocr
  public static func == (a: WalletUISdk.EnquraSessionStartFlow, b: WalletUISdk.EnquraSessionStartFlow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EnquraSessionState {
  case isLoading(Swift.Bool)
  case failure
}
extension Swift.String {
  public var turkishLocalizableString: Swift.String {
    get
  }
}
public struct QuestionListModelDTO : Swift.Hashable {
  public var id: Swift.String?
  public var text: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.QuestionListModelDTO, b: WalletUISdk.QuestionListModelDTO) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WalletMainView : SwiftUI.View {
  public init(enviormentType: WalletUISdk.WalletUiEnvironment)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11WalletUISdk0A8MainViewV4bodyQrvp", 0) __
}
public protocol EnquraSessionDelegate : AnyObject {
  func nfcVerifyFailure()
  func nfcVerifyCompleted()
  func faceDetectionCompleted()
  func faceDetectionFailure()
  func ocrCompleted()
  func ocrFailure()
  func authTokenFailure()
  func verifyCompleted()
  func verifyFailed()
  func faceDetectStarted()
  func identityFailure()
  func faceRecordFailure()
}
public struct SplashAnimationView : SwiftUI.UIViewRepresentable {
  public init(name: WalletUISdk.AnimationFileName, loopMode: Lottie.LottieLoopMode = .loop, onAnimationFinished: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<WalletUISdk.SplashAnimationView>) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIView, context: SwiftUI.UIViewRepresentableContext<WalletUISdk.SplashAnimationView>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
public enum Pattern : Swift.String {
  case phoneNumber
  case purePhoneNumber
  case phoneNumberWithCountryCode
  case phoneNumberWithCountryCodeWithoutBrackets
  case iban
  case cardNumber
  case maskedCardNumber8Digit
  case maskedCardNumber8Digit2
  case maskedCardNumber6Digit
  case maskedCardNumber6Digit4
  case monthAndYear
  case amount
  case cvv
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUI.Alignment {
  public static let custom: SwiftUI.Alignment
}
public enum WalletCardStatusType : Swift.String {
  case normal
  case blocked
  case temporarilyBlocked
  case lost
  case stolen
  case canceled
  case fake
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension WalletUISdk.EnquraSessionManager : EnQualify.EnVerifyDelegate {
  @objc final public func agentMessageRequest(message: Swift.String)
  @objc final public func addGenericIdDocCompleted(with data: [Swift.String : Swift.String])
  @objc final public func addGenericIdDocFailure()
  @objc final public func capturePhotoCompleted()
  @objc final public func capturePhotoFailure()
  @objc final public func captureVideoCompleted()
  @objc final public func captureVideoFailure()
  @objc final public func photoLibraryAuthorization(status: Swift.String)
  @objc final public func addGenericPassportCompleted()
  @objc final public func addGenericPassportFailure()
  @objc final public func screenRecorderOnError(eventData: Foundation.NSError?)
  final public func infoDocumentAddSuccess()
  final public func infoDocumentAddFailure()
  @objc final public func appointmentTolerance(time: Swift.Int)
  @objc final public func luminosityAnalyzed(result: Swift.String)
  @objc final public func dismissBeforeAnswered()
  @objc final public func dismissCallWait()
  @objc final public func currentThermalState(state: Swift.String)
  @objc final public func documentSignSuccess()
  @objc final public func documentSingFailure()
  @objc final public func agentRequest(eventData: Swift.String)
  @objc final public func callWait()
  @objc final public func callStart()
  @objc final public func idTypeCheck()
  @objc final public func idTypeBackCheck()
  @objc final public func idTypeCheckCompleted()
  @objc final public func idFakeCheck()
  @objc final public func idFakeDetected()
  @objc final public func idFakeCheckCompleted()
  @objc final public func idFront()
  @objc final public func idFrontCompleted()
  @objc final public func idBack()
  @objc final public func idBackCompleted()
  @objc final public func idDocStoreCompleted()
  @objc final public func idDocCompleted()
  final public func ocrCompleted()
  @objc final public func nfcVerify()
  @objc final public func nfcVerifyCompleted()
  @objc final public func nfcStoreCompleted()
  @objc final public func nfcCompleted()
  @objc final public func faceDetect()
  @objc final public func faceDetectCompleted()
  @objc final public func smileDetect()
  @objc final public func smileDetectCompleted()
  @objc final public func eyeClose()
  @objc final public func eyeCloseDetected()
  @objc final public func faceStoreCompleted()
  @objc final public func faceCompleted()
  @objc final public func faceUp()
  @objc final public func faceUpDetected()
  @objc final public func faceLeft()
  @objc final public func faceLeftDetected()
  @objc final public func faceRight()
  @objc final public func faceRightDetected()
  @objc final public func eyeCloseInterval()
  @objc final public func eyeCloseIntervalDetected()
  @objc final public func eyeOpenInterval()
  @objc final public func eyeOpenIntervalDetected()
  @objc final public func hangupLocal()
  @objc final public func hangupRemote()
  @objc final public func forceHangup()
  @objc final public func idVerifyExited()
  @objc final public func failure()
  @objc final public func idCheckFailure()
  @objc final public func timeoutFailure()
  @objc final public func tokenFailure()
  @objc final public func tokenError()
  @objc final public func noConnectionError()
  @objc final public func callConnectionFailure()
  @objc final public func nfcFailure()
  @objc final public func nfcBACDATAFailure()
  @objc final public func connectionFailure()
  @objc final public func faceLivenessCheckFailure()
  @objc final public func idRetry()
  @objc final public func nfcRetry()
  @objc final public func faceRetry()
  @objc final public func resolutionChanged()
  @objc final public func resultGetFailure()
  @objc final public func resultGetCompleted(_ value: EnQualify.EnverifyVerifyCallResult?)
  final public func callSessionCloseResult(isSuccess: Swift.Bool)
  @objc final public func sessionStartFailure()
  @objc final public func sessionStartCompleted(sessionUid: Swift.String)
  @objc final public func hostConnected()
  @objc final public func getAuthTokenCompleted()
  @objc final public func getSettingsCompleted()
  @objc final public func getSettingsFailure()
  @objc final public func idDocStoreFailure()
  @objc final public func addChipStoreFailure()
  @objc final public func addChipStoreCompleted()
  @objc final public func addFaceCompleted()
  @objc final public func addFaceFailure()
  @objc final public func idTextRecognitionTimeout()
  @objc final public func roomIDSendFailure()
  @objc final public func roomIDSendCompleted()
  @objc final public func screenRecorderOnStart()
  @objc final public func screenRecorderOnComplete()
  final public func screenRecorderOnError(eventData: Swift.String)
  @objc final public func requestVideoAudioPermissionsResult(_ granted: Swift.Bool)
  final public func connectionTypeChanged()
  @objc final public func idVerifyReady()
  @objc final public func idSelfVerifyReady()
  @objc final public func getAuthTokenFailure()
  @objc final public func integrationAddCompleted()
  @objc final public func integrationAddFailure()
  @objc final public func callSessionCloseResult(status: EnQualify.EnVerifyCallSessionStatusTypeEnum)
  @objc final public func screenRecorderOnAppend()
  @objc final public func cardFrontDetectStarted()
  @objc final public func cardFrontDetected()
  @objc final public func cardBackDetectStarted()
  @objc final public func cardBackDetected()
  @objc final public func cardHoloDetectStarted()
  @objc final public func cardHoloDetected()
  @objc final public func videoUploadSuccess()
  @objc final public func videoUploadFailure()
  @objc final public func maximumCallTimeExpired()
}
public enum Page : Swift.String, Swift.CaseIterable {
  case homeScreen
  case myProfile
  case qr
  case financeGuru
  case transactionSheet
  public init?(rawValue: Swift.String)
  public typealias AllCases = [WalletUISdk.Page]
  public typealias RawValue = Swift.String
  public static var allCases: [WalletUISdk.Page] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct TransactionSummaryModel : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.TransactionSummaryModel, b: WalletUISdk.TransactionSummaryModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoundedCorner : SwiftUI.Shape {
  public var radius: CoreFoundation.CGFloat
  public var corners: UIKit.UIRectCorner
  public init(radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner)
  public func path(in rect: CoreFoundation.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<WalletUISdk.RoundedCorner, SwiftUI.ForegroundStyle>
}

public struct AnimationView : SwiftUI.UIViewRepresentable {
  public init(name: WalletUISdk.AnimationFileName, loopMode: Lottie.LottieLoopMode = .loop, onAnimationFinished: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<WalletUISdk.AnimationView>) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIView, context: SwiftUI.UIViewRepresentableContext<WalletUISdk.AnimationView>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
extension Swift.String {
  public var length: Swift.Int {
    get
  }
  public func moneyPattern() -> Swift.String
  public subscript(i: Swift.Int) -> Swift.String {
    get
  }
  public func substring(fromIndex: Swift.Int) -> Swift.String
  public func substring(toIndex: Swift.Int) -> Swift.String
  public subscript(r: Swift.Range<Swift.Int>) -> Swift.String {
    get
  }
  public func isNotEmpty() -> Swift.Bool
  public func applyPattern(pattern: WalletUISdk.Pattern, replacmentCharacter: Swift.Character = "#") -> Swift.String
  public func applyMasterpassMasking() -> Swift.String
  public func formatAsCardNumber() -> Swift.String
  public func isValidEmail() -> Swift.Bool
  public func changeComma() -> Swift.Double
  public func currencyFormatting() -> Swift.String
  public func timeFormatted(_ totalSeconds: Swift.Int) -> Swift.String
  public func transactionCheckActionType() -> Swift.Bool
  public func getFileName() -> Swift.String
  public func getFileExtension() -> Swift.String
  public func removingWhitespaces() -> Swift.String
  public func phoneNumberCorrective() -> Swift.String
  public func phoneNumberWithCountyCodeWithoutPlus() -> Swift.String
  public func phoneNumberCorrectiveWithFormat() -> Swift.String
  public func checkNationCode() -> Swift.String
  public func toBase64() -> Swift.String?
  public func fromBase64() -> Swift.String?
  public func base64ToImage() -> SwiftUI.Image?
  public func getInitials() -> (Swift.String, Swift.String?)
  public func removeSpaceAndBracketsFromPhone() -> Swift.String
  public func removeSpaceBracketsAndPlusFromPhone() -> Swift.String
  public func uppercasedTurkish() -> Swift.String
  public func uppercasedLocalized() -> Swift.String
  public func hash() -> Swift.String
}
extension SwiftUI.Font {
  public static var title: SwiftUI.Font {
    get
  }
  public static var title2: SwiftUI.Font {
    get
  }
  public static var title3: SwiftUI.Font {
    get
  }
  public static var largeTitle: SwiftUI.Font {
    get
  }
  public static var body: SwiftUI.Font {
    get
  }
  public static var headline: SwiftUI.Font {
    get
  }
  public static var subheadline: SwiftUI.Font {
    get
  }
  public static var callout: SwiftUI.Font {
    get
  }
  public static var footnote: SwiftUI.Font {
    get
  }
  public static var caption: SwiftUI.Font {
    get
  }
  public static var caption2: SwiftUI.Font {
    get
  }
  public static func customSystem(_ style: SwiftUI.Font.TextStyle, design: SwiftUI.Font.Design? = nil, weight: SwiftUI.Font.Weight? = nil) -> SwiftUI.Font
  public static func customSystem(size: CoreFoundation.CGFloat, weight: SwiftUI.Font.Weight = .regular, design: SwiftUI.Font.Design = .default) -> SwiftUI.Font
}
public struct SendMoneyToIbanTransactionModel : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.SendMoneyToIbanTransactionModel, b: WalletUISdk.SendMoneyToIbanTransactionModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class FirebaseManager {
  public static let shared: WalletUISdk.FirebaseManager
  public func initializeFirebase()
  public func logTestEvent()
  public func logEvent(name: WalletUISdk.FirebaseEvent, parameters: [Swift.String : Any])
  public func setUserProperty(key: Swift.String, value: Swift.String)
  public func setUserID(_ userID: Swift.String)
  public func setUserPropertiesAndUserID(userID: Swift.String)
  public func resetAnalyticsData()
  @objc deinit
}
public enum FirebaseEvent : Swift.String {
  case paySignUpSteps
  case paySignUp
  case payLoginStep
  case payLogin
  case paySettingsClick
  case payQRPaymentSuccess
  case payAccountInfoClick
  case payIncreaseLimitClick
  case payGetNowPayLaterClick
  case payMenuClick
  case payMyCardsClick
  case payAddCardSteps
  case payAddCard
  case payDeleteCardSteps
  case payDeleteCard
  case payConfirmIdentitySteps
  case payOpetPayCardDetail
  case payMasterpassCardsDetail
  case payAddMasterpassCardsClick
  case payTransactionClick
  case payTransactionDetail
  case paySendMoneySteps
  case payRequestMoneySteps
  case payRequestMoney
  case paySendMoney
  case payLoadMoneySteps
  case payLoadMoney
  case payViewHowTo
  case payEventPurchase
  case payConfirmIdentity
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.Date {
  public var year: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AnimationUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(name: WalletUISdk.AnimationFileName, loopMode: Lottie.LottieLoopMode = .loop, frame: CoreFoundation.CGRect = .zero, onAnimationFinished: (() -> Swift.Void)? = nil)
  @objc deinit
}
public typealias Leading<V> = SwiftUI.Group<V> where V : SwiftUI.View
public typealias Trailing<V> = SwiftUI.Group<V> where V : SwiftUI.View
public enum MenuType {
  case slided
  case swiped
  public static func == (a: WalletUISdk.MenuType, b: WalletUISdk.MenuType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SwipeRole {
  case destructive
  case cancel
  case defaults
  public static func == (a: WalletUISdk.SwipeRole, b: WalletUISdk.SwipeRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SwipeState : Swift.Equatable {
  case untouched
  case swiped(Foundation.UUID)
  public static func == (a: WalletUISdk.SwipeState, b: WalletUISdk.SwipeState) -> Swift.Bool
}
extension Foundation.NumberFormatter {
  public static var currency: Foundation.NumberFormatter {
    get
  }
}
@available(macCatalyst 14.0, *)
extension AVFoundation.AVCaptureDevice {
  public static func zoomedCameraForQRCode(withMinimumCodeSize minimumCodeSize: Swift.Float = 20) -> AVFoundation.AVCaptureDevice?
}
public enum PermissionsError : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  case userError
  case fetchError(any Swift.Error)
  public var description: Swift.String {
    get
  }
  public typealias ID = Swift.String
}

extension Swift.Dictionary where Value : Swift.Equatable {
  public func someKey(forValue val: Value) -> Key?
}
public enum AccountActionType {
  case currentPeriodTransaction
  case accountStatement
  public static func == (a: WalletUISdk.AccountActionType, b: WalletUISdk.AccountActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SplashAnimationUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(name: WalletUISdk.AnimationFileName, loopMode: Lottie.LottieLoopMode = .loop, frame: CoreFoundation.CGRect = .zero, onAnimationFinished: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension SwiftUI.VerticalAlignment {
  public enum Custom : SwiftUI.AlignmentID {
    public static func defaultValue(in d: SwiftUI.ViewDimensions) -> CoreFoundation.CGFloat
  }
  public static let custom: SwiftUI.VerticalAlignment
}
public struct QrPaymentModel : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.QrPaymentModel, b: WalletUISdk.QrPaymentModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AESEncryption {
  @objc deinit
}
public struct UIConfig {
  public var brandName: Swift.String
  public var primaryColor: SwiftUI.Color
  public var secondaryColor: SwiftUI.Color
  public var backgroundColor: SwiftUI.Color
  public var logoLight: SwiftUI.Image
  public var logoDark: SwiftUI.Image
  public var background: SwiftUI.Image
  public var backgroundUpperIcon: SwiftUI.Image
  public var splash: SwiftUI.Image
  public init(brandName: Swift.String, primaryColor: SwiftUI.Color, secondaryColor: SwiftUI.Color, backgroundColor: SwiftUI.Color, logoLight: SwiftUI.Image, logoDark: SwiftUI.Image, background: SwiftUI.Image, backgroundUpperIcon: SwiftUI.Image, splash: SwiftUI.Image)
}
extension Swift.Array where Element : Swift.Hashable {
  public func removingDuplicates() -> [Element]
  public mutating func removeDuplicates()
}
extension Swift.Int {
  public func getMont() -> Swift.String
  public func checkActionType() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SDKFontLoader {
  public static let shared: WalletUISdk.SDKFontLoader
  public func font(name: Swift.String, size: CoreFoundation.CGFloat) -> UIKit.UIFont?
  public func loadCustomFonts()
  @objc deinit
}
extension SwiftUI.View {
  public func keyboardAwarePadding() -> some SwiftUI.View
  
  public func hideKeyboard()
  public func cornerRadius(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUI.View
  
  public func buttonOpacitMask() -> some SwiftUI.View
  
  public func whitelabelNavigationBarTitle(_ title: Swift.String, onBackButton: (() -> Swift.Void)? = nil, isShowBackButton: Swift.Bool = true) -> some SwiftUI.View
  
  public func customStatusBarStyle() -> some SwiftUI.View
  
  @inlinable public func hidden(_ isHidden: Swift.Bool) -> some SwiftUI.View {
    Group {
      if isHidden {
        hidden()
      } else {
        self
      }
    }
  }
  
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var firstKeyWindow: UIKit.UIWindow? {
    get
  }
  @available(macCatalystApplicationExtension, unavailable)
  @available(iOSApplicationExtension, unavailable)
  @available(tvOSApplicationExtension, unavailable)
  @_Concurrency.MainActor(unsafe) public var topmostViewController: UIKit.UIViewController? {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var topmostPresentedViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var topmostViewController: UIKit.UIViewController? {
    get
  }
}
public struct QrTransactionSummaryModel : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.QrTransactionSummaryModel, b: WalletUISdk.QrTransactionSummaryModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}

public struct TurkcellInvoiceInquiryModelDTO : Swift.Hashable {
  public var invoiceAmount: Swift.Double?
  public var invoiceDueDate: Swift.String?
  public var invoiceIssueDate: Swift.String?
  public var invoiceInfo1: Swift.String?
  public var invoiceInfo2: Swift.String?
  public var invoiceInfo3: Swift.String?
  public var bankRefNo: Swift.String?
  public var invoiceNo: Swift.String?
  public var invoiceRefNo: Swift.String?
  public var invoiceSeqNo: Swift.String?
  public var invoiceStatus: Swift.String?
  public var custPaymentMethod: Swift.String?
  public var newInstallmentAmount: Swift.Double?
  public var channelCommission: Swift.Double?
  public var paymentAmount: Swift.Double?
  public var currency: Swift.String?
  public var invoiceIndex: Swift.String?
  public var commissionAmount: Swift.Double?
  public var totalAmount: Swift.Double?
  public var key1: Swift.String?
  public var key2: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.TurkcellInvoiceInquiryModelDTO, b: WalletUISdk.TurkcellInvoiceInquiryModelDTO) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ScreenType {
  case standart
  case scrollable
  case serviceless
  case scrollableWithoutNavigationBar
  case withoutNavigationBar
  case tabViewScreen
  case scrollableTabView
  case homeScreen
  case sheetView
  case webview
  public static func == (a: WalletUISdk.ScreenType, b: WalletUISdk.ScreenType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WalletFont {
  public var asUIFont: UIKit.UIFont {
    get
  }
  public var asFont: SwiftUI.Font {
    get
  }
}
public struct SplitBillModel : Swift.Hashable {
  public var amount: Swift.Double
  public var targetFullName: Swift.String
  public var merchantName: Swift.String
  public var refNumber: Swift.Int64
  public var actionType: Swift.String
  public var txnCategoryId: Swift.Int64
  public var txnName: Swift.String
  public var instrumentName: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.SplitBillModel, b: WalletUISdk.SplitBillModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WalletCard : Swift.Identifiable, Swift.Hashable {
  public var id: Foundation.UUID
  public let name: Swift.String
  public let cardNumber: Swift.String
  public let cardToken: Swift.String
  public var status: WalletUISdk.WalletCardStatusType
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletUISdk.WalletCard, b: WalletUISdk.WalletCard) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public struct GeneralError : Swift.Error, Swift.Codable, Swift.CustomStringConvertible {
  public let code: Swift.String
  public let message: Swift.String?
  public init(code: Swift.String, message: Swift.String? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public var description: Swift.String {
    get
  }
}
extension WalletUISdk.GeneralError {
  public static func fromJSON(_ data: Foundation.Data) throws -> WalletUISdk.GeneralError
  public static func decode(from string: Swift.String) throws -> WalletUISdk.GeneralError
  public func toJSON() throws -> Foundation.Data
  public func toString() throws -> Swift.String
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func initWalletUi(config: WalletUISdk.UIConfig? = nil, environment: WalletUISdk.WalletUiEnvironment, successCallback: @escaping (Swift.String) -> Swift.Void, errorCallback: @escaping (WalletUISdk.GeneralError) -> Swift.Void, closeCallback: ((Swift.String) -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PopTransitioning : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public enum AnimationFileName : Swift.String {
  case nfc
  case agentCall
  case faceDetect
  case ocr
  case bg
  case logo
  case loading
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum WalletUiEnvironment : Swift.String {
  case TEST
  case UAT
  case PREPROD
  case PROD
  public var displayName: Swift.String {
    get
  }
  public static func getLastSelectedEnvironment() -> WalletUISdk.WalletUiEnvironment
  public static func saveSelectedEnvironment(_ env: WalletUISdk.WalletUiEnvironment)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func wlLoadViewFromNib() -> UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func wl_embedView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func wl_embedView(_ view: UIKit.UIView, insets: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) public func wlConstrainToEdges(_ subview: UIKit.UIView)
}
public enum ToWhichPage : Swift.Int, Swift.CaseIterable {
  case askForMoney
  case sendMoney
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [WalletUISdk.ToWhichPage]
  public typealias RawValue = Swift.Int
  public static var allCases: [WalletUISdk.ToWhichPage] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.Double {
  public func rounded(toPlaces places: Swift.Int) -> Swift.Double
  public func df2so() -> Swift.String
}
@available(macCatalyst 14.0, *)
extension WalletUISdk.CodeScannerView {
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ScannerViewController : UIKit.UIViewController, UIKit.UINavigationControllerDelegate {
    @_Concurrency.MainActor(unsafe) public init(showViewfinder: Swift.Bool = false, parentView: WalletUISdk.CodeScannerView)
    @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
    @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
    @_Concurrency.MainActor(unsafe) final public func reset()
    @_Concurrency.MainActor(unsafe) final public func readyManualCapture()
    @objc deinit
  }
}
@available(macCatalyst 14.0, *)
extension WalletUISdk.CodeScannerView.ScannerViewController : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
@available(macCatalyst 14.0, *)
extension WalletUISdk.CodeScannerView.ScannerViewController : UIKit.UIImagePickerControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc final public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@available(macCatalyst 14.0, *)
extension WalletUISdk.CodeScannerView.ScannerViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
@available(macCatalyst 14.0, *)
extension WalletUISdk.CodeScannerView.ScannerViewController : AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
  @_Concurrency.MainActor(unsafe) @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
}
@available(macCatalyst 14.0, *)
extension AVFoundation.AVCaptureDevice {
  public static var bestForVideo: AVFoundation.AVCaptureDevice? {
    get
  }
}
extension SwiftUI.Binding where Value == Swift.String {
  public func maxLimit(_ limit: Swift.Int) -> SwiftUI.Binding<Value>
  public func changePattern(_ limit: Swift.Int, pattern: WalletUISdk.Pattern) -> SwiftUI.Binding<Value>
  public func moneyPattern() -> SwiftUI.Binding<Value>
}
extension SwiftUI.Binding where Value == Swift.Bool? {
  public func onNone(_ fallback: Swift.Bool) -> SwiftUI.Binding<Swift.Bool>
  public func onChange(_ handler: @escaping (Value) -> Swift.Void) -> SwiftUI.Binding<Value>
  public func onChange(perform action: @escaping () -> Swift.Void) -> SwiftUI.Binding<Value>
  public func onChange(perform action: @escaping (_ newValue: Value) -> Swift.Void) -> SwiftUI.Binding<Value>
}
prefix public func ! (value: SwiftUI.Binding<Swift.Bool>) -> SwiftUI.Binding<Swift.Bool>
public protocol EnquraSessionManagerDelegate : AnyObject {
  func showAlert(message: Swift.String)
  func navigateSessionType()
}
@_hasMissingDesignatedInitializers final public class EnquraSessionManager : WalletUISdk.EnquraSessionProtocol {
  final public var idVerifyMainSSView: UIKit.UIViewController?
  final public var customerIdentityNumber: Swift.String?
  final public var kpsInformation: WalletUISdk.KPSInformationModel?
  final public var isFaceUploadDataState: Swift.Bool
  final public var agentRequestType: WalletUISdk.AgentRequestType {
    get
    set
  }
  final public var lastAgentRequestType: WalletUISdk.AgentRequestType
  final public var tempIsAgentDummyShown: Swift.Bool?
  weak final public var delegate: (any WalletUISdk.EnquraSessionDelegate)?
  weak final public var alertDelegate: (any WalletUISdk.EnquraSessionManagerDelegate)?
  final public var initialFlow: WalletUISdk.EnquraSessionStartFlow
  final public var isAllowedPermissions: Swift.Bool {
    get
  }
  final public var isDeviceNFCAvailable: Swift.Bool {
    get
  }
  final public var nfcStoredCustomerIdentityData: EnQualify.EnVerifyCustomerIdentityDoc {
    get
  }
  public static var shared: any WalletUISdk.EnquraSessionProtocol
  final public func setRootNavigationController(_ navigationController: UIKit.UINavigationController)
  final public func getNavigation() -> UIKit.UINavigationController?
  final public func initializeSession(onComplete: @escaping () -> Swift.Void)
  final public func startSession(with flow: WalletUISdk.EnquraSessionStartFlow, onComplete: @escaping () -> Swift.Void)
  final public func continueSession(with flow: WalletUISdk.AgentRequestType, onComplete: @escaping () -> Swift.Void)
  final public func requestVideoAudioPermissions()
  final public func nfcStart()
  final public func ocrStart()
  final public func faceDetectStart()
  final public func setNFCBACData()
  final public func callSessionClose()
  final public func callSessionCloseWithoutFinish()
  final public func closeSession()
  final public func closeSessionWithPop()
  final public func addIntegration(onComplete: @escaping () -> Swift.Void)
  @objc deinit
}
public struct GetEnquraIntegrationInfoResponseDTO {
  public let referenceId: Swift.Int64
  public let identityNumber: Swift.String
  public let birthDate: Swift.String
  public let birthPlace: Swift.String
  public let serialNumber: Swift.String
  public let identityExpireDate: Swift.String
  public init(referenceId: Swift.Int64, identityNumber: Swift.String, birthDate: Swift.String, birthPlace: Swift.String, serialNumber: Swift.String, identityExpireDate: Swift.String)
}
extension WalletUISdk.GetEnquraIntegrationInfoResponseDTO {
  public init(_ response: wallet_ios_sdk.AddEnquraIntegrationOutputParams)
}
public class KPSInformationModel {
  final public let birthDate: Swift.String
  final public let serialNumber: Swift.String
  final public let identityExpireDate: Swift.String
  public init(kpsInfo: wallet_ios_sdk.AddEnquraIntegrationOutputParams)
  @objc deinit
}
extension Swift.String {
  public var toInt: Swift.Int? {
    get
  }
  public var diacriticRemoved: Swift.String {
    get
  }
  public var isBlank: Swift.Bool {
    get
  }
  public var isNotBlank: Swift.Bool {
    get
  }
  public var trim: Swift.String {
    get
  }
  public var isNumeric: Swift.Bool {
    get
  }
  public func height(withConstrainedWidth width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func width(withConstrainedHeight height: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func addPrefix(_ value: Swift.String) -> Swift.String
  public func maskIfMail() -> Swift.String
  public func convertDateToHumanReadableFormat(outputFormat: WalletUISdk.DgparaWallletDateFormat) -> Swift.String?
  public func convertToDate(_ format: WalletUISdk.DgparaWallletDateFormat) -> Foundation.Date?
  public func uppercasedTurkishCharacter() -> Swift.String
  public func separate(every stride: Swift.Int = 4, with separator: Swift.Character = " ") -> Swift.String
  public var asMicroCreditDate: Foundation.Date? {
    get
  }
  public func lowercasedWithTurkishCharacters() -> Swift.String
  public func applyPattern(pattern: Swift.String, replacmentCharacter: Swift.Character = "#") -> Swift.String
}
public enum DgparaWallletDateFormat {
  case dgpays
  case gql
  case nfcbacData
  case simple
  case custom(Swift.String)
}
extension Foundation.Date {
  public func convertToString(_ format: WalletUISdk.DgparaWallletDateFormat) -> Swift.String
}
extension WalletUISdk.EnquraSessionManager {
  final public func getCustomerSegmentId(completion: @escaping (Swift.Bool) -> Swift.Void)
}
public enum ScanError : Swift.Error {
  case badInput
  case badOutput
  case initError(_: any Swift.Error)
  case permissionDenied
}
@available(macCatalyst 14.0, *)
public struct ScanResult {
  public let string: Swift.String
  public let type: AVFoundation.AVMetadataObject.ObjectType
  public let image: UIKit.UIImage?
  public let corners: [CoreFoundation.CGPoint]
}
public enum ScanMode {
  case once
  case oncePerCode
  case continuous
  case continuousExcept(ignoredList: Swift.Set<Swift.String>)
  case manual
}
@available(macCatalyst 14.0, *)
public struct CodeScannerView : SwiftUI.UIViewControllerRepresentable {
  public let codeTypes: [AVFoundation.AVMetadataObject.ObjectType]
  public let scanMode: WalletUISdk.ScanMode
  public let manualSelect: Swift.Bool
  public let scanInterval: Swift.Double
  public let showViewfinder: Swift.Bool
  public let requiresPhotoOutput: Swift.Bool
  public var simulatedData: Swift.String
  public var shouldVibrateOnSuccess: Swift.Bool
  public var isTorchOn: Swift.Bool
  public var isPaused: Swift.Bool
  public var isGalleryPresented: SwiftUI.Binding<Swift.Bool>
  public var videoCaptureDevice: AVFoundation.AVCaptureDevice?
  public var completion: (Swift.Result<WalletUISdk.ScanResult, WalletUISdk.ScanError>) -> Swift.Void
  public init(codeTypes: [AVFoundation.AVMetadataObject.ObjectType], scanMode: WalletUISdk.ScanMode = .once, manualSelect: Swift.Bool = false, scanInterval: Swift.Double = 2.0, showViewfinder: Swift.Bool = false, requiresPhotoOutput: Swift.Bool = true, simulatedData: Swift.String = "", shouldVibrateOnSuccess: Swift.Bool = true, isTorchOn: Swift.Bool = false, isPaused: Swift.Bool = false, isGalleryPresented: SwiftUI.Binding<Swift.Bool> = .constant(false), videoCaptureDevice: AVFoundation.AVCaptureDevice? = AVCaptureDevice.bestForVideo, completion: @escaping (Swift.Result<WalletUISdk.ScanResult, WalletUISdk.ScanError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: WalletUISdk.CodeScannerView.Context) -> WalletUISdk.CodeScannerView.ScannerViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: WalletUISdk.CodeScannerView.ScannerViewController, context: WalletUISdk.CodeScannerView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = WalletUISdk.CodeScannerView.ScannerViewController
}
@available(macCatalyst 14.0, *)
extension WalletUISdk.CodeScannerView {
  @available(*, deprecated, renamed: "requiresPhotoOutput")
  public var requirePhotoOutput: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PushTransitioning : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension WalletUISdk.WalletAgreementAgreementStatus : Swift.Equatable {}
extension WalletUISdk.WalletAgreementAgreementStatus : Swift.Hashable {}
extension WalletUISdk.WalletAgreementAgreementStatus : Swift.RawRepresentable {}
extension WalletUISdk.WalletUiSDK.HomeTabType : Swift.Equatable {}
extension WalletUISdk.WalletUiSDK.HomeTabType : Swift.Hashable {}
extension WalletUISdk.QrTransactionType : Swift.Equatable {}
extension WalletUISdk.QrTransactionType : Swift.Hashable {}
extension WalletUISdk.QrTransactionType : Swift.RawRepresentable {}
extension WalletUISdk.AgentRequestType : Swift.Equatable {}
extension WalletUISdk.AgentRequestType : Swift.Hashable {}
extension WalletUISdk.AgentRequestEventType : Swift.Equatable {}
extension WalletUISdk.AgentRequestEventType : Swift.Hashable {}
extension WalletUISdk.AgentRequestEventType : Swift.RawRepresentable {}
extension WalletUISdk.EnquraSessionStartFlow : Swift.Equatable {}
extension WalletUISdk.EnquraSessionStartFlow : Swift.Hashable {}
extension WalletUISdk.Pattern : Swift.Equatable {}
extension WalletUISdk.Pattern : Swift.Hashable {}
extension WalletUISdk.Pattern : Swift.RawRepresentable {}
extension WalletUISdk.WalletCardStatusType : Swift.Equatable {}
extension WalletUISdk.WalletCardStatusType : Swift.Hashable {}
extension WalletUISdk.WalletCardStatusType : Swift.RawRepresentable {}
extension WalletUISdk.Page : Swift.Equatable {}
extension WalletUISdk.Page : Swift.Hashable {}
extension WalletUISdk.Page : Swift.RawRepresentable {}
extension WalletUISdk.FirebaseEvent : Swift.Equatable {}
extension WalletUISdk.FirebaseEvent : Swift.Hashable {}
extension WalletUISdk.FirebaseEvent : Swift.RawRepresentable {}
extension WalletUISdk.MenuType : Swift.Equatable {}
extension WalletUISdk.MenuType : Swift.Hashable {}
extension WalletUISdk.SwipeRole : Swift.Equatable {}
extension WalletUISdk.SwipeRole : Swift.Hashable {}
extension WalletUISdk.AccountActionType : Swift.Equatable {}
extension WalletUISdk.AccountActionType : Swift.Hashable {}
extension WalletUISdk.ScreenType : Swift.Equatable {}
extension WalletUISdk.ScreenType : Swift.Hashable {}
extension WalletUISdk.AnimationFileName : Swift.Equatable {}
extension WalletUISdk.AnimationFileName : Swift.Hashable {}
extension WalletUISdk.AnimationFileName : Swift.RawRepresentable {}
extension WalletUISdk.WalletUiEnvironment : Swift.Equatable {}
extension WalletUISdk.WalletUiEnvironment : Swift.Hashable {}
extension WalletUISdk.WalletUiEnvironment : Swift.RawRepresentable {}
extension WalletUISdk.ToWhichPage : Swift.Equatable {}
extension WalletUISdk.ToWhichPage : Swift.Hashable {}
extension WalletUISdk.ToWhichPage : Swift.RawRepresentable {}
